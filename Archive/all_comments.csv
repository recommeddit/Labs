C++ IDE,git merge tool,web development podcasts
"You don't mention what OS you're using, but some general observations:


On Windows, Visual Studio is the standard IDE. The ~~Express~~ Community version is free to download and use. Its ""intellisense"" is second to none. The only downside is that the compiler doesn't support the latest standards as well as Clang and GCC.


I use a Mac, and I can highly recommend CLion by Jetbrains (it's also available for Windows and Linux). The only downside is that it's a paid product (although they do offer a one month free trial).


QtCreator is another multiplatform IDE that is widely used. I've found it to be faster than CLion, though it's missing some handy functions that CLion has. It is free, though.


Lastly, if you're using Linux or MacOS then many people swear by Emacs. (Many other people swear at it, though.) It's not an IDE in the traditional sense, but it can be configured to do just about anything, if you're the kind of person who likes tinkering with that sort of thing.","Meld is my favourite. I'm sure there are some tutorials out there, but it's easy to use from the start, and there are some keyboard shortcuts that make life easier.","Shop Talk and Syntax are my favorite webdev podcasts. They'll help you as a beginner while exposing you to relevant and cool topics that relate to the industry at large. I've gotten a lot out of them over the past year of self-learning!
You may also be interested in JavaScript Jabber and My JavaScript Story"
"A link to a good reference;
https://m.reddit.com/r/learnprogramming/wiki/tools",I'm a fan of beyond compare - mainly as it's cross platform so I can use it on Lin/Mac/Win,No one mentioned Frontend happy hour so I'll throw them out there.
"I use Kdevelop  as an ide, fast and lots of useful features. Not sure how easy it is to install on windows though",https://www.sublimemerge.com/,I like Coding blocks although they focus on C#. They still cover concepts that apply to other languages.
Vim.,TIL ppl use something other than “git fetch; git merge origin/master”,"Check out CodingPhase on YouTube
https://www.youtube.com/channel/UC46wWUso9H5KPQcoL9iE3Ug"
"On Linux, eclipse. Better vim emulation than clion and doesn't just work with cmake. Better indexing and features than qtcreator (unless you're actually using Qt, perhaps).","p4merge - https://www.perforce.com/downloads/visual-merge-tool
The user guide for it: https://www.perforce.com/manuals/p4merge/Content/P4Merge/Home-p4merge.html
A video tutorial (with transcript) for it - (well, actually p4v, but it gets into the merge tool) https://www.perforce.com/video-tutorials/vcs/resolving-conflicts-p4v
A video of someone using git and p4merge: https://youtu.be/xDs-LkmQBjI","Had passed some time since the last Podcast for Devs.
What about Software Engineering Daily and Software Engineering Radio I enjoy the last one. The first one is by no means less. May be it's a matter of host style. They are not completely about webdev but they have interesting themes in general.
HanselMinutes podcast also discuss several themes, not webdev in specific.
Would be great if this post about current webdev podcasts keeps current."
"The ""best""  IDE on windows is probably Visual Studio.
I do not say that it is perfect.
There is also free community edition of it.",p4merge,"I love (Hansel Minutes)
I start to follow also ""developer Tea"" does not focus on web (more generic good developers habits )"
I like a simple setup. I'm using Sublime Text (https://www.sublimetext.com/) for writing and Coati (https://www.coati.io/) for navigation and understanding. They both work on Windows.,There has never been a better tool than Kdiff3,syntax suuuucks
"It's amazing how under-represented Eclipse is in these comments. I love Eclipse CDT, it has the most complete C++14 support of all the IDEs, it's cross-platform, it's free and it has all the neat features you expect from an IDE.","No love for VSCode as mergetool? I know there is this hate to M, but Vscode is a good product, and works really nice as difftool and mergetool","Yeah. I already listened to them, but think they are little bit to advanced for me. I will still listen to them and get as much out of it as possible."
"We have at least one thread like this every week, go figure.","I really like SemanticMerge, which should have a package for CentOS","OK, thanks. I will definitely check this out. I am looking to understand the concepts as a whole. too. As said I would like to understand the basics. Sounds like a suitable proposal :)"
Eclipse has a good code navigation.,You can shorten that to just git pull origin master :),"hm. He's only doing youtube videos, or? And I think I don't like his talking style :("
Do not forget http://codelite.org/ I use it for cross-platform software (Linux / Win) successfully. I develop GIS software.,What makes it better than the others?,Thanks :) I will check them definitely out.
"I would recommend juCi++: https://github.com/cppit/jucipp due to its tight integration with libclang for best possible C++11/14/17 support. However, debugging through lldb is not yet supported on Windows and Arch Linux.","I haven't used a dedicated merge tool in years (I just use my text editor) but back when I did, kdiff3 was my jam.","Nah, Scott's awesome. But fuck that wes guy... :P"
"Depending on your platform.

Windows: Visual Studio
OSX: Xcode
Linux: probably Code::Blocks.",I don’t think kdiff3 has gotten an update in 6+ years. How’s it holding up?,more like nasty treats amirite
"Visual Studio is hands down the best, people are making other IDE's to mimic VS but none of them are remotely close.
For Linux I use Code::Blocks and for OS X I use notepad/sublime because all other ide's are garbage for OS X. Emacs I felt was not fluid in any way and the few months using it I kept finding work around a for all of its quirks and issues rather than coding.",Happy Cake Day!,Syntax episode on GDPR plz
"One important thing to note about Visual Studio is that there is a new edition called Community which is free yet it supports extensions and has almost everything Professional edition has, and VS 2015 update 2 is quite close to full C++17 support
EDIT: and experimental support for Clang frontend",Thanks!,I would go back in time and listen to old shop talk show episodes. A lot of them still hold up.
On Macs xcode is pretty much the standard ide.  Not saying that clion is a bad choice there or anywhere else though.,[deleted],he says awesome too much
"I forgot to put in my OS, thank you for pointing that out. I'm also glad that you took the time to put in the best IDE to use for each OS.",Beyond Compare. It's not free but from trying many tools I like its feature set the best.,"Tried to read that as  nasty (neɪsti)
Like tasty with an N
Thanks Syntax"
"I've found it to be faster than CLion, though it's missing some handy functions that CLion has.

Can you elaborate what are those handy functions?",Kaleidoscope,Agreed. There's a lotta good stuff in the Rapid Fire episodes
"This comment has been overwritten by an open source script to protect this user's privacy.  It was created to help protect users from doxing, stalking, harassment, and profiling for the purposes of censorship. 
If you would also like to protect yourself, add the Chrome extension TamperMonkey, or the Firefox extension GreaseMonkey and add this open source script.   
Then simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint:use RES), and hit the new OVERWRITE button at the top.",p4merge. Got used to it when perforce was our version control.,"ok, thanks. should I really start from episode 1 or what could be useful? can you name a good starting point? Or should I fixate on the rapid fire episodes?"
Is not a IDE.,Pure command line for me.,They didn’t call them rapid fires for a while. I think the conversations are interesting and probably hold up better than old rapid fires.
Did You write java?  How does CDT compare to JDT (specifically java EE version)?,There's a nice package for Atom called merge-conflicts that I usually use.,"Does Not Compute
link
Two dudes talking about their various experiences with web development and life in general. Some episodes are very technical while others are more conceptual. Fairly free format. They talk about both front and back end stuff.
Shop Talk Show
link
Two dudes talking about mostly front-end web development. Really casual, but has a lot of good information. They answer a lot of listener questions.
Talk Python to Me
link
A podcast about Python. Interviews with various developers talking about technologies built with Python. Tends to focus on back-end web development, distributed systems, and data science.
Software Engineering Daily
link
Interview format. Not really specific to any one language or discipline. Tends to involve a lot of web stuff, distributed systems, and machine learning.
Developer Tea
link
Focuses more on soft skills and design/architecture concepts. Not a lot of technical talk, but still very informative. Short episodes."
can you compare it with any experience of VS? I'm currently deciding between VS and Eclipse,meld works for me,"Not back-end oriented, but JavaScript Jabber has really good content. Another one that comes to mind is Programming Throwdown - every episode is focused on a different topic, but it's not only webdev focused."
"I don't know about the IDE as a whole ( I'm not a big IDE fan to begin with), but the VS debugger is the best debugger I have ever seen.  The custom visualizer capability is a game changer.",deleted,I've found Developer Tea to be nice on my commute to work.
"Was it not just C++17's library part, not whole? AFAIK it's not even clear yet what C++17 will have...
I'm VS user and i really like it, but it bugs me, that they just don't give too much shit about being standard compliant. Example. I'm guessing GCC gets it right.
So i wouldn't be so hyped about VS' support for supporting standards too much.",Diffuse and WinMerge.,The Laravel Podcast is the only one I listen to really. Quite fond of Jeffrey Way and Taylor Otwell
"Xcode drives me mad with its insistence that everything within a namespace must be indented, with no option to change it (or any other formatting settings for that matter). I admit that that's more of a personal gripe, though. I've also found that its autocompletion for C++ isn't as good as CLion or QtCreator.","I use opendiff.  
No specific reason besides it is what I have been using since I started working with xcode.",I've been listening to Frontend Happy Hour for a while now. I like it.
"Xcode it standard IDE on OS X but it support for C++ is pretty bad compared with other languages.
So CLion could be better alternative.","I usually wind up on diffchecker. So far I haven't needed that much functionality in a diff tool, so I just google it real quick.","Shop Talk is great. 
Three Devs and a Maybe is usually quite good."
"A few off the top of my head:


CLion has a ""quick fix"" feature which is absurdly good at doing What You Want at the right time. For example, if you declare a std::vector in your code, CLion will offer to add #include &lt;vector&gt; at the top of your source file if it's not already there (it even usually puts it in the right place). Another example: if you add a member variable to a class, CLion will offer to add it as an extra parameter to your constructor(s).


CLion can automatically generate a skeleton implementation for a member function in a cpp file, given a declaration in a header. This is a massive time-saver. It's even smart enough to provide a reasonable default implementation: a declaration of a bool function will return false, a declaration returning a pointer will have a definition returning nullptr, etc.


The current beta version has support for going the other way too: if you write a member function definition in a source file, CLion can add the declaration to the header


CLion is just great at code generation generally. Getters and setters (albeit with unchangeable lowerCamelCase Java-y names) for private member variables for example, or a constructor taking all members. It can do these inline or separate source and header, as you choose.


If you change the declaration of a function, CLion will offer to change the definition to match (and vice versa). QtCreator can do this too, but when it does it insists on moving * and &amp; so that they're hugging the variable name rather than the type name, which is NOT WHERE THEY GO :-)


CLion's autocomplete can ""see through"" macros, whereas QtCreator's can't. For example, I use an OpenGL wrapper (Glad) which uses macros to wrap the GL function pointers. QtCreator won't even tell me how many parameters the macro/function takes, whereas CLion tells me their names and types, like a regular function call.


QtCreator seems to have more difficulty in working out which header corresponds to which source file, if the two are in different directories of a CMake project. My typical CMake project layout has public headers in an include/ directory, and source files in src/. QtCreator won't associate a source and header unless you specifically add the header files to your CMake project, which is not recommended CMake practice.


On which note, QtCreator defaults to a project view which won't even show header files unless you add them to the project (which again, CMake recommends against as it detects used headers automatically). CLion defaults to a filesystem view instead, which shows all your files. QtCreator has a filesystem view of course, but with an annoying ""feature"" that if you double-click to edit a nested CMakeLists.txt from the filesystem view, QtCreator will try to open it as a new project(!).


N.B. I don't mean to sound overly critical of QtCreator -- I used to use it every day, I think it's a fantastic product, and I'd have no hesitation in recommending it to people who don't want or can't afford CLion. I could write a similar list of little features QtCreator has that I wish CLion would implement (responsiveness being the main one -- I don't know whether it's C++ vs Java or what, but QtCreator is much faster than CLion for me). It's entirely possible I'm now biased towards CLion simply because I stumped up money for it...",There is a diff plugin for sublime text that works well (can be found through package control),"Full stack radio has some awesome content. 
http://www.fullstackradio.com"
Vim + ctrl-P + youcompleteme  + ... is actually a pretty good setup.,I prefer the command line but source tree is nice,"Front End Happy Hour
http://www.frontendhappyhour.com"
What about emacs + projectile + cmake-ide + rtags + company-irony?,"Guy I work with wrote this, and it's nice. https://github.com/scottgonzalez/pretty-diff",Hey thanks for the suggestions! Those sound perfect. I guess I am just looking for non-design content. :)
"I barely write Java. From cursory examination and talking to Java devs, what I can basically say is this:

In Java, the language is easy to parse. Indexing is fast and accurate. In C++, the language is very hard to parse, particularly because of macros and turing complete templates. So indexing can be quite slow depending on your scale; a 1 million line project might take a couple of minutes to index from scratch (though typically you don't need to index from scratch all the time). And it will never be perfectly accurate; if go-to definition brings you to the right place more than 99% of the time you're generally quite happy.
Related to the above, Java IDE's (including Eclipse) can do very sophisticated refactorings very reliably. The ""latest and greatest"" in CDT is being able to refactor a class name; this means changing the name of the class at all points of usage, changing the file names, and changing the #includes. This very simple refactoring is already quite hard.
In Java, it's practical even with large projects to continuously build; each time you save you rebuild. When you hit a shortcut key in Eclipse your unit tests run instantly because your project is already built. This isn't really practical in C++; so you hit a key, and wait while your project builds and then the tests run.","For git merge conflicts, I usually give up and just edit the file manually.",I would add http://frontendhappyhour.com/ and https://secondcareerdevs.com/
"It's hard for me to compare the two, I do most of my programming on Linux, and when I occasionally have to code on Windows using C++, I always use the free versions of VS. This means I can't say what's not available in VS. These are some certain pros for Eclipse though:
 *  The most complete support for the most current C++ standard. Right now that would be C++14, but if the past is any indication, Eclipse will probably always be the first to support them, half a decade before VS.
 *  Cross-platform, Free (duh)
 *  Feels lighter, you don't have to install a massive multi-GB editor, you don't have to remember your accounts in various MS systems and renew your license periodically.
Some nice things to mention about Eclipse, without any comparison to VS (since I have no idea about the counterparts):
  * A very nice git integration, especially for staging chunks. Other features are nice too, like seeing line-by-line what code introduced when in the repo history.
  * Very powerful content assist. I really abuse my compiler with metaprogramming, using the latest features, but Eclipse can still give me content assist. It also sees through macros. Like, when a macro defines a new type with an argument as the name, eclipse realizes that and highlights that argument as a type. Eclipse's comprehension of the code also helps a lot with navigation, like jumping to definitions or call sites.
  * Decent refactoring and source generation support. Not stellar, but good considering how messy these things are in C++, like when a macro's argument is a new type name, if you rename the type somewhere in the codebase, that macro's argument is also updated.
Cons:
  * Cmake editor is available as an external plugin, which is somewhat annoying to install.
  * The editor can be unstable sometimes. You can see visual glitches, or the indexer can silently crash and content assist stops working. In some rare extreme cases, while trying to get content assist for deeply nested sections of code using a combination of advanced features (like a generic lambda capturing multiple variadic template argument packs) the editor can outright crash.","Vim + Fugitive.
I used to use kdiff and then Kaleidoscope. Vim isn't as pretty, but it's nice to do everything in the editor now.","Full Stack Radio, Shop Talk Show, Syntax"
"Was it not just C++17's library part, not whole?

Yes, ever since C++11, Microsoft has been playing this little game of announcing their compiler became feature-complete* (and the fine-print is that it's library feature-complete, which sometimes isn't even possible without the missing language features).","Yeahhh! The Jetbrains IDEs come with the most fabulous diff tool ever devised. The differences are really clear, and when you're comparing two files you can make direct edits to both. I've told them they should sell it as a separate product but they want to focus on IDEs. Download a free trial and give it a whirl!",I like syntax and some episodes of shop talk show
"I guess you are right, even C11 is not fully supported. But it appears that they have started to up their game lately",Beyond Compare is amazing.,Full Stack Radio is the only one I listen to and it's great.
That example actually works just fine on VS 2015 update 2.,"Beyond Compare is a great tool, but I don't really use it for diffs.
I work at a place which still does manual deployments for a specific product (lame), and Beyond Compare comes in really handy for them. But the diff tool in Webstorm is just too convenient.",It's not strictly web dev but I love code newbie and la vie in code
"I have never used xcode personally, I just see a lot of people using it.  I'm surprised it would have bad completion though, isn't it clang based like QtCreator?","Same here - Perforce was the first version control I ever used, and I just got used to the way p4diff lays out the versions.",Code Newbie.
"CLion will offer to add #include <vector> at the top of your source file if it's not already there 

QtCreator does this too (but in a more manual way) : if you use a type which isn't included and right-click on the type it will propose to include the file defining this type.

CLion can automatically generate a skeleton implementation for a member function in a cpp file, given a declaration in a header.

QtCreator does this too : write the prototype of the function, right-click on it and it will generate its body in either your header or a matching .cpp. However it won't intelligently add the return nullptr;.
Also you can write your code inline in the header and by right clicking in the class name you can refactor to move all the definitions to the .cpp.

The current beta version has support for going the other way too: if you write a member function definition in a source file, CLion can add the declaration to the header

QtCreator does this too.

CLion is just great at code generation generally. Getters and setters (albeit with unchangeable lowerCamelCase Java-y names) for private member variables for example, or a constructor taking all members. It can do these inline or separate source and header, as you choose.

QtCreator does this too (add a Q_PROPERTY, right-click, ""generate missing member functions"").
The others are indeed concerns :)",Same here. I use git diffwith colors configured for git. I didn't even realize that there were other tools for handling diffs. I'm not opposed to trying something new; I just haven't. I could see something more guided than git's output being useful for files that undergo heavy parallel churn.,[deleted]
"These are indeed some handy features, i might have to give a proper try to CLion in the future.",This. I swear by it and on it's own it has converted many a co-worker to using JetBrains IDEs themselves.,Syntax and Full Stack Radio as others have mentioned are my favorites.
Still not an IDE.,Have you looked at Magit at all?,"I've been listening to Syntax and Javascript Jabber, though I'm also looking for more."
[deleted],"Good ideas, thanks.
To the people unable to think beyond magit, note that magit supports only recent versions of git. My day job is in an organisation which still uses a git version unsupported by magit.
BTW, why don't you think emacsclient when noticing the slow startup problem of your Emacs ? -Q is too much of an overkill. Programming language support is very much required when resolving conflicts in programming language files. How else do you quickly check the usages of functions you just resolved conflicts in ? It also goes against forming habits with your own keybindings, defaults, colours etc. if some of the time you need to use a -Q emacs.","There are none.  Podcasts, blogs, etc. are more about getting a feeling of group belonging, and amusement.  Which is nice and stuff, but is not the path to getting good.  NFL players do not watch ESPN shows to get better at their craft.  They may watch one to kill a half hour, though."
"The reason why I even ask. For Java eclipse is so inconsistent, that it quickly becomes an unusable mess. Take one of the most popular builders - maven. What would you expect from an IDE that claims to support it? I expected two things: That it knew where is the generated code and that IDE tools would integrate it. None of that. Even better: Most people would advise ditching maven integration and building outside of IDE. Why would I use an IDe then?","Thanks, I have to get into using ediff one day, too. Do you know about https://github.com/justbur/emacs-vdiff? I don't use it myself but it looks like you want to achieve something similar with ediff.","I regulary try to listen to Syntax but I just can't , I think it's just their voice (or one of them) that really makes me uncomfortable..."
"/u/sztomi, the announcement that /u/undefinedusername was referring to is here: https://blogs.msdn.microsoft.com/vcblog/2016/01/22/vs-2015-update-2s-stl-is-c17-so-far-feature-complete/
Note that Stephan (/u/STL) was very careful about pointing out that this post refers to the STL being C++17 so-far complete. In fact, the first three questions in the FAQ at the end of the blog post discuss how this is not talking about the compiler. The first question mentions that the compiler isn't yet C++11 feature-complete.
That said, I'm sorry that our message wasn't clear to you. We certainly aren't trying to play a ""little game"" with our developer community. We are committed to making improvements to MSVC standards conformance--I can provide citations if you like. But I don't think we're hiding the fact that we've still got a ways to go.",This should be the only reply,"What episodes do you like? As I mentioned above (or below?), I can’t seem to get into Shop Talk."
Independently verified.,"See https://magit.vc/manual/magit/Resolving-Conflicts.html magit is using ediff. So the second technique to speed up ediff workflow is still useful.
In ediff's default UI, you can only trigger ediff commands from bottom panel, my technique makes it possible to trigger ediff comamnds outside of the panel. And you can use any third package like hydra, generel.el, evil to assign new keybindings to ediff commands.
You could check ediff code by yourself. For example, the first statement of ediff-next-difference is (ediff-barf-if-not-control-buffer).
The first technique I introduced is for cli git mergetool, it's not for magit. I know people who are unfamiliar with CLI might be confused, so I provided screencasts on using git mergetool with vim&emacs in the article.
I'm experienced with all the popular merge tools (vim, emacs, p4merge, intellij, meld ...) but running git mergetool in shell is my favorite because it's fastest.",dev tips sucks now that travis left. mpj is cool but better on his own show and david is a soulless automaton
"Xcode is bafflingly bad at C++. It has to be either still using their pre-clang stuff for IDE functionality or doing something very wrong because autocomplete and jump-to-definition basically just don't work for C++ (the refactoring stuff doesn't even try to work, which is probably a good thing). YouCompleteMe+CTags in vim are dramatically better, and while YCM is pretty good, ctags is a very low standard.
One of the weirder parts of writing obj-c++ in Xcode is that you can be witing c++ and getting utter nonsense out of autocomplete, but then the instant you type something that looks like it could be a message send you suddenly get surprisingly accurate autocomplete with documentation.","I used to work on some embedded hardware . So I feel more comfortable using Emacs and Git in shell.
-Q still loads the programming language's major mode. Just some extra features are disabled. For example, my Debian box always loads some ispell stuff by default which could be disabled by -Q.
My setup is divided into multiple layers. The key binding layer init-evil.el is always enabled. So I don't lose any key binding setup.
The key point is I could control my setup when merging.
I could choose ignore the flag and still enable all the layers.
I can even enable some extra feature instead. For example, I found my favorite color theme dracula is not fit for merging because major mode's syntax highlight and ediff's hunk highlight mess up in this theme. So I enable deeper-blue theme if and only if I'm merging with git mergetool.
My ediff setup, https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-ediff.el","Disagree, ESPN doesn't set out to give advice to athlete's. While it's not the best way to learn compared to doing something hands on, it can definitely be helpful in a theoretical sense. For example, it would be more helpful in giving you a different approach to problem solving, or tips for a more efficient workflow, as compared to teaching you to implement a login system in Node."
"Xcode's main shortcomings compared to other IDEs are the lack of refactoring support and the somewhat limited code formatting options. This is a bit annoying given that Xcode is built on Clang (which gives us clang-format, etc), and the fact that Apple is invested in quite a bit of C++ behind the scenes (LLVM and WebKit, to name a few).",Ediff is fantastic,"It's a good show, but I totally agree with you about Wes."
"You're right, unix is.","One package alone is not enough. This one package could be emacs-vdiff, ediff, or any package.
I just demostrated how to optimize Emacs so it could be powerful and fast.
Peformance is the key point of my article. If it's impossible to resolve conflicts MORE efficiently in Emacs, I will keep using vimdiff.",I love Wes courses and he is awesome but I have an issue with his voice too haha.
"Emacs is an IDE. 

Emacs is an OS.
FTFY.",It's kind of confusing to see something that isn't magit.,"I actually like his voice. Unique and easy to listen to, but I guess I see what you mean 🤷‍♂️"
"Well, CDT is probably worse than JDT, so if you don't like JDT, I don't know if you'll like CDT. The primary value in the IDE for me is not integration with build tools (although it is nice). The primary value is just indexing and code browsing tools. In CDT I can not only go to definition, but find references, look at inheritance hiarachies, include graphs, call graphs, search my entire codebase for any type (macro, function, enum...), etc. Ultra powerful syntax highlighting (CDT makes great distinctions, like function parameters inside function bodies, different colors for const vs non-const accesses of variables) and partial build integration (build and unit test errors jump to the code, and errors are marked directly in the editor) are just substantial gravy.","For the second bullet point you list all one needs to do is to set git's merge conflict style to diff3. I agree with you about ediff being the best merge tool and having poor defaults. I've been using smerge for a couple of years but recently I took the bullet and set up emerge and for messy large conflicts (which are rare) it is way better than smerge, but for the majority of the cases it's the same as smerge but with more pleasant default key bindings.
But going through all the trouble to setup ediff to start from the CLI w/o using emacs client seems an unnecessary complication.","It would depend on your interests, I haven't listened to one in a while actually but I remember there being some interesting talks on CSS and if for example, you are interested in WordPress they have a nice ep on Gutenberg."
"I know, it's always pointed out, yet, the headline is misleading every single time. That is not to say I'm not appreciating the tremendous effort Microsoft has been putting into VS in the last couple of years, I really do.",Okay that's good. I just wanted to mention emacs-vdiff so you could take a look at it if you weren't aware of it yet.,Code Newbie is very good even though not dedicated to web dev. It will give you a good overview about what worked for others. https://pca.st/podcast/b3b59a90-20b7-0132-b457-5f4c86fd3263
"/u/Rseding91 /u/dodheim 
Well it doesn't on VS 2015 update 1 and probably on VS2015 (without updates), so my guess is even in update 2, there are some bugs that makes it not standard compliant.
Guess i should update my VS anyway...",Use magit which works well with ediff or smerge,For more javascript topics I've really enjoyed Syntax from Wes Bose and Scott Talinski. We recently picked up C# and .Net for work so I started following Merge Conflict and I've been enjoying that one as well.
"In my personal experience, xcode's main shortcomings is incredible buggy IDE with c++ projects. Xcode really struggles with syntax highlighting and code completion with c++. Not only that, it also places breakponts on the wrong line, same goes with warning and error highlighting. And this issue existed literally since version 4.","I will have a look at emerge, emerge-files-with-ancestor seems good to integrate into git mergetool. I'm still reading ediff's code, not settled on any specific package yet.
Currently I have good feeling about ediff because it has some dangerous black magic. like ediff-revert-buffers-then-recompute-diffs, the developer of ediff just comment this command, ;; Not bound to any key---to dangerous.  A user can do it if necessary. ;)
Besides, there is no limitation that I can use only one package when resolving conflicts. maybe I can run some emerge or magit api inside merged buffer created by ediff.",The CS50 podcast is nice.
"Yep, we recognized that a lot of developers don't distinguish between the compiler, libraries, and code generator but weren't sure quite how to phrase it. Based on the reaction--here and elsewhere--we'll try to be even more explicit next time.","After reading its code, I'm still not sure how emacs-vdiff can integrate into https://git-scm.com/docs/git-mergetool
I only use cli git mergetool to resolve conflicts because cli is more efficient. I use vimdiff as the default text editor triggered by this cli because I believed vimdiff is lightweight. But now I realize Emacs+ediff could be equally lightweight if set up in the right way.",I'm really into front end happy hour right now. Lots of experienced developers just dishing.
"/u/ripper37, I believe you've just illustrated a case where we fixed a bug to help MSVC become more standards compliant. There are still places where MSVC is not standards compliant--you don't have to guess. But this example you have provided should serve as evidence that Microsoft is working on becoming more standards compliant. 
There's a recent blog post here about other work we're doing to conform to and help create the C++ standard: https://blogs.msdn.microsoft.com/vcblog/2016/02/11/compiler-improvements-in-vs-2015-update-2/",I invented a generic technique to improve ediff/smerge/magit. Please read my article.,Checkout if/else. Not sure it’s specific to web development tho. She also has a YouTube channel named ‘mayuko’.
"I don't deny that and i'm very glad you keep working on it. VC is my favorite IDE. The only problem is portability between compilers when writing code that should work on more platforms/compilers.
I hope you keep up good work and make VC even more standard compliant. Good thing is that you allowed to use clang as compiler too, this way i won't have to maintain couple build systems just to check if my code works on other compilers. :)
Also, i'd love some more refactoring tools if i may propose something. I know there is ReSharper, but some tools should be included in VS itself if you ask me.",I'm not sure either but after skimming your post I thought the UI might be a better option for you.,SyntaxFM is excellent!
"I'm glad you're liking the Clang/C2 functionality. We've been seeing more and more people using it for cross-compiler testing.
As for refactoring tools, we've looked into it but there's nothing I can promise at the moment. For the time being using add-ins is the best option.","Like everything you write, your ""guidance"" tends to be incoherent, boastful,
and wordy.  Nobody wants to read it, but I do because I have very little going on in my
life.
tl;dr your article merely supplies the incantation to invoke ediff when
running git mergetool.  And you provide some convenience macros to
facilitate the ediff, which aren't necessary.  That you require gating on a crufty
flag startup-now in your init.el is a huge non-starter for me, but also
unnecessary because your already use -Q.
Nothing about your setup suggests it would be faster than magit-smerge.  In
particular, you have to run out to the shell.  Stay in magit with all your
project files already loaded.","Developer Tea - https://developertea.simplecast.fm/
This podcast doesn't focus as much on the code, but the mentality and mindset behind it. This would be a great podcast for a beginner imo. 
Full Stack Radio - http://www.fullstackradio.com/
I like this one, but the episodes can be kind of long which make me zone out.
The Change Log - https://changelog.com/
This podcast focuses on open source projects. They speak about different open source project every episode and interview the creator/s of it.
If you like any of these let me know, there are a few more I have saved which I could list as well."
"The worst I’ve ever used is no longer availabile or relevant: the Windows IDE for N64 development.
Instead of a project file, it just parsed the linker file (which you had to write by hand) in order to determine which cpp files were used and where they were located. It would list those paths in a small, fixed-size GUI window. So, if your dev path was too long you couldn’t distinguish between files when you want to open one.
On top of that, it somehow frequently failed to correctly parse these simple strings and some listing would randomly be garbage characters. That meant there were source files you simply could not open. Too bad. If you determined you needed to debug on of those, the work-around was to find some function in a different file that called into the needed file, place a breakpoint in that function then step into the needed file.
For one release it had an off-by-one error in the variable watch window. It would display each variable reinterpret-cast as the type that was declared next after the actual type of the object. The work-around was to locate the type declaration and typecast a pointer to the object as whatever type was defined just before the actual type.
But, hey. We had it better than the PS1 team. The same IDE for them was literally useless for anything besides launching the game on the device.  They had to log-debug exclusively.",At least you're honest.,"https://syntax.fm
One of my favorites! Both hosts Wes and Scott are fantastic developers!"
"The worst I've been forced to use was Dev C++ for a computer science. It's old, unintuitive, doesn't get updates, and is buggy as hell.
For me, the best editor will always be (Neo)Vim + some plugins.","99% of the time I use the integrated one of my Netbeans IDE. It works good: I can select left/right change and live edit the code.
Another tool which I use is Meld","Also, the Shoptalk Show (Chris Coyer and Dave Rupert)."
"QtCreator and VisualStudio, both really high up for me. On the other hand Eclipse and XCode are the worst experiences of my professional life.",Whiskey :),RemindMe!
"Please consider “Unix as an IDE” type setups as well.
A good terminal emulator, tmux, tiling window manager, neovim with plugins, cmake, plus clang tools make for a really powerful IDE like workflow. There’s a greater learning curve and initial effort involved, but it allows infinitely more customization and tweaking.
I have a feeling that this setup is preferred by a large number of developers especially in the linux community. This is what I personally use. After lots of experience with Visual Studio and CLion, all the monolithic IDEs just feel very bloated.
By excluding “Linux as an IDE” type setups from your poll you might skewing your results.",Beyond Compare. You have to pay for 3-way merge though IIRC.,"The web platform podcast 
Coder radio"
"I've got a big problem with this poll.  It seems that the result of the poll would suggest that ""this is the IDE that people like the best"".  But people will check the box of the the best IDE among those that they have actually used.  So even if all IDES were equally liked by their users, the number of checks on the most widely used IDEs would be much larger. This is probably what accounts for the fact that Visual Studio comes out near or at the top of both lists.  
Lesson - beware of benchmarks ... and polls",Visual Studio Code has one build in - its quite good. Single click accept/decline HEAD or ref. I found GitKraken to be quite slow.,Isn’t that by Wes Bos?
[deleted],Kdiff,"Thanks, friend! I’ll give them a try and let you know"
"For me the worst has been eclipse cause I kept having issues with it (i.e. eclipse crashing because the indexer runs out of memory).
I've been using qt Creator quite successfully lately, so I indicated that was my favorite, although I don't have much experience with the others. Only problem I've run into so far is that after I switched to the clang back end, it uses ungodly amounts of ram to function, and code assist is a bit slower now. The quality of the code assist is a lot better though, which is why I put up with it.",IIRC P4Merge is available for free. I always thought that was a pretty good tool.,"Defaulted to one day.
I will be messaging you on 2018-04-14 22:00:13 UTC to remind you of this link.
CLICK THIS LINK to send a PM to also be reminded and to reduce spam.
^(Parent commenter can ) ^(delete this message to hide from others.)

|^(FAQs)|^(Custom)|^(Your Reminders)|^(Feedback)|^(Code)|^(Browser Extensions)
|-|-|-|-|-|-|"
"Visual studio, for me, is by far the best. Make sure you use at least 2015 preferably 2017, these two new version are much better and handle larger projects pretty good (you need to let it build the initial intelisense database and then you're good). I use it everyday at work with a large code base and run only into minor issues.",Yeah. HALF my team has Netbeans Licences. But I can't get them for the other half. (And it works exactly the way I'd want it to work.),"Yes it is🔥🆒💯 (I love Wes, just being a troll)"
I really like IDE features but at the same time I truly hate it when it feels slow and clunky.,Does it come with a nice IDE? ;),"Frontend happy hour
Syntax
JavaScript jabber"
"CLion with IdeaVim plugin!
I have nothing against Visual Studio, and they have done a fantastic job since version 12 (VS2013). They only get better with each future version.
I just like how CLion is configurable and lightweight in comparison to Visual Studio. And I feel the tools are better designed (refactoring, code generation). If you could couple Clang libtools with CLion, you'd have a serious toolkit.","It's actually really good. It's what the merge ""experience"" should be.",http://shoptalkshow.com/
"It's not the worst, but Visual Studio has for me always been a frustrating experience. It keeps freezing up on large projects and IntelliSense breaks randomly. It's not acceptable that you have to keep doing incremental builds to catch compilation errors.
Libclang based IDEs seem far more robust",Is it the same tool as Visual Studio's?,http://www.toolsday.io/
"CLion is by far my favorite. Really nice CMake integration, great customization features and active development. Love it!",Of course!,"JAMStack radio is one of my favourites.
https://www.youtube.com/playlist?list=PLNK9fmQLSJ2Dq0m4pEzp2fh6u0KQ90uEX"
"Where is turbo c++ :D
Should it really be at ""other""?","I said iDe, not iCe. 
hahaha.","In addition to those mentioned. You might want to check out:
Big Web Show
The Web Ahead
The Changelog
JS Party 
Although not specific to front end Programming Throwdown is also very entertaining."
"I haven't used it exentisvely, most certainly not for c++. I just get in touch with it every now and then because I work in app security, but I am certain that Xcode is the single worst IDE known to man.","Disclosure: self post.
I've been using a `sed` shell script to do this for several years and decided to make it into a standalone Vim plugin instead. I find it makes identifying and fixing merge conflicts much, much easier than with other Vim tools that try to use the default three-way diff.","In addition to those already mentioned, a lot of the libraries have specific shows too. The Ember community has Ember Weekend which is great, and EmberMap is a newer show that also has some great info."
"I can't adequately express how disappointing Xcode is. It's halfway there on so many fronts.
With Eclipse, I expect it to be complete garbage, so it actually surpasses expectations.","Looks cool. I never really liked the three-way diff, so I'm gonna try this out. You might want to escape the quotes in the git config --global mergetool.diffconflicts.cmd 'vim -c 'DiffConflicts' $MERGED $BASE $LOCAL $REMOTE' command listed in the installation section though.","Full Stack Radio
North Meets South Web Podcast"
"I have 2 best IDEs for C++: QtCreator for programming, but debugging in it is unusable for larger projects ... so the second one is Visual Studio for debugging, which is unusable for programming (talking about version 2015 as there is no express version of 2017 and I cannot use 2017 community because of its license terms).","I've been using your diffconflicts script for quite some time and I really like it! Thanks for turning it into a plugin, will try it soon.","I want to endorse these more than just an upvote.
I haven't listened to much of Syntax yet but both Wes and Scott put out incredible content and I can only imagine their podcast is up to their standards.
JavaScript Jabber and Frontend Happy Hour have some pretty amazing people on and the information is top notch. Happy Hour is quite fun to listen to aswell, its a very fun setting."
"It looks like on both polls results are similar. Both show which IDE is used more often.
It would be better to make a poll which features people like and which one dislike.","I usually end up using meld for conflicts, this looks handy though, good job",some links would be nice :)
"My favourite is Qt Creator, though my 2nd favourite must be VS(2015+). I really miss it's in-line go-to definition/declaration feature. It helps a lot when you are trying to figure out how some huge project functions and constantly need to look up what certain functions do without switching from the context of the current file.","Is this basically the same as doing the following?

Run git mergetool to open a 3-way vimdiff.
Run :%diffget LO (from the merged copy) to make the merged copy identical to LOCAL.
Close (CTRL-w c) LOCAL and BASE, leaving a 2-way diff between the merged copy (identical to LOCAL) and REMOTE.
Modify the merged copy as necessary, save, and quit.

This is what I often do.","Software Engineering Radio (SER) and Software Eingineering Daily (SED) are my go to podcasts. SER is more academic and more 'computer sciency', and SED is a more general trendy. Both of them are general software podcasts, not tied to any specific technology. 
Thanks to these two I have learned a ton. 
PS: If you have the time, check old episodes of SER. You will find a lot of gems from the top people in software industry."
no sublime text?,"I used to use this for years! Glad to see it standalone! I even added perforce support, I'll see if I can clean it up and open a PR.
However, I don't use it anymore because it doesn't work well under Windows subsystem for linux (running Ubuntu in windows). I think because it's lacking cygpath. (Worked well under cygwin.)","Software Engineer Daily
Software engineering Radio 
Coding blocks 
Engineering Culture by InfoQ
The Infoq Podcast 

AWS, Google, and Microsoft have podcasts for their services as well."
"It's a toss up for me. I, personally, use Qt Creator and it works fine, until you need to see the internals of an object of a class, derived from Qt class: it just freezes up, no amount of waiting was enough.
XCode was meh experience for me, I guess I would need more time with it.
Visual Studio wasn't very usable the last time I used it extensively, unless you used Visual Assist, this might've changed since then.
I've never used CLion, but my friend said that it was a resource hog.
Oddly enough, NetBeans worked relatively well, but doesn't offer much functionality and might work worse on larger projects.
Eclipse I've never managed to get working, easy choice for worst one.","Looks cool, but how if this any easier than three-way diff and diffput/diffget commands? 
I take that your mergetool is mainly manual, so for big conflicts it would be very cumbersome to get through all the differences, right?",https://www.hanselminutes.com is awesome. Scott Hanselman talks usually with one guest about a specific topic. Guests and topics are very diverse
"CodeBlocks works well for console applications, like for school.
I'm sure most prefer Visual Studio for larger projects.","is there a way to bind the keys ""2"" and ""3"" to "":diffget 2<cr>"" and "":diffget 3<cr>"" but only if you are in diff-view?","If you are interested in Front end side of the development then I highly recommend these two:

Syntax - Tasty Web Development Treats
Front End Happy Hour

Also, as a bonus this is a great podcast about tech overall:

Techmeme Ride Home

Hope that helps."
"YouCompleteMe is the only vim autocompletion that works for C++ for me, but it leaves some features to be desired. YouCompleteMe needs to have tabbed insertions like Visual Studio and Xcode.
Clang’s language server tool would be awesome to incorporate.
Any terminal editor like vim is limited by what a terminal can do, but I can’t live without a modal text editor. The vim plugins for Visual Studio really suck. I also hate working in Windows.
If Microsoft released Visual Studio for Linux, I would switch tomorrow. They are moving in the right direction with native support for cmake projects.
What we need is a modern terminal standard. The idea of fusing terminal and editor is a good one. I love the LLVM infrastructure project. And I love the Unix philosophy. Modal text editors are also generally a good idea in my opinion.",does not tell what it does :/,Soft Skills Engineering podcast is great for non-technical issues you'll face as a developer.
I love using VSCode. I have WSL and the integrated console is super convenient.,Good call. Thanks.,Coding blocks is fun
"When I was in university, our ""Introduction to Programming"" was given in Oberon-2. The IDE that came with it was straight out of hell. 
All hotkeys were Mouse button combinations, even the compilation command. The IDE would crash when dragging windows too quickly, and you could get compiler errors such as
""Error, too many errors.""
or
""Not enough registers, please simplify expression.""
If you wanted to compile a file, you had to place a ""marker"" in the file, and then click the build command.
It was straight out of hell. It taught me how to code though.","That's awesome to hear! :-)  The script hasn't seen much change over the years so I don't expect the plugin will either, but hopefully this is at least easier to install.",Soft Skills Engineering!
"I have been fretting over this the past day, as I am currently coming over to c++ from Python.
I have been using code::blocks, and I actually really like it. But it is also the first thing I tried. Is there any reason I should be avoiding it? E.g., will it not scale well with larger projects? Is it bad for refactoring or debugging? Is there something that is clearly just better?
I like it partly because I work on both Windows and Linux, and it runs  nicely on both.  The interface is kind of old-fashioned but whatever I'm focused on code. It is very easy to use, not a ton of stuff going on that is confusing.
I was going to start a thread on this topic, but thought I'd bring it up here.","I've been using that script too, thanks for it.",Dotnet Rocks is great if you wanna stay up to date with anything Microsoft.
What ? Title written in the past tense and no Borland C++? Heresy !,"Very close! LOCAL and REMOTE don't contain the result of anything that Git was automatically able to merge which is why this plugin uses the file with conflict markers instead.
The goal is to get the benefits of a two-way diff of LOCAL & REMOTE plus the benefits of Git's automatic merge. Sometimes both ways will produce an identical diff but not always. My example script doesn't showcase that difference; I'll think of a way to add it.","Coding Blocks
Hanselminutes
Weekly Dev Tips
Edit: mobile formatting is stupid"
"I'm surprised so many people don't like Xcode, I use it pretty exclusively (although I always set up my projects with CMake). Maybe I should give CLion another look.","That would be cool to see if you find some time.
Interesting about WSL. I've been testing those waters recently. It's not quite there but close. I hope they keep pushing it forward.",Healthy software developer
"Would really like to try Visual Studio, but I can't bring myself to work using Windows. With WSL it's somewhat bearable but after a couple days I just can't stand the many terrible systematic design mistakes. It can't work with any filesystem besides NTFS and (ex)FAT, it's stuck with weird character encodings when literally everything else is UTF-8. And then there are the little things, like having absolutely no decent terminal, weird Window placement on multiple monitors, a total mess of new and old system settings and no way to do that on the command line. At least for that you can actually read a description instead of needing screenshots and translating everything to your locale. Also choco really isn't a match for integrated package managers and knowing my Linux works in whatever CPU you have available
That said I'm really happy with Linux, alacritty, tmux, NeoVim and YouCompleteMe. No matter if I'm coding in Python, Go, C++ or writing a letter in LaTeX it all feels the same and does exactly what I want it to do.",This is a mergetool like any other -- no more or less manual than usual. And you use :diffput/:diffget in exactly the usual way. The README directly tries to address your question about why three-way merges are hard to work with.,Developer tea
Pffftt idk about u casuals but notepad is the shit,"I'm not sure if there's a more robust way to detect when Vim is in diff mode but in my vimrc I use this:
if ! &amp;diff
   ...stuff...
endif",Complete Developer Podcast has a good format of an in-depth discussion paired with more topical chat
"Honestly, the very worst is Xcode. Because for certain projects, you're sort-of forced to use Xcode and don't have a sane alternative. Like for an iOS codebase purely written for iOS (so no cross-platform stuff, no CMake etc.), set up as an Xcode project. shudder. Xcode is so bad, and you can't even easily switch to some other IDE easily to build, run and debug.
I really don't get how an IDE of such a big company with huge resources can be so incredibly bad, both from a usability as well as a functional perspective.
At least on any other platform you usually have a choice of using another IDE, for whatever you're doing.","You're right, the README could use a tl;dr. Added, thanks.",There are actually some good ones on YouTube if you search for software development podcast.
"Worst: 
Eclipse CDT",/u/whiteinge,Came here to suggest his podcast. The podcast itself is very polished and the content is very high quality.
"I am sure Visual Studio could be Nice, but I wonder how you guys customize it? Compared to CLion, it is absolutely horrible to customize. I found it non-intuitive how keyboard shortcuts are assigned (I find the simple json file in VScode so well suited, I would love it in VS). How do you add multiple cursor without an extension?
If you guys could share a nice setup of VS, maybe we (other IDE developers) would take a shot at using it.",\o\ |o| /o/,"I second that, CodingBlocks is great!"
I thoroughly enjoyed Visual Studio. We used Netbeans in a college class and it was buggy. I wouldn't reccomend the later.,"|   |   |
/\  /\   /\","I'm here to unofficially shill for Syntax.  Wes Bos and Scott Tolinski are very knowledgeable and entertaining, and most importantly, highly informative.  I listen to them in the car frequently."
"I think, with semantic autocompletion, CTags browsing, and error highlighting, my Vim is basically an IDE at this point. 
Visual studio is the worst due to broken licensing (i.e. the free community version wants me to sign into my microsoft account, and the sign-in feature links me around in a loop and never works), unusably slow auto-completion, and annoying defaults.",The Perforce merge tool (p4merge) is free and pretty solid.  I use gitextensions as my git ui and have no issues using this combo for unity,"this is excellent.. the host is probably the most technical of all the podcasts listed in article.
​
https://softwareengineeringdaily.com/category/podcast/"
Can we get some love for Visual Studio Code? The C/C++ extension from Microsoft does an excellent job!,I use Sourcetree it's free. I'm a total noob though and barely know how to use this stuff. I have however set it up correctly and have had other team member collaborate on the same project with it. Using BitBucket.,"I find myself not really listening to Frontend Happy hour much any more. I feel like they've lost touch with their fan-base over the last year or so, or maybe it's just me. Still jamming ShopTalkShow and Syntax nearly every day, however. Absolutely love those guys!"
"I hate VS when messes up .*proj and .designer.cs files just by changing one little thing... oh, it seems that you clicked on a button in your form... let me flip over all the lines in the designer file so that your commit is messed up... -.-",I personally recommend diff merge. It's a very solid merge tool for windows that you came never go wrong using.,Although not  front end specific I do quite enjoy Programming Throwdown.
"I haven't seen much about C++ builder on here so..
I've been using Embarcadero C++ Builder for about 5 years now. I have a love/hate relationship with it. 
Pros: 

Build Applications easy and fast
easy to use 
has most things you would expect from and IDE plus some
multi platform (I don't use this feature personally)

Cons: 

Linker bugs
Only supports full C++11 with clang based compiler
Really slow compile times with clang compiler.  
lack of third party library support for bcc compiler","kdiff3 is the best merge/compare tool I've ever used. It's free, cross platform, has lots of keyboard shortcuts, and supports command line arguments so you can set other apps like Visual Studio to use it by default for all merges.",I really enjoy listening to ShopTalk with Dave Rupert and Chris Coyier. They have a ton of great content to listen too.
"I use visual studio since in recent years it has become pretty ubiquitous for game development. UE4 and Unity both use it as a default and primary editor.
What takes it from ""okay"" to ""good"" (but not great) for me are the addition of VsVim for general code navigation/editing and Visual Assist X (or VAX for short) which is an improved intellisense replacement.
Lastly at my workplace increadibuild and its visual studio plugin helps to massively speed up build times.
Here's why I say good, not great:
For one example: With a recent task at work I've been discovering that project files and solution files have a bit of an ugly relationship. For example if you open a project in visual studio and build it, it may build differently than if you open the solution and build it because even when building individual projects the solution-wide configurations meddle with the build process.
There's also just a number of annoying UI windows. Visual studio has a heap of them, but some have really annoying rules regarding resizing, always-on-top, or other window settings which get in the way.
All that said, I don't think there's a better dev environment for what I do. So it's not great but it's good and the best available.","Ditto for source tree, merging feels like a magic trick each time we do it!
Three devs, two on Mac and one on PC all using source tree and bit bucket.","Oh my, thank you for this gold mine."
"visual studio should be fine, but with its shitty intellisense makes it the worst.","Beyond Compare.  Best one for OSX: Beyond Compare.  Best one for Linux:  Beyond Compare.
The only downside is it's commercial.  However, for $80 you get a license for all three platforms that you can use on as many machines as you use (per seat license).","Downloaded a couple episodes for my flight this morning, thanks!"
"Best: VS >= 2010
Worst: VS <= 2008",We use Kdiff3 on windows at work. It gets the job done.,"Agreed, have not found much value in Frontend Happy Hour lately."
Eclipse gives me testicle ache,p4Merge,
"QtCreator has been amazing for me. C++ is just a hobby for me, and Qt just feels great to use. The IDE lets you do everything by hand or use the designer tool if you're lazy or just want to have a window done quickly.",Araxis Merge,
"I knew what the result for ""worst IDE"" was going to be, and that it would be the ""winner"" by a long shot, even before I saw the results...",Kdiff3 is the best free 3-way merge tool for windows I've used so far.,
vim/emacs/vscode(meh).. i stopped using real IDE's long time ago,"Of the free options, I find p4Merge the most visually intuitive.",
"I wonder about that ""other""... quite popular. What is it? C++Builder? stuff for embedded? 
Edit: wow, XCode!",Yes,
"I'm sorry but if you use vim/emacs (even nano) you've cucked yourself.  Using your hands to hammer nails doesn't make you talented, it makes you a fool.  Use the right tool for the job ❤️","I’m glad you were able to succinctly explain why every mergetool I’ve used has been a confusing mess. 
I’m sad that there wasn’t even one that did it right.",
"vim and visualstudio express(2015, 2017).
vs express edition doesn't support vim feature(vsvim), so i am implementing my own editor.","Author here with a shameless self-post. I would very much like to see a more broad discussion on how to make mergetools better and more widely used. I have one opinion, detailed in the post, but I'd also love to hear other ideas.
Almost none of my coworkers use a mergetool. I think they're usually intimidating with lots of (unnecessary) colors and buttons and features. Plus not one of them (that I know of) interfaces with Git effectively and displays all the hard work that Git puts into resolving conflicts.
If you agree with my post or not, I hope we can all agree that our common enemy is editing conflict markers manually. ;-)",
What world are you people living in? Xcode is BY FAR the best.,"If I understand your post, you want the image's behavior without the window on the downside? If you are looking for it, Emacs + Magit has been supporting this for a long time image  
Edit added Image",
"What was the N64 IDE called? And are you saying the PS1 used the same IDE? I'm interested in seeing what it looked like.
Did the N64 have an SDK or something? Or did you just write everything you needed yourself?","If you're using Vim's diff just use :diffoff and :diffthis liberally.
I find VimDiff to be one of the best tools because it offers the clean diff that the author wants and I can choose which version I'm diffing against. The author's choice to only perform:diffoff in the merged pane and was a bit odd to me - depending on what you're merging the relevant panes to compare change. Sometimes you do want to look at LOCAL vs REMOTE but other times you might care about REMOTE vs MERGED or BASE vs MERGED.",
"Sounds like the SNSystems debugger. But that wasn’t an IDE, really.
Unless you’re talking about the CodeWarrior IDE, though I’d be surprised if they shipped something with an off-by-one error, at the same time automated software updates weren’t a thing back then either, so I suppose it is possible.
I never did N64 professionally, but the PS2 tools by SNSystems were still fairly Windows 3.1 looking back in 2001.","I don't agree with removing the conflict markers. Personally I resolve conflicts by hand using these markers, all I need from the mergetool is highlighting and folding, which is why I wrote the tool vimdiff3, that you didn't mention.
However, you have a point about mergetools showing hunks that are already resolved.
The right place to fix this is in git mergetool itself, so that all the mergetools benefit from this. I already sent a RFC patch to the mailing list. Let's see what they say.

mergetool: use resolved conflicts in all the views

Thanks for bringing this up.
FWIW this is vimdiff2 with the patch above. I removed the markers to show BASE, but I could have removed the markers to leave LOCAL, which would show basically the same as diffconflicts (plus one pane).",
Which games did you develop?,[deleted],
"I have a friend that's been messing around with the N64 C SDK. The only compiler provided is ancient at this point, and super buggy. In a function, you must declare all of the variables at the beginning, before anything else, or else the compiler will throw an error.","just with fewer awful colors

Don't blame vim for your crappy config.
But yeah, I switched to vimdiff2 early. Three way merge is just way too complicated, and for no reason.",
I learned c++ with DevC++! It's my pick for worst IDE as well,excellent writeup and explanation; thanks,
"I learned C++ with Dev C++, and back then (more than 10 years ago), it wasn't too bad.","Thank you for your work on this, I’ve always felt like I was the idiot for not being able to make sense of the standard mergetools.  
The only one I’ve ever found useful is Tortoise Merge, and would be very interested in seeing your analysis of its strategy.",
"Same here, luckily the professor let us change it as he knew how shitty it ~~was~~ is",3 way merges in merge tools are awful eyesores. I've resorted to just having git dump the >>>>> in a text file and doing it myself. Much easier.,
I also like to use terminator to have multiple displays and I use htop to monitor how the program runs,Great work. I like the trick of merging both ways and using that to find conflicts. I’m looking forward to git GUIs adding their own version of these features. I really like the realtime changes to conflict highlighting.,
"Really? Xcode is rock solid for C, and VS is complete garbage to me, it doesn't even suggest variables as you type...
like it'll show you but it just gets in the way and idk it's VERY irritatng.","I've been resolving conflicts with kdiff3 for years. It's confusing at first, and actually it remains confusing for me, but once i did it a few times, then i could do it without thinking about it.",
"what I dont get with people that use vim or similars is how do you guys refactor your code on large projects. I'm sure multi-cursor edit is simple enough to implement and there's probably plugins for it. But when it comes to renaming an interface in a large project, I would be kind of scared of doing a simple string search/replace without any compiler help or without being able to pick and choose which of my ""hits"" I actually want to replace and which I want to leave out. It's easy enough on Intellij and maybe other more bloated IDEs, but I dont know how vim/emacs guys deal with this. Also, moving something from one package to the other is a piece of cake with Intellij, since it re does your imports for you anywhere you were importing and using your class.","Very interesting read, thanks a million for that great article. I'll need to go into this topic, as I too find the standard tools confusing. Would that even help with rebasing? I sometimes get conflicts during rebasing for my own commits and always find it hard, as I probably think about the end result instead of the commit-by-commit cherry pick when doing rebases.
I'd be interested in your opinion on SmartGit and maybe Fork. They are both available for mac OS. I like SmartGit a lot, their developers are great and could imagine they'd be open to improving their tool.",
"Very true.  I'm a KDE developer so by all rights I should use KDevelop or QtCreator exclusively.  But those weren't available when I started so even now I'm still a ""Linux as the IDE"" developer, with Vim, a Konsole with a gazillion open shells, and a good web browser.","Thank you for this excellent write up!
I believe vim-mergetool is based upon your diffconflicts plugin and offers some nice features.",
"I use Unix as an IDE (mostly) but can't say I love it or anything. I waste so much fucking time playing the why isn't neovim working properly game that it drives me insane. 
Also, I fucking LOVE autocompletion. The better the autocompletion the happier I am. I view it as documentation-while-you-type more than save-you-key-strokes as I frequently work on libraries/languages/projects that I'm not quite familiar with and so those little bubbles of docstrings and extra potential functions/methods I could call are educational while I work.
That being said, YouCompleteMe is probably the worst completion system amongst Xcode/Atom/VSCode/VisualStudio/Clion.",How does IntelliJ's merge compare to the others? It isn't listed.,
"people will check the box of the the best IDE among those that they have actually used.

This problem is unique to software developers. Everyone else will happily vote for something they've never seen.","I have just been using VSCode and delta, but as you say it's close and I still do manual stuff. I life it that way though.",
V C P K G,"I'm sorry but the author is wrong. 3 way merges FTW.
KDiff3 the best.
BTW Merges does not have to be easy because combining code produced by two programmers is a great responsibility so it's nothing special that it's difficult. It needs understanding the root of conflict that is why 3 way merge is superior.",
Eclipse based IDEs get much better if you have lots of RAM and you make an effort to go in and edit the launch files.,"I think IntelliJ has a great three way merge tool. It has that ->All<- button that pulls in the non-conflicting changes from the left and right leaving just the unresolved conflicts. I am not sure why it just doesn’t do it automatically but it isn’t too much of a bother to press the button.

including conflicts that Git was able to automatically resolve

Regarding that statement, if git was able to resolve a “conflict” automatically then by definition that isn’t a conflict right? What kind of “conflict” can git resolve on its own?",
"The OOM issues are solved by editing eclipse.ini and giving a couple GB's of memory. Before switching to visual studio code, I used Eclipse CDT to work on the chromium codebase (several gb's of code) without issues.
If you want to give Eclipse CDT another try you can check this https://chromium.googlesource.com/chromium/src/+/lkcr/docs/linux_eclipse_dev.md#Setup",!remindme 1 day,
Do you use any addons like Visual Assist X or Resharper++? I have always wondered how a big flagship product like Visual Studio can be so bad at code surfing.,"I think the problem is mismatched expectations.
For me mergetools work perfectly fine, but that's because I expect the conflict markers.
OP seems to think that's a bug, and apparently you do too.
It should be possible to introduce a new configuration to git mergetool so markers are automatically removed, which might be useful for beginners, but at least I wouldn't use it.",
"Have you done lot of customization to your key shortcuts? For me they are horribly inefficient, hard to use and unintuitive. I never bother to spend multiple hours just changing shortcuts. And have they finally made mouse back&forward keys working?
I prefer QtCreator",Give your merge way a name lite “2x2 way merge”. Also maybe list and critique p4merge?,
I second your decision but are you not looking over the times when Intellisense just stops working?,"That was going to be my question.  How does emacs+magit stack up. I am a magit addict, and I've used ediff a lot (not with git), but not magit's merge tools",
I'd recommend Visual Studio Code with the C/C++ extension. The extension will reach 1.0 some time in March or April,"Thanks for the image. Are the left and right panes each ""side"" of MERGED? Or are they LOCAL and REMOTE?
I'd love to add Emacs to the post but it's a tad more involved to set up. Would you mind running this script to produce a repo with merge conflicts and screenshot the default Emacs + Magit view of that? Then I'll add it and attribute you for the help.",
CLion lightweight? It feels much slower to me,"I agree vimdiff is the best tool of the bunch, and it's the only one I use regularly. I also agree that it's useful to switch between the different windows to compare them individually -- so useful in fact that it's worth adding mappings to easily move which windows are diffed. :D
But that's only useful to learn the history leading up to the conflict. Because the diff is ultimately between LOCAL and REMOTE it's not helpful when resolving the conflict. The diff includes unnecessary visual noise and forces you to re-resolve conflicts that Git already resolved and placed in MERGED.",
"IntelliSense is just dumb at times. Recently I discovered that in large header files IS would underline every function as ""not implemented in cpp file"". Turns out, if there are any classes/structs/enums defined inside of a class they need to be defined AFTER the constructor and the destructor. Now I do that, and IMO it is terrible, but it is better than IS not working.
To be fair I haven't had the opportunity to try VS2017 yet, this happens in VS2015. Maybe IS is better now.","I'd argue one of two reasons for a mergetool is to avoid having to edit conflict markers by hand. But you're very right that highlighting and folding is the other big reason. Being able to identify subtle differences at a glance makes all the difference.
How do you use vimdiff3? It isn't clear to me from reading the source.
Thanks for starting the thread. I'll keep an eye on it.",
"Yeah, visual studio is by far the best but also the worst at the same time...",vim-mergetools is a solid tool and the author is a nice person to discuss things with. It took inspiration from diffconflicts (there's an acknowledgement in the README).,
"I don't like VS for multiple reasosns

pushing a lot of non-standard features (why the fuck precompiled headers are from #include ""stdafx.h""? Other compilers just use commands) (Warning 4996 - some standard functions are marked as deprecated even though they are not)
bloated, installs and launches long (Eclipse was faster)
no good themes - seriously - I have browsed most of the market and almost all themes still leave 50% of the code white. Eclipse has >30 colors, including setting different colors for overloaded and non-overloaded operators, parameters vs members
gitignore for VS has over 100 lines
Windows only","Don't blame vim for your crappy config.

I used the default colors so readers can recognize it more easily. My config uses much more muted colors. :)
vimdiff2 is better but still has the same problem as all the others. Because it diffs LOCAL against REMOTE you're left re-resolving conflicts that Git has already resolved.",
What do you mean by these incremental builds?,"Thanks for the suggestion. Added Tortoise.
I used defaults from Git-for-Windows and TortoiseGit but I think something may be misconfigured still. (I'd love to correct the entry if so.)",
"Once you break Xcode’s code parsing there’s no coming back. Xcode absolutely grinds to a halt on large codebases on my 2017 MacBook Pro.
Xcode is clearly designed more for iOS app development. Xcode punishes you for wanting to write C++.","Would that even help with rebasing?

Definitely!

SmartGit and maybe Fork

Ooh, I wasn't familiar with either one. Thanks. I added screenshots for both. You're right -- SmartGit is really, really nice. I'm very much a terminal person but graphical mergetools can do such a better job of showing a lot of complex things.",
"Man, I'm glad it's not just me. Took forever to figure out XCode, has to be the most unfriendly user interface I've used.",Thanks. Added.,
"Sublime is awesome, but it's really more of a text editor than an IDE.",kdiff3 is cool. I don't want it to go away. I want kdiff3 (and all the other mergetools too) to be even better by first splitting MERGE into halves instead of showing LOCAL and REMOTE.,
"it just freezes up, no amount of waiting was enough.

Encountered this strange issue as well, though it doesn't freeze up for me, just the debugger inspect view becomes non-interactive until I move to the next instruction.","I will be messaging you in 1 day on 2020-12-17 05:45:04 UTC to remind you of this link
4 OTHERS CLICKED THIS LINK to send a PM to also be reminded and to reduce spam.
^(Parent commenter can ) ^(delete this message to hide from others.)

|^(Info)|^(Custom)|^(Your Reminders)|^(Feedback)|
|-|-|-|-|",
"All hotkeys were Mouse button combinations

oh good lord that sounds horrible.","None of the tools I’ve used show the markers, they just show a confusing 3 way merge where one of them is already half merged, basically exactly what the OP said.",
"Is it bad for refactoring or debugging?

From a good IDE, you should expect the ability to confidently rename variables, and maybe generate getters/setters. Beyond that is up to you, really.

Is there something that is clearly just better?

As far as CodeBlocks alternatives go, I'm hearing good things about CodeLite. Haven't tried either one myself though, I use QtCreator.","Good suggestion! A friendly name would help to get the word out. At the risk of confusion with the Vim plugin of the same name, I think ""diffconflicts"" has a little traction already. I'll try to find a good place to add that to the post.
Added p4merge.",
"I honestly don't know how someone feels this way about JetBrains products. They are by far the best IDEs I have ever used. They are very customizable and literally every action is key-bindable. It's like vim, if you use it once, you get mad because you can't figure out how to quit and you tell everyone it sucks, but if you actually figure out how to use it is light years ahead of the competition.
With that said, CLion is a bit limited because it only supports CMake, at least the last time I tried it, so that may be a deal breaker for some.",I don't know if this is from MERGED LOCAL or REMOTE because I have forgotten about Ediff and that way of merging (Thanks for making me check it). I am going to do a little research and answer in the coming days. I will try running the script until the end of the week and report back my findings.,
"I couldnt disagree more about JetBrains products, they offer a quality that many others only can dream about, it has every i need and more, it is well integrated and if something is lacking you can develop a plugin
It uses more resources than others ide but it is nothing critical, is responsive as any other Ide on the market, so what? I dont really care about the extra ram and if you want to use less CPU you can activate the power save mode
Even Google noticed tha high quality and switched from eclipse to IntelliJ for Android","Ooh, I like those mappings, thanks for suggesting them.
I do find myself mostly looking at LOCAL and MERGED, so a default that turns off REMOTE and BASE might be handy but I find before I'm ready to commit that I always want to see a diff of each one against MERGED which is why I can't think of removing any from consideration.",
"Nice to know someone shares my feelings for JetBrains stuff. And for Java, now VSCode has proper Maven support with the Red Hat plugin ill never have to touch IntelliJ again... I hope...","I'd argue one of two reasons for a mergetool is to avoid having to edit conflict markers by hand.

And I disagree. And apparently all git developers do too, since not a single mergetool removes those markers (at least from the git side).
That's not to say that an option couldn't be introduced to do what you want (if there's enough interest), but I for one wouldn't use it. I want (need?) the markers.

How do you use vimdiff3?

Just like you use vimdiff2: git mergetool -t vimdiff3.
You probably would not like it, since it's basically just MERGED (with conflict markers).",
I like and use CLion on my machine at work on all my projects. It can be slow and needs stout hardware to be useful. For other OS projects I use codeblocks on my slower systems.,"No it doesn't.
vimdiff2 opens LOCAL MERGED REMOTE.",
I think people don’t like Xcode since it’s not a clone of Visual Studio. It just takes some time to get used to.,"One thing to note here, is that intelliJ actually has a button to merge all non-conflicting changes. It is not the same as diffing against MERGED directly, but the option is there to quickly focus on the actual conflicts",
"Pffft, real men pipe shell echoes to source files.","vimdiff* shows the markers and OP didn't like that, in fact he said:

Mergetools exist because nobody wants to edit conflict markers by hand.

Which I don't agree with. If other tools remove the markers, they should at least give the option to show them (exactly as git presents them).
Fortunately the vimdiff* ones do. In fact, I wrote vimdiff3, which is basically the file with the markers plus some hints.",
"Xcode project files can be built from command line. You can use whatever IDE you wish with them, as long as you either import the Xcode project file or make a plugin to expose the file structure of the project to the IDE. In most IDEs, it’s not super hard to do.","I'm not sure diffconflicts is a name that would allow recognition. So, I'm the guy https://trunkbaseddevelopment.com. Say that and there's a good 50:50 chance the average developer with 10 years experience knows what is being referred to. Say GitHub-Flow, and there's a 90% chance the same 10-yr developer knows what is being referred to. Same for Git-Flow.  
How about something working in ""Low"" (adjective) - ""Low Diff Conflict"", ""Low Diff Merging"" ""Low Merging"", ""LoMerge"". Or Minimal/Min instead of Low/Lo.",
"I use visual studio code: it is multiplatform, has a debugger, understands c++ enough to make good predictions, has a pretty decent project manager, there is not much else lacking. Furthermore, I can use the same IDE for typescript or python with best results.","Found time today so I am posting it now. The image with vanilla Emacs + Magit is here. The left is the local Head, and the right is the local branch. I am not 100% sure about the last sentence so I am going to search a little bit more to understand it.",
"u/tjgrant is right. It was SNSystems. Was it an IDE is a semantic argument. I used it to edit and debug code. That’s good enough for me.
The N64 had an SDK. But, it only did the most basic stuff. The most important feature was the RSP (GPU) microcode from Super Mario 64. You were able to write your own custom microcode to customize how graphics were rendered at a very low level.  But, SM64’s was good enough for many games. So, many games shipped with it unchanged.","That sounds like a solid workflow and a great final step to ensure you didn't miss anything from either side.
I think my ideal would be a two-way diff between each half of MERGED with LOCAL and REMOTE on either side of that (so four windows total) but that's a lot to fit in a terminal which is why diffconflicts opted to show the latter three in a separate tab page. I think a GUI tool could handle all that nicely though in a single window.",
"For all intents and purposes, the software no longer exists.  For PS4 development everything is integrated with Visual Studio.  Thank God.","since not a single mergetool removes those markers (at least from the git side).

My guess is that's just inertia from the default since several mergetools do remove or hide them (outside of the git invocation scripts). It'll be interesting to watch the discussion on the mailing list thread you started.

You probably would not like it

Thanks for the explanation. You're right; I don't like it. :)",
SNSystems have got soo much better so then.,Right. There's a screenshot of what you're describing in the comparison section. You're left with either diffing LOCAL against REMOTE and re-resolving conflicts that Git already resolved or editing conflict markers by hand. Both of which this post is aiming to avoid.,
"That was the story of working on Paperboy for the N64.  It was my first game right out of school. After that, I moved to engine/content pipeline work. You can read more stories from that experience here.","Ive never seen the markers in my vimdiff, but then I’ve never made heads or tails of the 4 way merge. Ill take a look at vimdiff3.",
"Yep.  That's classic C.  All C was like that back then.   And, C++ was considered too slow and complicated for gamedev at that point.  Fortunately, the lead engineer where I worked had a compiler background.  So, he got a C++ compiler working for the PS1 even though Sony would not provide one.  I don't recall if Nintendo provided the C++ compiler we used, or if our lead brought up that one too.","Perfect writeup for P4Merge.
How about Express instead Low/Min ?",
"In a function, you must declare all of the variables at the beginning, before anything else, or else the compiler will throw an error.

That's all the language allowed for prior to 1999.","You're very right about Git-Flow.
Thanks for the suggestions. What mental image does ""low"" evoke? I'm not sure I see the association. Low like in ""low level"" or something else?
How about ""split""? Perhaps ""Split Diff Conflict"" or ""Split Conflicts"" or ""Split Merging""?",
"Renaming an interface is indeed a bit messy. There are plugins for that, but I had a better experience with Visual Studios built in rename. On the other hand most of my interfaces are only used in 2-5 files, so even without a plugin renaming is quite fast.
Other refactorings, like changing function arguments, are a lot easier to do for me in vim. Change the function, hit compile and your at the first compilation error, make your changes, jump to next by either recompiling if the change produces a lot of errors (like templates) or by jumping to the next item in the error list. You can navigate the error list in Visual Studio, but it is a lot more work as compiling doesn't automatically jump to the first error. Is there a better way to do that in Visual Studio, where you need manual work for the changed argument?",Awesome! That looks exactly right. Thank you for making that screenshot; I added it to the post. I don't understand that sentence either but now I want to do some code-diving to see how they're setting this up. This is the first tool aside from mine that I've seen do this. Very cool. Thanks again.,
"With proper semantic code search this isn't hard in Vim. I can jump to the definition of whatever's under my cursor with two key presses. I can pull up a list of all references to a symbol similarly. Moving back and forth through the list is a single key press.
With my particular keybindings, to rename an interface, I'd populate a list of references with &lt;space&gt;v, rename the first one with cwNewName&lt;esc&gt;, then F2 to jump to the next reference. If I want to change that one, . will do it. Otherwise F2 again to jump to the next one. Repeat until I've reviewed all the spots.
This all did take a bunch of setup, but I'm pretty sure it's faster and easier than Intellij once set up.","You are not supposed to diff LOCAL against REMOTE; they are there just for reference.
You are supposed to edit MERGED, and resolve the conflicts there. Yes, that requires editing conflict markers by hand.
In all mergetools you are supposed to edit the conflict markers.
In theory you could configure git mergetool to automatically remove the conflict markers, but you would need to choose which code to leave (local, remote, or base), which in my experience vary on every ""merge"".
I prefer to choose chunk by chunk.",
"We use tools like rtags: https://github.com/Andersbakken/rtags
Literally everything you like about your IDE can be done in a good Emacs/vim setup.",Weird. The first image in the post shows vimdiff with the markers (bottom pane).,
"Vim unfortunately doesn’t even come close to leveraging all the functionally made possible by LLVM clang-tools and related programs and libraries.
Because it’s running in terminal with ncurses there are some limitations, but you can still do some really powerful things with clang-tools.
Clang language server has the potential to make the ultimate auto completion engine.
I wrote a small neovim plugin that controls lldb and allows me to set breakpoints in vim directly.
I envision a modern terminal standard that allows more than just grid based text and curses style graphics. Imagine if you build a modal editor that combines that with all the functionally that the llvm libraries expose, but that’s the classic problem of
Better IDE -> better editor -> better terminal emulator","Examples of low that strike a mental image: ""low effort"", ""Low Fi"", ""low profile"". And yes, even ""low level"". There's a connotation of ""good"" or ""efficient"" there. I'm not sure ""split <something>"" is snappy or attractive, or alluding to good or efficient or better or quicker.",
"sed & awk. I can't say I'm in love with the solution, but it works.","You are welcome, If this helps you, you can ask in magit's gitter and ask the guys there. They are always happy to help!",
"There are plugins (such as vim-refactor), but one of the best tools is eclim. It lets you use Eclipse features in Vim. It's not as smooth as using something like Eclipse directly, but it's a small price to pay for the increased efficiency that Vim gives you.","In all mergetools you are supposed to edit the conflict markers.

Nah, several of the graphical tools don't show them at all. Conflict markers are just one way to visualize differences.

In theory you could configure git mergetool to automatically remove the conflict markers

I did! (or as a shell script.)

you would need to choose which code to leave (local, remote, or base)

I leave those exactly intact because they are very useful as a reference. I instead create two new temporary files (left conflict, and right conflict) and, if the merge is successful, eventually overwrite MERGED with the result.

I prefer to choose chunk by chunk.

That's cool. We can still be friends.",
"I like cscope. Vim can read its tags and so you can jump from any variable name to its definition; from types to their class definitions; from function names to their definitions… you can do symbol usage lookups, all kinds of different things. I wouldn't try to refactor a complex C++ codebase without cscope and in fact I usually set up a post-checkout git hook to rebuild my cscope tags in the background. Makes Vim really feel like an IDE to me, more so than pretty much any other plugin. Although a Vim-integrated debugger would blow my mind.","Nah, several of the graphical tools don't show them at all.

I mean the scripts in ""/usr/lib/git-core/mergetools/"". All of them pass unedited MERGED. What each tool decides to do with that afterwards is a different story.

I did! (or as a shell script.)

No, you created a separate tool. I mean modify git mergetool itself.

I leave those exactly intact because they are very useful as a reference.

Not true. I looked at your code. You have two versions of MERGED, both with markers removed.

The left pane is MERGED with all markers removed, except the equivalent of the ""local"" side.
The right pane is MERGED with all markers removed, except the equivalent of the ""remote"" side.


That's cool. We can still be friends.

Friends don't let friends remove conflict markers :p",
"If you're using neovim, you should be using deoplete along with LanguageClient-neovim and clangd. It's significantly easier to set up than YouCompleteMe and works much better in my experience.","No, you created a separate tool. I mean modify git mergetool itself.

I feel like we're splitting hairs here. The shell script changes you submitted to the mailing list are almost identical to the shell script in my original implementation, except I don't overwrite LOCAL or REMOTE. But you are right that it would be useful to do this upstream in order to influence the approach downstream mergetools take.

All of them pass unedited MERGED. What each tool decides to do with that afterwards is a different story.
[...]
You have two versions of MERGED, both with markers removed.

Look again. Neither one of my implementations modify MERGED, LOCAL, REMOTE, or BASE. They both pass all four of those files, unedited, to vimdiff. The plugin then splits MERGED as two unsaved buffers, and the shell script creates two, new temporary files.

The left pane is MERGED with all markers removed, except the equivalent of the ""local"" side.

Not quite. The ""left"" side of MERGED isn't the same thing as LOCAL. They're not equivalent which is the main point. LOCAL is the state of the file before the merge.

Friends don't let friends remove conflict markers :p

In that case think of it not as removing the conflict markers but rather displaying them in a different way. We're still friends.",
"I didn't mean to suggest that was my only problem with it, I just wanted to give an example of some of the problems I had. Sorry if that wasn't clear on my initial post.
Some of the other problems I had: problems with certain c++ language features (c++11,14 features), autocomplete not working on certain types, go to header sometimes going to the wrong file etc. Some of these had fixes, some did not. At some point I had enough and decided to try a new editor (qt Creator) which didn't have most of these issues. 
Note that this was back in the eclipse Luna days. I hope they've fixed some or all of these issues by now.","The shell script changes you submitted to the mailing list are almost identical to the shell script in my original implementation, except I don't overwrite LOCAL or REMOTE.

You don't use LOCAL or REMOTE.

But you are right that it would be useful to do this upstream in order to influence the approach downstream mergetools take.

That's the point. This way all other mergetools would benefit.

They both pass all four of those files, unedited, to vimdiff.

It doesn't matter if you modify the file or not; you modify the buffer, so the user is presented with a modified version of MERGED without the markers.

The ""left"" side of MERGED isn't the same thing as LOCAL.

I know they are not, but with my patch they are.
Do you know how to try my patch?",
"I suspect Microsoft may have some sort of deal with the developers of famous plugins like Visual Assist (Whole Tomato Software) this is why the code refactoring stuff sucks so much with VS compared to other IDEs, so that everyone buys plugins.","You don't use LOCAL or REMOTE.
[...]
Do you know how to try my patch?

Yes I know how. However I do use LOCAL and REMOTE and so your patch is a worse version of what I'm already using and it would be a worse upstream mergetool for everyone.
The blog post mentions why LOCAL and REMOTE are useful in addition to a split MERGED. The diffconflicts plugin accepts LOCAL and REMOTE as arguments in order to display them in a new tabpage on demand.

with my patch [the] ""left"" side of MERGED [is] the same thing as LOCAL.

That makes things worse because we already have LOCAL and we already have the left side of MERGED. We don't need two copies of the same result. It would be nice to have both a copy of the file before the merge and a copy of the file after the conflict resolution. I'm not advocating for replacing LOCAL; I'm advocating for not including it in the default diff or during the manual resolution step.
We may be talking past each other a bit so this is probably a good place to pause. We're friends and I owe you a beer at the next non-pandemic'd Vim conference for a deep conversation and for getting a dialog going upstream.
Cheers.",
"No I don't, a few other colleagues do though along with another plugin called ""FastFind"". Visual Studio 2017 comes with a whole new suite of improved search features, better filtering and more filtering options in intellisense which make it much easier to browse code. 
EDIT: I have tried Visual Assist X but on a large scale project it just eats up loads of memory and boot times are really slow.","However I do use LOCAL and REMOTE

Do you? Your blog post doesn't mention how to view those files.

your patch is a worse version of what I'm already using and it would be a worse upstream mergetool for everyone.

Name one problem.

That makes things worse because we already have LOCAL and we already have the left side of MERGED.

You have the left side of MERGED. The rest of the world doesn't.",
"I haven't found VAX necessary since VS 2015 (and 2017 was even better), before that it was a must-have though.","I could never get the KDE merge tools to work according to my intuition, and instead recommend meld.",
"Not really, it depends on how you like to work. Here's a sum of what I use frequently:
CTRL + F - find in current file
CTRL + SHIFT + F - Find in entire solution/project (can use regex here)
CTRL+TAB/CTRL+SHIFT+TAB - Switch between tabs
CTRL+Shift+V - Cycle paste history
Ctrl+; - Highlights solution file find (very handy)
F12 - Go to definition
Worth noting and something I thought was integrated into Visual Studio but I actually use this plugin: https://marketplace.visualstudio.com/items?itemName=SamHarwell.MouseNavigation
It allows you to go back and forwards from where you were previously editing/searching (it's a different shortcut for ctrl++ ctrl+-)","Do you tried?
git config --global --add merge.tool kdiff3",
Oh god that's my fetish. I religiously sync my dotfiles and maintain custom key bindings for everything. I'm one of those people whose computer is unusable by others because the keys do the opposite of what you expect.,"Meld and P4Merge are my favourites. Meld more so for things like inline editing, would be nice if could use Qt file dialog though.",
"For me it feels like that, because you can comfortably work in CLion with just one window with code and line numbers, while in VS you always distracted by unnecessary functions to the point where even keybindings configuration becomes impossible.","kdiff3 works, I just don't know how to use it. I am used to meld.",
Maybe startup by a few seconds but the actions and manuevering is quicker for large projects,"Cool project (and thanks for the props)!
Question for you (I don't often get to talk to people who think deeply about diffing \^_\^): What is the utility of a three-way diff when resolving conflicts?
I've always been puzzled by the popularity of those tools. I completely appreciate a three-way diff when trying to understand the history that led up to the conflict, of course -- both authors started from BASE, authorA makes changes in LOCAL, authorB makes changes in REMOTE and seeing all three versions helps to understand the individual intents that lead to the conflict. But that's very much a read-only, data collection step for me. (That's why that opt-in three-way tab in diffconflicts is read-only.) Often the resolution is that I want some combination of LOCAL and REMOTE, or occasionally only LOCAL or REMOTE, but I can't think of a time where I've wanted to disregard both and go back to BASE.
Three-way diffing tools are certainly popular though so I often wonder if I'm the crazy one or if it's everyone else. :-D  If you made it this far past my wall o' text, I'd be interested to hear what utility you see/use that I might be missing.",
"Turns out, if there are any classes/structs/enums defined inside of a class they need to be defined AFTER the constructor and the destructor.

This is a great tip, as I've run into this problem as well (I tend to put the enums at the top)! Thanks.",How would this be different from vim-fugitive as a merge-tool?,
Well it's the trade off I guess. Should be fixed nonetheless,"Out of curiosity, how does it compare to splice?",
"bloated, installs and launches long (Eclipse was faster)

Have you tried since they introduced the new install experience? Ever since that first installation and launch have been at least 5x faster for me.

gitignore for VS has over 100 lines

Wouldn't you have all the platform-specific build files such as the solution in a separate directory such as ""build"" anyway?","Definitely a lot of configuration, and now I'm hitting an error that I can't find a resolution to:
""File does not have conflict markers.""
... when I do indeed have conflict markers. Could my markers be misconfigured? Maybe it's a 2-way/3-way compatibility difference?
EDIT: but FYI the readme is well formatted, informative & readable. A lot of configuration is sometimes necessary for things like this, especially when wanting it to work ""seamlessly"" in different contexts, like from git with ""git mergetool"".",
Hitting Build regularly during editing to see if the changes made compiles.,friendly suggestion: use gifs/video to illustrate the features.,
"one could say the same for vim and emacs, but they are in :)
and vim, emacs and sublime all can get quite close to a full blown IDE with the right plugins",[deleted],
"Most likely because the debug symbols for Wt aren’t there, and likely the sources aren’t either.",I'll use it next time I hit a merge conflict and let you know what I think :P,
"Thanks for your thoughts here. I have code::blocks up, and it works, and I think I will just keep using that until I am good enough to appreciate the difference. :)","mark, was just thinking to start using vim as mergetool!",
"I don't have any strong issues with JB IDEs regarding the usability/combustibility, but god they feel painfully slow/laggy! Doesn't matter whether I'm on a mid-range i5 laptop with 6GB of RAM or on 4GHz quad core Haswell Desktop with 16GB of RAM, the delay (in typing, completion, highlighting, etc.) is still noticeable. And they are pretty resource-hungry to boot.",What color scheme are you using in your screenshots?,
JB products are just so damn confusing. I haven't found any feature of a JB app that would make me want to use it over vim.,"Hello, ""whiteinge"". Thank you for your ""diffconflicts"" project, which I've used as an inspiration and a baseline.
​
Actually, your reasoning about value of 2-way vs 3-way diff was something that makes me stop and think about how I deal with a conflicts. Your idea clicks me - most time we're using either ""ours"" or ""theirs"" side, of mix thereof to resolve a conflict, and occasionally I need to review their common base just to get deeper insight on why two versions diverge. That's it.
I've been using conventional 3-way diff merge tools for all my professional career, and there were some inconveniences which I had to accept in absence of alternatives.
- with 3 vertical splits layout, each split becomes too narrow, code piles up, lines get wrapped or horizontal scroll appears.
- conflict markers, I hade editing them manually.
​
My personal preference of GUI tool is - https://sourcegear.com/diffmerge/.
​
It has 3 split layout, with `MERGED` in the middle, `ours` to the left, and `theirs` to the right. `MERGED` file have conflict markers already removed in favour of picking up `base` version.  So its ""ours | base/MERGED | theirs"" layout. Plus, it highlights only merge conflicts, not all diffs. Usually, your active split is the middle one, where you can review base version, and pick either `ours` or `theirs` from the sides. I'm using <Ctrl/Cmd - Up/Down> to jump between conflicts, and <Ctrl/Cmd - Right/Left> to choose resolution side.
Regarding non sufficient split width, in DiffMerge I have my font size = 10pt as a workaround. Surely, in terminal in Vim, I'm not going to toggle between font sizes as I enter and leave merge mode, but for DiffMerge that works.
As you can see, DiffMerge is halfway between your ideas and regular tools, which show HEAD, MERGE_HEAD and MERGED file with raw conflict markers.
These days, I'm in process of switching to Vim from VSCode, so Vim would be my console-based merge tool, whereas DiffMerge would still back me up as a GUI tool.
From \~/.gitconfig:
[merge]
tool = vim_mergetool
guitool = diffmerge
​
Both tools are at hand:
$ git mergetool # launch Vim
$ git mergetool -g # launch DiffMerge",
"Wow really? I love JetBrains, especially CLion, I feel like most C++ IDE's are extremely convoluted and hard to manage/work with;
Setting up toolchains etc. in CLion is just so easy, that's the main thing for me.
I have to admit though, it's slow as fuck and JB should give up on building/using their own parser.","So, what vim-figutive does (and any similar solution):  

It opens 3 vertical splits, with $MERGED file in the middle, and HEAD and MERGE_HEAD revisions to the left and to the right. In Vim, when there're 3 buffers marked with "":diffthis"", it highlights all possible diffs between those files, rather than highlighting only unresolved conflict. Personally, it distracts me, as it shows all diffs between HEAD,MERGE_HEAD and MERGED file, and I want to focus on unresolved conflicts only.
MERGED file has raw conflict markers unprocessed. If you want to see common-base, you need to parse ""||||||| base"" and ""======"" delimiters manually with your eyes. Also, in all but simple merge conflict scenarios, you would have to edit those conflict markers manually  

This plugin takes another approach. Instead of comparing MERGED file simply to HEAD(LOCAL) and MERGE_HEAD(REMOTE) revisions, it parses conflict markers in $MERGED file and extracts base/ours/theirs conflict side. Then it takes ""ours"" and ""theirs"" versions and do 2-way diff comparison.
Pros are:

It optimistically picks up ""ours"" side of conflict. You don't have to deal with and edit conflict markers directly.
Conflict resolution starts where automatic ""git merge-file"" gives up. You have diffs and highlighting present only for merge conflicts, not for any possible diff between HEAD, MERGE_HEAD and MERGED file, as vim-fugitive does.  

So I'd say this approach is similar to what https://github.com/whiteinge/diffconflicts does, rather than what vim-fugitive "":Gdiff"" does. This plugin was inspired by ""whiteinge/diffcoflicts"", but goes farther with extra features (see readme). And indeed, it is flexible enough to replicate either diffconflicts, vim-fugitive, or regular vimdiff, or adapt to your personal habits.",
"I think it must be something like this. IMO Xcode's UI has always been better than VS and some of the most significant improvements in VS for me have been because they introduced features from Xcode, such as single clicking to view files and the ability to usefully break windows out of the main VS window.","Seems that I've missed ""splice"" somehow while exploring existing solutions. Would give it a try, if I had time. Vim takes a lot of free time, BTW. It's the endless configuration loop. :-)  
Quick look at the readme makes me a bit nervous though, since I'm using ""figutive"" a lot.
​

Splice and Fugitive do not play well together. If you try to use Splice as a git mergetool while you have Fugitive installed it may segfault Vim, even if you're not using any Fugitive features.

​",
"That doesn't really help, unless I am misunderstanding. I think what you mean is: I can use whatever text editor to write the code - but I have to build with Xcode on the command-line. If the build errors, the errors will not show up in my editor/IDE. I will have to read the command-line and manually go to the file's location in the IDE. This is cumbersome, idiotic, and unnecessary manual work.
And what about debugging - after I've built the iOS app on the command-line, can I run it on the phone using the debugger in, let's say CLion? And stuff like breakpoints in the IDE and variable watch window will work flawlessly?
And for sure I am not going to write a plugin to make this work. I have to work on my work project's code, not spend time on developing some IDE plugins. This is why there are IDE developers - they are supposed to give me, the user of a IDE, a good IDE that makes me productive in my day job.","Hm, regarding configuration, that's not too many. See minimal example in readme, and maybe some key mappings, if you'd like. Plus "".gitconfig"", if you're going to run as ""git mergetool"", but that's optional.
let g:mergetool_layout = 'mr' 
let g:mergetool_prefer_revision = 'local'  
Yes, there are a lot of info/text in readme, describing different scenarios, but all that's optional, you can start with simple configuration as in the snippet above. And then adjust various options, if you need more power/customization.  
Regarding conflict markers, make sure that they are in the ""diff3"" style, like this. Common base marker ""||||||"" is mandatory.
"" &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
"" ours/local revision
"" ||||||| base
"" common base revision
"" =======
"" theirs/remote revision
"" &gt;&gt;&gt;&gt;&gt;&gt;&gt; feature
​
If you only have two sides of a conflict - `ours` and `theirs`, make configure GIT to use diff3 for conflict style. Please, read ""Assumptions"" section at the bottom of the readme.  
[merge]
conflictStyle = diff3
If that's not the case, and your conflict markers looks right, could you please share a sample file? I would check from my side. Maybe something wrong with my regular expressions.
​",
"you can also do something like so.
vim `grep -iRl ""thing2Change"" ./directory/to/search`

And then in vim itself do the following:
:bufdo %s/thing2change/thing2changeItTo/gci | update","Yeah, thanks, good point. ""Monosnap"" screenshot tool I'm using can record videos/gifs, but I don't like it. Need to find some alternative or maybe use screencast recording app. Will give it a try next time.",
It does sound doable but i still dont think its easier than intellij where you can review all your changes and just click on the ones you want to keep. But maybe i just need to see someone with a workflow like yours in action. Personally i have to pair at work so the company kind of enforces an IDE and its easier to get everyone up to speed with intelliJ than it would be with an advanced vim setup (when the configuration is actually so personal from my experiences so far). Nevertheless its interesting to know how others work and ive definitely attempted to get proficient with vim.,"Seems that you want something like this: http://take.ms/WBIz7  
It's not supported out of the box right now, but it's possible to implement. For now, just navigate to `base` split, and run. Don't use "":diffoff"", so options like ""scrollbind"" and ""cursorbind"" are not reset.  
set nodiff  
If you have syntax highlighting off by default for diffs, you can turn it on:
set syntax=on",
"I’ve never seen someone make this assertion who has actually mastered an IDE. Sure most people have tried them but if you haven’t used one on a massive code base while leveraging advanced approaches like conditional debugging or structural refactoring, you’re just not making a fair comparison. 
Conversely I’ve used vi and vim (yes both) for 25 years and as a test of my own biases refused to allow myself to use IntelliJ to write some Go recently. I easily sunk 30 hours of messing with configs and plugins including  the excellent vim-go and rtags. After weeks in that setup, it wasn’t close to IntelliJ. Not by a country mile. So no, “literally” everything can not be done in a good vim setup and you’re misusing the term “literally”.","https://draculatheme.com/vim/ with some minor adjustments.  
Plus, I have ""set syntax = off"" to disable normal syntax highlighting when window is in diff mode.  
Also, I changed styles for highlight groups for DiffText and DiffChange. 
"" Do not highlight changed line, highlight only changed text within a line
hi! DiffText term=NONE ctermfg=215 ctermbg=233 cterm=NONE guifg=#FFB86C guibg=#14141a gui=NONE
hi! link DiffChange NONE
hi! clear DiffChange
​",
Rtags is great! All the power of IDEs but without the bloat,Thanks for typing up your thoughts. :-),
rtags is so weak compared to what a real IDE provides that it's not even funny,"I'm using following regexps.
let s:markers = { 
\ 'ours': '^&lt;&lt;&lt;&lt;&lt;&lt;&lt; ', 
\ 'theirs': '^&gt;&gt;&gt;&gt;&gt;&gt;&gt; ', 
\ 'base': '^||||||| ', 
\ 'delimiter': '^=======\r\?$' }  
And here's the function performing a check.
https://github.com/samoshkin/vim-mergetool/blob/e5433357577d6292e886b9952cabac91213a07ca/autoload/mergetool.vim#L284-L290",
":h terminal-debug
Pretty new feature. I only played for 5-10 minutes with it. Looks good though.","Ok, yes, I've got a MWE for you:
Here is a very important base.

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.

&lt;&lt;&lt;&lt;&lt;&lt;&lt; ours
variable: XXXXXXXXXXXX
||||||| base
variable: base
=======
variable: YYYYYYYYYYYYYYY
&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.

For this, if I run:
    :MergetoolStart
I still get the error.
Quick suggestion: I tend to be able to navigate these sorts of things quite well -- you've done some great documentation, but its entry-point is very difficult. 
As someone who definitely wants to try out your plugin, I already bring pre-existing knowledge of: diff3-styled markers VS ours/theirs, git to the object db level, vimrc global vars, vim splits, autoload VS plugin dir split, vendor-ing vim plugins, etc. I could just be screwing something simple up, but I think the fact that I go above & beyond to the point where I'm simulating a minimal working example of a git repo w/ a merge-conflict, and still have no idea what the app actually looks like, is indicative of a problem with your README. I think you should have a facepalm-stupid ""Getting Started"" section before you have an Overview breakdown as well-detailed as yours is. I had to go a couple hundred lines down to even get to the point of: Even w/o configuring my git config, how can I just use this in vim on a merge-conflicting file? (i.e. :MergeToolStart) 
I love that you included all that you did, including the key-binding, but the entry-point is just too side-winding if any issue is encountered, as I have. 
The lowest hanging fruit to make better use of all the documentation work you put in, in my humble opinion, would be to put a simpler section with the ""this is how it should work for 99% of the users"" before getting into edge cases & optimizations, and then have an ASCII-CAST of that simple workflow.
I've been interested anyways in better leveraging vim for viewing & resolving merge-conflicts, so I'll eventually figure out the issue, and look forwards to digesting the detailed considerations you've had. But I would imagine most people will give up at first error, even without looking to resolve it, let alone having to dig or talk to the maintainer to resolve it.
Cheers :)",
Last time I checked out the development status of clangd it was still missing some important features. Thanks for the reminder. I’m gonna take a look at it again.,"@tlitd, I've covered your use case, and implemented this feature. Thank for interesting idea, I like it.
See details on how to use https://github.com/samoshkin/vim-mergetool#advanced-layout-customization",
"It has huge problems with file includes over network.

File includes over network? Why would you ever do that? :) 
But on the subject, I think Resharper takes a long time to index your code. It can be pretty tiresome. But once it is done, Resharper is the best choice for me.","Thank for your response. I agree that readme has a lot of info, so I will move some sort of ""minimal working example"" section to the top of the readme.   
Regarding your example, I tried that, and it works fine on my local machine. 
​
I would ask you to create an issue on github, and attach or share a link to file verbatim as is. I think it might be due to line endings, and when I copy-paste the snippet from reddit comment, I lose them. Please also tell what kind of Vim you are using (terminal, GUI vim) and what are your OS?  
Could you also try to run vim with this minimal vimrc, so we cut any other stuff possible interfering.  
set nocompatible
filetype plugin indent on
"" or whatever plugin manager you're using
call plug#begin('~/.vim/plugged')   
Plug 'samoshkin/vim-mergetool' 
call plug#end()  
let g:mergetool_layout = 'mr'
let g:mergetool_prefer_revision = 'local'  
Run vim as:
vim -u &lt;path_to_vimrc&gt; -N  
Let's continue this discussion inside Github issue.",
In 2015 and 2017 they started integrating a lot of the tools offered by these plugins.,"@Redstonefreedom
I've refactored readme. Moved TL;DR section to the top. And introduced separate error message when file includes conflict markers, but not in diff3 style.",
"Wouldn't you have all the platform-specific build files such as the solution in a separate directory such as ""build"" anyway?

Yep, my gitignore for VS is just:
/_build*

Works for UNIX too!",,
"Maybe managers in the team were bad with it. I would say yes, they commited dlls and other binary stuff.",,
"Ah, you mean, VS intellisense is bad compared to some other IDEs? Yes, true.
Don't hit build, hit Compile though :-)",,
"Suppose you're right, didn't think a lot of people actually used sublime as an IDE",,
"Are you on ssd or spinning disk? I've experienced no delays since I mostly use ssd everywhere and I've used jetbrains ide of some sort daily for the last 5 years. But one laptop at work had spinning disk and idea was insanely slow to start, like 20 minutes on that one.
Although I have to say clion is slower than idea/pycharm and was even slower a year ago. Seems to be getting better though",,
"CLion has great design, but it becomes very veeeeery painfully slow with a project with a few hundred thousand LoC.",,
"After trying about a dozen C++ IDEs and having no clue how anyone can stand most of them (especially Eclipse and NetBeans, which, IMO, are terrible), I decided to shell out for CLion, because for me, it's easily the best.",,
"You can build with Xcode on the command line, yes, and the errors from the compiler should be understood by any programmer's editor worth their salt. You basically fire off the build command via the editor's ""command"" facility, the editor then displays the output and links errors to source files and makes them clickable. Nobody expects you to do it manually - that's why good programmer's editors integrate with error message outputs, and this is very much a solved problem.
Xcode is a decent IDE - if you don't like it, you've made a choice to invest in something else...",,
"The question was about c++, not go. I have yet to see a feature in a c++ ide that I can’t do the same for in Emacs. But you’re right, I’m only dealing with 10-100k loc codebases, not millions, so maybe things are different at that scale. I’d love to know what I’m missing though so I can implement it.",,
"No one I've heard make this assertion had actually mastered vim/emacs++ setup.
If you need an IDE to refactor your code without error you should really revaluate your career choices. And visual debuggers are nice, but if that's what's holding your productivity back, your coworkers are reevaluating theirs.
Put another way, you spend the vast majority of your professional time reading and editing code; to optimize productivity your tools should accommodate this. Massive renames are a corner case, and are probably worth going through extra review. If they're not, you're definitely doing your job wrong.",,
"File includes over network? Why would you ever do that? :)

Someone's never used Clearcase Dynamic Views for version control...",,
"File includes over network? Why would you ever do that? :)

IT and Engineering were in different cost centers so cheap NFS servers that add six hours to the build time meant big bonuses for IT!",,
I don't think you should really blame the IDE for incompetent people being unable to follow a simple process. Of course it passing a code review before being committed is even worse.,,
There's so many packages for sublime that you can turn it into an IDE,,
"SSD on desktop, SSHD on a laptop. Helps with start up/indexing, not much with general latency.",,
Wtf are people writing this much code for? I've never had a project larger than like 5000 lines. These are for APIs with 10-20 models and controls with helper functions. Not counting 3rd party dependencies,,
"Ooh okay, yea that's right! That's a good motivation to try a couple of other things on Mac and see whether it works decently, thank you very much! :-)
I am definitely spoiled by Visual Studio (with CMake, not VS build), nothing comes close to it in terms of productivity and debugging tools.",,
"Does vim support a clang-based code model? If not, then it won’t be able to do a lot of things trivial in IDEs with a full C++ parser (e.g. those using clang). C++ parsing is anything but trivial.",,
"Not who you're replying to but, in my experience, it isn't that I need an IDE to refactor my code for me. I just want it to do it for me so I can get back to coding. Same for the visual debugger. I work faster with it than without it.
As with most jobs, you should be using the right tools for the right job. For many, that is an IDE provided by someone else as opposed to a custom environment with vim/emacs/whatever.
You probably shouldn't so quickly dismiss someone's opinion and imply, because they disagree with you, that they're terrible at their job. Maybe they'd be terrible at your job or in your work environment but so what? Their experience is going to be different from yours and that doesn't make it demonstrably right or wrong. Just different.",,
Doesn't sound appealing...,,
"Urgh! Theres an unpleasant flashback. I used CodeWright and Clearcase Dynamic Views at my first place of work. A horrible combination of trouble and problems. Just don't do it, folks",,
There was very abnormal review (people who did it cared much more about indent and whitespace instead of what the code was actually doing). The most sad part was that there were no restrictions when compiling. Several thousand lines of warnings every time you compile.,,
"It may depend how many new C++ features are being used. VS is by far my favorite IDE, but there are generally a few features that I know they haven't yet fully implemented, both in terms of compilation and Intellisense. The development experience goes best if the code evolves along with the ongoing dev/debugging experience, whereas if people aren't exercising IDE features throughout development (e.g. if the code was written in a text editor, or different compiler was used) sometimes certain things just aren't recognized (although I don't know the situation over the past few years - I was last using it heavily around 2014). I've also had to 'correct' a project by reorganizing the include file strategy for a project that did fancy things in its makefile - otherwise, lots of things weren't working. That isn't unexpected, but it can happen.
Edit: I'd rather see more complaints about my post along with the downvotes. I'm surely not the only one who worked on projects that used SFINAE, constexpr, Barbados templates, etc.. which initially only worked with other compilers (it's common to use VS for embedded or game development even when Windows isn't a production target - because it's that good) and then were sometimes supported by the compiler before Intellisense. So certain features were either avoided entirely or used sparingly for a better development experience.",,
My current projects have a third party code base of close to a million LOC. Thanks AUTOSAR.,,
"5000 lines is the size of some functions in some projects, I work with. No, your functions shouldn't be that long, but sometimes code grows organically with age and requirements. 5000 lines is something I would consider a small project (although line count is not the best measurement for complexity).",,
"Writing just 'hello world' with some modern graphics APIs is going to get you over 5000 LoC. Anything where performance is critical tends to have pretty big code bases in my experience. For a game engine honestly 50-100k LoC probably is what you would hit for a small custom made engine, just to have all the necessary features implemented reasonably.",,
There is VS for Mac! I’m not talking about VS Code.,,
Vim and emacs have extremely good clang integration. Which shouldn't be a surprise because all of clangs tools are accessible on the command line.,,
"Yes there are clang-based plugins for both that do completion and/or semantic editing. For example with rtags I can do your standard find definition, find references etc as well as proper semantic refactoring across an entire project. There are also lsp-based plugins so you can use things like cquery.",,
"You missed the point: why do you even need to rename things across a million lines?
a) Failure of Encapsulation: local changes should have local effects; why is one change cascading over millions of lines?
b) Failure of Planning: your global API had the wrong name or signature. This should be an extreme corner case -- how often do you fail to account for something used a million times?
c) Failure to show Restraint: a global change for cosmetic reasons; maybe your time is better spent not changing ""Init"" to ""Initialize"" or vice versa.
Every time I've needed to do a large refactor it was:
d) Language or Library change: IDEs don't necessarily do this for you, and if they do there's probably a clang tool you can use from the command line.
I can write a sed or other script to rename global API, or change NULL to nullptr, and admittedly that probably takes a couple minutes more some menu item, but the entire point is that such an exceptional case it adds up to maybe a couple hours of work per year? You're optimizing the wrong path. I spend almost all my time finding and making small changes, and an light, scriptable editor optimizes that case very well.
You may not like the implied condescension in what I said, but notice the first sentence of my post was the same as the parents. I didn't come here to tell people IDEs are bad, but I replied to someone who came to tell people unix editor++ was (because he spent 30 hours trying, as if you could ""master"" an IDE in 30 hours). If you want to put other people's tools down, be prepared for a defense.
If you want to talk about visual debuggers, or how IDEs hide things from you that you should probably know, I'm game for that discussion too.
Edit: we can also discuss how people who use vim report higher wages than other IDEs empirically, or anecdotally the most talented developers prefer custom low level tools to IDEs.",,
"Those are some really sucky APIs then. It takes well under 5k lines to implement a hello world running on top of raw OpenGL ES, with state-of-the-art shader-based font rendering, where shader draws splines and fills them. With a toolkit, similar functionality may fit in a couple of lines. Literally.",,
"Unless I missed something, ""VS for Mac"" doesn't even have C++ support. It's a very, very light edition, completely different from Windows VS.
Or did I miss something in the last half year?",,
"My intent was not to put down someone else's tools. If that was the message that came across, forgive me. My intent was to suggest that experiences vary across the industry. In my experience, I need these tools because of legacy code.
I've spent my entire development career working on software which was developed by physicists. I've also spent my entire career working to bring ""best practices"" to those code bases and in some cases that requires large refactors which benefit from the tools made available in the IDE.
I agree that in the ideal world, you shouldn't need to modify code across the entirety of a million LoC project. I don't work in the ideal world. 
The current project I'm working on was first released in 1990. I don't know if there are parts that still exist from then but I do know that for the majority of this projects life, it was maintained by one person. They created a very good product in terms of its usefulness for users, but the coding practices used were informed by their times and, as such, need some major work to bring forward.
With that being my experience, it makes sense for me to want an IDE which provides whole project refactoring tools. If I had been working on different projects, I'd certainly use the tools appropriate. I am, in no way, implying that everyone everywhere should be using an IDE. 
The entire point of my post was, in fact, to suggest that instead of returning someone's dismissive/insulting attitude, you should strive to rise above and not fall into fighting at their level. But I could also just be bored at work and browsing reddit when I should be doing something more productive and decided to pick a fight.
I had not heard that about the wages with regards to editor preference. I couldn't find anything after a few quick google searches but I feel that there are probably some interesting correlations to investigate.",,
"A few random thoughts:
Don't confuse correlation with causation. I'm not surprised that people who use vim earn more money, it's not easy to learn and master it, these are the kind of people who seek challenges, want to learn, coding is their passion... they probably would earn higher wages even if they didn't use vim. It's probably more their mentality that makes them more efficient than their editor of choice (from which they will squeeze every bit of productivity). A good IDE has easier learning cure so more people will choose it (it's the path of least resistance). Some people might be just as productive or even more than the ones using vim, but the mass of less experienced people will bring down the average. (Without knowing more about the statistics you are citing I cannot say more.) Using vim  might not make you a better coder, but probably being a good developer is a prerequisite to using vim.
I don't use vim, it's not just that I'd rather not spend the time learning it instead of doing/making stuff, but I cannot afford the time to train new employees to use it. (If someone can, they are free to do so.)
So you might be a genius who is working on radically new stuff, or someone could make an argument that if you spending most of the time writing code, then you are doing it wrong. Instead of reinventing the wheel you should research and use already written libraries... ;)",,
"Not sucky APIs, just ones that give you way more control if you need it. I'm taking specifically about Vulkan and DX12.",,
"Yes, unfortunately it's for .Net development only and doesn't support C++. And yes, it is a different thing than the flagship VS. For .Net development, VS for Mac is quite nice though.",,
"My comments were to the parent's reply alone -- how vim with plugins can do everything an IDE can, although with different tradeoffs. My clang or sed based script takes longer to write, but it also serves as repeatable documentation of the transformation set used. The transformation itself can be code reviewed, and repeated again in the future.
By all means use whatever tool is right for you at the time, but let's not pretend IDEs represent a missing master weapon elite developers somehow volunteer to forgo. The parent talked about million line code bases, but I guarantee you Google doesn't use a developer in an IDE to make sweeping company wide changes.",,
"Lol.
I've never been confused by correlation or causality.
People who are good at their job use vim because it allows them to code at the speed of thought. It's about ergonomics.
Good tools doesn't make the artist, and good artists aren't held back by bad tools, but good artists seek the tools that don't get in the way or slow them down. This had absolutely no relation to using libraries.",,
"Those are not that different from WebGL or OpenGL ES... Perhaps the hello world you have in mind is not the literal ""display Hello World text"" but, say, displaying a scene of some sort. That gets complicated real quick, you're correct.",,
"It takes you a few hundred lines of code just to set up GPU device state that would be the equivalent of glBegin and maybe 3 lines of code. Displaying a triangle with no vertex buffers takes around a thousand lines of code. There is no driver state machine, you have to specify all GPU state yourself. I'd say it's pretty different.",,
"Hmm, you’re right. I forgot the time I wrote this code and then just reuse it from the library. Yep, it’s on the long side.",,
"QtCreator has everything I need: autocompletion, column edition, refactoring to rename vars but also implement virtual functions, move stuff from header to C, create properties. Powerful search using ctrl+k, switch between h and cpp.
I mean what else do you need that is not in QtCreator?",,
Visual Studio.  There are dozens of us!  Dozens!,,
"Spacemacs with ycmd for auto completion and error checking, with rtags (or perhaps, soon, cquery) for indexing. All libclang based, all highly performant and responsive. Outside of C++ specific stuff, it has the best vim emulation, the best buffer/window/workspace management, the best git extension, and the best textual search/manipulation (powered by things like helm and helm-ag) of any editor I've used.",,
[deleted],,
"I use Sublime for all typing, though not really an IDE",,
Emacs.,,
"Code:blocks is still my goto IDE. Auto completes, decent debugging interface, themes, etc. Not the most fully featured or sleek, but still competent for what it does imo.",,
QtCreator > other C++ IDEs. Clang-based online fixits are a godsend and the locator takes 1/100th of the time CLion's locator takes to populate its index.,,
"WTF.  vi gets its own option but not emacs?
Lame-ass anchoring.",,
"Clion, it worths every cent",,
QtCreator. It's the only FOSS one that's good in my opinion.,,
"Visual Studio, because it is an amazing tool for writing software. From within that one tool you can edit, do version control, change your build settings, build, run, and debug - it's an easily installed one-stop shop for all things programming.
And once the code is running nicely on Windows I then check it out on a Linux machine, and do any necessary local editing using 'ed'. Because I'm not one of those sissies that need an ""improved"", ""visual"" editor... ;-)",,
"For small test projects, I tend to use vim or even gedit. For bigger ones, I used to use Eclipse, but I've recently moved to KDevelop. It keeps getting better and better.
By the way, if you're willing to try it, get the ~150MB AppImage from the official site. That's what I use because I'm too lazy to compile it and the OS repos constantly lag behind :D",,
"Qt Creator, for both C and C++ (even when not using Qt at all, actually.)
This allows me to use it on all platforms I need/want to support. Just copy the project over and I can build and debug right away, in the same IDE. No need to maintain separate VS, XCode, and Android Studio project files anymore.
Not everything is rosy though. If you have Java code in your Android parts of your app, it's a bit of a hassle. But for Windows/macOS/Linux/Unix-likes, it's a huge time saver.
I've heard somewhere that apparently there's even Linux kernel developers out there who have switched to Qt Creator for kernel code development. I hope it's not an urban myth.",,
"Visual Studio. Just about perfect for me coverall, but my favorite feature is IntelliSense. I've seen a bunch of other IntelliSense-like features in other editors (including VS Code) but they all seem to be extremely context unaware and rarely seem to do more than just suggest recently typed words. 
No idea why people complain about VS being slow. Even on a solution with >200 projects, it's still fully usable.",,
Visual Studio in Windows. Kdevelop at home.,,
"Visual studio. I learnt to use C++ in an IDE and have stuck with it. Over the years I've looked at the text editors that some people are always raving about (vi, emacs etc.) but I have never been able to convince myself that it's worth devoting a significant amount of time to learning how to use something that has fewer features. And at the same time losing truckloads of convenience like good debugging, disassembly, intellisense, version control integration etc.",,
I use emacs.,,
"QtCreator is fast and reliable.
It does the job pretty well.",,
"One of by biggest pet peeves is people waxing eloquent about how they only use a text editor and IDEs are a waste of time and resources, and then complain that they don't like auto because it makes it hard to figure out the type of the variable. A good IDE (for example Visual Studio) has no trouble showing you the exact type of the variable when you hover over it.
Please feel free to use your text editor. But do not try to cripple C++ to conform it to what your tool can handle.",,
"I use NeoVim with YouCompleteMe under Arch Linux with i3 tiling WM.
I also use a lot of the LLVM tools directly from terminal. 
Interface responsiveness is very important to me. Check out alacritty https://github.com/jwilm/alacritty
It’s a GPU accelerated minimalistic terminal emulator.
I haven’t found anything that beats this combination performance-wise.",,
"For most projects, kdevelop. For QT protects, QT Creator. For Windows versions of my kdevelop'ed projects, Visual Studio 2017. For macOS anything, QT Creator.",,
Visual Studio is the least clunky C++ development experience that I've used.,,
"QtCreator has everything I need: autocompletion, column edition, refactoring to rename vars but also implement virtual functions, move stuff from header to C, create properties. Powerful search using ctrl+k, switch between h and cpp.
I mean what else do you need that is not in QtCreator? Just curious.",,
"Surprised that Atom isn't on the list, it seems to be pretty popular with developers - I use it for PHP and C/C++ (with plugins to make it closer to an IDE).",,
"Visual Studio. The debugger is just unmatched.
I always feel sorry when I see colleagues using qtcreator for debugging.",,
"I just only tried this briefly, but it seems very promising
https://github.com/cppit/jucipp",,
"Visual Studio for Windows, Qt Creator for everything else",,
"Xcode is a good choice, it comes up with clang as default compiler.",,
"CLion!!!
If not CLion, then CMake/gVim.",,
"Visual studio + visual assist on windows.
Visual studio code + a number of plugins and scripts for mac",,
I will get ranted and down voted but I use Geany mainly for all my programming. Including C++.,,
"After 24 hours the poll collected almost 1,300 responses.
Thanks everyone for voting and commenting.
As promised I will post the results soon.",,
"I use Visual Studio 2017 (exclusively with the new CMake facility) in Windows + Resharper for C++, and Clion in Linux.
I wish though that Visual Studio just used Visual Studio Code as the editor. It is so sad that they still do not support natively multiple cursors, select next occurrence etc.",,
"Although it is listed (vim), I use a text editor, not an ide.
Do one thing, and do it well.",,
Spacevim,,
"I use VS Code for editing and VS for running and debugging, because VS is atrociously slow. Opening a file with the quick-open thing takes seconds.
Also VS code has some really nice plugins that I would seriously miss.",,
Eclipse but might switch to KDE or Qt. Never VS.,,
"I don't use an IDE. I use text editors, mainly Sublime, VS Code, vim, and Geany.
I see no point in using an IDE over a text editor.",,
"I am a noob programmer still learning the language and I am pretty much forced to use visual studio since almost all of the tutorials are for that. If I knew how I would use code::blocks. I just find it easier to focus and more visually appealing, I don't know why",,
"Is the poll about preference or about about what your current professional environment ""forces"" you to use?",,
"Atom for big projects, Vim for small stuff",,
"Emacs when I can, visual studio when I must",,
"Vi, and three other terminal tabs.",,
Can we see the results?  They're typically revealed to participants once they submit their selection...,,
Learned my C++ in Bloodshed's Dev-C++,,
Default IDE for platform,,
"For writing code I use vim with the following plugins:

YouCompleteMe
NERDTree for viewing the file system in a tree view
Tagbar for viewing the functions and classes in a tree view for the curent file.
ctrlp.vim for fuzzy file search
vim-cpp-enhanced-highlight highlights things commonly found in C++ programs such as STL functions and classes
ag.vim for fuzzy content search, I usually still prefer using ag from the commandline though
vim-fugutive for common git operations such as blaming and logging
ultisnips for commonly used boilerplate

For debugging code it depends on what platform I'm on and what compiler is used.
When using GCC/clang I use Qt Creator as a visual debugger.
With clang-cl/MSVC I tend to use the Visual Studio debugger for live debugging, and WinDBG for post mortem debugging.
I'm not hardcore enough for commandline debugging, my colleagues are though.",,
"Not an answer but a question:
I'm currently using CLion and i want to try QtCreator but i'm to fond of my keybinds, does anyone knows a way to export the keybinds from CLion to QtCreator?",,
"KDevelop, hands down.",,
Xcode on macOS and Visual Studio on Windows,,
Emacs,,
poll results?,,
"Visual Studio + Visual Assist and disabled IntelliSense on my desktop, becuase it does everything I need really well and it's just so insanely fast to work with (lot's of credits due to Visual Assist for that) and QtCreator on my Laptop since it runs Linux.",,
"https://www.sourceinsight.com. Loads in seconds, works with hundred of thousands files.",,
cquery + VSCode/Emacs/Atom/Vim ...,,
vs2017 express (free for commercial application): http://aka.ms/vs/15/release/vs_WDExpress.exe,,
"I use a mixture of the following, depending on what projects I'm working on:

Vim + YouCompleteMe: Most of my personal projects.
CLion: Larger C/C++ projects I end up working on, especially CMake based ones.
Visual Studio: For projects that are already setup to build in VS.
QtCreator: I will occasionally use this for quick and dirty GUI projects.

All of these options offer direct support or a plugin that provides support for Vim-style editor modes.",,
Why is nobody talking about Jetbrains Clion ? Buy it crack it download it for free if you're a student whatever but Jetbrains tools are close to perfection,,
Can you still use QtCreator if you're not developing a GUI?,,
Also supports vim mode out of the box which is great. Definitely my favorite IDE.,,
Every job in the games industry I've worked has used Visual Studio as the primary (only?) IDE,,
Pairing it with vsvim makes for a comfy environment.,,
"Yeah as a non professional ive been using it for a while and it has a lot of great debugging tools.
Its just that sometimes, maybe like 1/30 times i startup VS I get this fucking bullshit LNK error on compile (I think LNK2005) that GOES AWAY WHEN I RESTART VS SO THERES NOTHING WRONG WITH MY SOURCE CODE/LINKING AND I JUST SPEND HALF AN HOUR DEBUGGING FOR NOTHING. but other than that its good.",,
I like how it randomly freezes and then carries on as if nothing weird happened.  It's a bit like Homer Simpson having an internal monologue/dream without realising the real world is waiting for a response.,,
"It's also my IDE of choice. Intellisense usually works pretty well (though it's useless in templated C++ code), and the debugging experience is excellent.",,
and with Resharper C++ it's simply marvelous,,
I'm using it to and from my experience it does not require a lot of resources. C++ extension does. It's not an electron issue.,,
"I don't like the ""phone home' by default settings in VS Code and many of it's extensions. It means that I will never use it outside a virtual machine dedicated to a specific project.",,
Sublime + CMake.  And a Python script for build configurations.,,
"Emacs

As I, I also use rtags plus cedet packages to get autocompletetion, jump to symbol plus compilation to work as expected from IDE.",,
"Emacs

I also use Emacs, because it allows me to use 1 editor for everything from VHDL to assembly to Matlab and everything in between.
However, I've never found a guide to getting good C++ completion and code navigation on top of base Emacs (i.e. without ""install 83 helm packages and then add 4 Kb of content to .emacs"" as the first two steps).  Can you help?",,
"I used code::blocks for about a year until I discovered CodeLite. Better IDE, IMO.",,
Came here to say QtCreator. I don't even use Qt and it is great.,,
"I use it almost every day.
It's just a shame they have hidden the download area so well on their website. It can honestly take me 5 freaking minutes to find the correct place if I don't have my bookmarks.",,
Someone finally mentioning IDE with good autocomplete,,
"I'm wanting to give QtCreator a try to see if I switch over from VS, but I'm having a difficult time making it work properly. Apparently after creating a plain C++ project it can't initialize the vcvarsall.bat file. I've googled it and every post I've read says to check the Tools -> Options -> Build & Run -> Compilers and make sure that the compiler is there and it's definitely there. If I copy and paste the path into file explorer, the path and file exist. Has anyone else had this issue with QtCreator? I'm on 4.5 which I believe is the latest open source version.",,
I tried Qt once. Took me about 30 minutes to figure out how to download and run the IDE. Never figured out after that how to create a project and start writing code. What a catastrophically bad UX.,,
"I'd like to like QtCreator (I use it half the time at work), but I have to say it's still not 2018-ready. No relaxed line spacing in what is primarily a text editor? And the FakeVim support is very lacking to the point of being annoying (try Cmd+S...). Also, the built-in help (F1) while editing QML files is nearly useless. So is code completion, though for C++ it does work well.
The best code completion I've seen so far is Xcode. (barring MSVS).
VScode on the other hand is rapidly becoming my ""IDE"" of choice. The C++ plugin is improving at breakneck speed and the whole editor is screaming fast, built for productivity.",,
"I have never used Qt. I have heard it did not handle modern C++ (C++11,14,17) well.",,
"I created this poll after having a similar running for few days last week and emacs got a much lower number of votes.
Anyway, I added it now as I don't want to create any vim vs emacs flame war.",,
"As long as you don't need to include boost...
If you do, the only way CLion remains functional is by disabling all of the autocomplete features. Otherwise, if i type var. it starts searching the entire boost library for a possible completion, even if var is a string or even int. It takes 10 seconds to continue typing. This is on a 12 Core Xeon with 128 GB RAM, and 10 GB devoted to CLion.",,
"Do you really find it so well? I've seen it being criticized a lot for its home-grown parser but on the other hand I've seen a lot of people at the same time being happy with it. Even though I haven't tried using it, I can't resist the feeling that it can't be that good due to its parser.",,
I second that.,,
"Visual Studio, because it is an amazing tool for writing software. From within that one tool you can edit, do version control, change your build settings, build, run, and debug - it's an easily installed one-stop shop for all things programming.

This. The debugger is really great. Also, I can do a diff / merge from the IDE and get a window with full syntax coloring and intellisense and I can edit the code in the diff / merge window itself. 
The documentation for IDE features is a bit poor though. I had to experiment a lot to get semantic coloring working right.",,
"I find all the integrated stuff that worst aspect of VS. It's an ok environment with a pretty good debugger. But all the other stuff is mediocre and makes it bloated and slow. I chose the best tool for the job, not a single tool to do everything half arsed.",,
Pretty slow with Unreal Engine. But everything is :D,,
All IDEs and editors these days have at least a libclang backend for proper compiler supported code completion. This is hardly unique to VS and not really a selling point of Visual Studio.,,
"And at the same time losing truckloads of convenience

But do we really? Vim has half of the features you mention via plugins.

good debugging

You're absolutely correct in saying vim lacks this, there was a cool project for neovim that transformed vim into a visual debugger, but it's sadly abandoned. It's called lldb.nvim

disassembly

I think you're right on this one too, but I haven't had the need for this, so I never looked for a plugin.

intellisense

You're right, nothing but Visual Studio has intellisense, since it's just MS's branded word for code completion. VS's code completion is pretty bad when you get used to clang based code completion, so you should definitely give something without ""intellisense"" a try.
Pet peeves aside, vim has a great code completion plugin called YouCompleteMe, do note that it is a pain to setup on Windows if you do it for the first time, but following the guide to the letter should get you through most of it without too many problems.

version control integration

The vim fugitive plugin is very good.
What works really well for me is both using an IDE for features that vim lacks, such as a visual debugger, and use vim for writing code.
If you're up to it, give it another try with the plugins I mentioned (in my other post), you might be pleasantly surprised.",,
Even why using an IDE I find it immensely frustrating reading code when I have to repeatedly inspect the types of variables. Code that you cannot understand if it was e.g. printed in a book or on a website is horrible.,,
"I hear you. But in all fairness: Intellisense has a lot of trouble inside templates / generic code, which is one of the big use cases of auto.",,
"Atom (and Sublime Text) are popular for web development, but for C++ it's not much more than a colored text editor.",,
This piques my curiosity. What makes visual studio better for debugging than other IDEs?,,
"Personally I use it only for quick tests, but  many use and consider Vim + plugins a proper IDE.",,
UNIX as an IDE FTW.,,
"You know it's funny. I have co-workers who develop like you do, and watching them navigate code is an intensely painful experience. Trying to look for references, find declarations, review call chains, peek the docs for a method, etc takes them forever to do. Meanwhile I do the same tasks for them and can find answers in seconds because I use a proper IDE.
I'll never understand why people like you intentionally choose to kneecap your development experience. I understand why in some environments you have to (I can't imaging editing the Linux kernel in any IDE would go well, but maybe someone will prove me wrong), but why force yourself when you don't have to? Tooling has evolved, why not evolve with it?
And if you tell me you're using Vim with CTags or anything else, I'm going to call you a hypocrite/liar, because you're no longer using 'just a text editor', you're just saying you use an IDE using more words.
I hate calling people gatekeepers, but man, you've managed to make a good argument for it in a record two sentences.",,
How do you do source control? Debugging? Crash dump analysis? ALM interaction?,,
So vim can do text insert and text deletion. Aren't those two things...?,,
VSCode has the same C/C++ debugger as Visual Studio afaik. Why would you switch to the IDE when you can just install an extension,,
Why never VS?,,
"compiler-assisted auto-complete and inline warnings/compile errors?
integrated debugging?",,
"I see no point in using an IDE over a text editor.

autocomplete that works? Advanced IDEs check grammar and have sort of static analysis, I rarely encounter compile errors",,
"I think, recently, boundary between the editor and the IDE is becoming increasingly obscure. Editor with rich plugins(extensions) can simulate almost anything that IDE does, such as autocompletion, on-the-fly linting, etc.",,
"It's about what you use.
Multiple choices are allowed, so you can select what you use at work and what you use on your own.",,
"As I said in my post I will publish them soon, probably next Monday.
I am just waiting to collect more data before aggregating and processing it.",,
"Qt Creator can import kms files.
No idea what CLion uses, but you can check in the default locations for user-defined keymaps (see end of the page).",,
"I will publish them soon, probably next Monday.
I am just waiting to collect more data before aggregating and processing it.",,
You absolutely can,,
you can use QtCreator for developing and deploying to microcontrollers like the STM32,,
"Since I first discovered QtCreator many people asked me the same question, over and over, and I think this IDE is really underrated, the amount of functionallities (even vim-mode? COME ON!) is really impressive, and yet people still associate it with just graphical interfaces, perhaps a change on the name could be nice...because it confuses people quite often.",,
"It is quite good as ""just redactor"" as well.",,
Doesn't Nintendo still use CodeWarrior?,,
"I'm not in the gaming Industry but back in college when I along with 2 others built a video game (we won best game of the semester and apparently still haven't been out done) and we did it all in C++ with VS. No game engine though, just C++ code.",,
I sometimes get linking errors that can only be solved by a full restart. So frustrating. Not even deleting the library it claims can't be linked and re-downloading it fixes the issue.,,
Most of the time it's intellisense working hard.,,
I honestly thought it was just me.,,
Notepad++ and commandline gcc here. And a bash script.,,
"As long as you're using CMake, I wrote a package for that.",,
"The biggest feature is Ctrl-K, the locator: 
http://doc.qt.io/qtcreator/creator-editor-locator.html
in a few keystrokes you can go to any class (c MyClass or just c MC, fuzzy searching is supported), any method, do git commits, git diffs, show the online help of a class (? QLineEdit, or if you install the cppreference doc any standard C++ type... or even CMake documentation ! 
Most doxygen docs can be integrated since doxygen supports the QtCreator help format ; likewise for sphynx.
Then, there are a lot of niceties: integrated profiling and memory error detection with valgrind (http://doc.qt.io/qtcreator/creator-cache-profiler.html), static analysis with clang's analyzer, cppcheck (and clazy in the upcoming version).
The debugger has some useful features: for instance it is scriptable with python which allows to display images, etc... 
Finally, there are a lot of refactors available: http://doc.qt.io/qtcreator/creator-editor-refactoring.html",,
"I was using vs since 6.0 but at work a project required qt on linux environment so I had a chance to try QtCreator and after 3 years it’s hard to go back (still love vs, just a little less now).",,
"Ya, my tip for you is...
Don't waste your time.
Every release i try (every once in a while) to setup qtcreator+cmake+msvc(compiler) is just 2-4 hour fighting with the piece of crap that qtcreator is on windows (with cmake+msvc)
After all that shit, i just uninstall it (again, as always)
You better off with notepad+cmake+msvc (or VS) than qtcreator",,
And in case anyone else is wondering which bookmark that is: https://download.qt.io/official_releases/qtcreator/,,
"Are you/it using cmake? cmake does that in Visual Studio as well with their filters. 
If you are, you can fix it by running source_group, preferably with the TREE option. Although I've found even that to be kinda buggy with VS at least and ended up writing a wrapper for it: https://gist.github.com/playmer/5259fad6a28742638ae1508892a78b73
If you were running VS with cmake you might find that files added via the TREE might have issues depending on the prefix passed, and on if the files are pathed inside of a folder, or simply given as they are. Hence this wrapper which delineates them and chooses the correct prefix to pass.
This might require some minor modification depending on where you run it. The folder detection is based on where you run the function. I have a (very) slightly more robust version I fixed up for a friend, but he's currently on vacation. So if anyone actually sees this an is interested I can update it in a couple days.",,
"If you use CMake and add your headers to add_executable / add_library they will be shown next to the cpp files, and there's also a hierarchical filesystem view nowadays: https://imgur.com/a/07HZt",,
"I've seen the same issue. Qt Creator is abysmally bad at working out of the box.
I've found that that going into ""Options -> Build and Run -> Compilers"" and making a custom configuration that is identical to the default version often works. If that alone doesn't help, I do the same for ""Kits"" and ""Qt versions"" until Qt Creator decides to cooperate or I return to Visual Studio out of frustration.",,
"really ? creating a project is, like, the first option in the ""Files"" menu: https://my.mixtape.moe/mwumoy.webm",,
Qt Creator is completely independent from the Qt framework/libraries. You can use it for plain C++ projects with Cmake.,,
"I don't doubt your experiences at all, but I use CLion with several boost libraries and don't have those issues. I do have some IDE freezes and indexing can be slow at times, but I don't think using boost necessarily cripples CLion in general.",,
CLion is awful.  It's also better than anything else I've found.,,
"It's pretty good functionally, but I've never found the right combination of options to make it fast... or maybe it's just that our CMakeLists are a mess :(",,
"right now it feels more like a half-assed plugin bolted onto IntelliJ. IntelliJ itself is far superior to all other IDEs in functionality, but it's also slow as hell. CLion especially seems to be very slow and doesn't work as well as IntelliJ with Java, so you might as well use visual studio.",,
"Give it a try. 
May want to bump the memory you allocate for the IDE - but I do that for all of jetbrains' IDE:s. 
Per default, at least in the previous version, it defaults to only using 4 threads for compiling - but it's configurable.",,
"I like it, but for my desktop not my laptop.  It heats my laptop up too much.  C++ IDEs are like that though.",,
"CLion does it's own thing due to it's lineage, but I've never found it to be awful.
That said, I personally find vim more productive.  If CLion found a way to completely abstract the CMake file away from me I might consider moving back to it, but I figure if I'm going to be maintaining the CMake file manually then there's really not a lot that clion offers that I can't get in vim, and plenty that vim offers that I can't get in CLion.
But CLion itself is a fine IDE.",,
"The debugger is really great

Really?  I've found it extremely limited compared to gdb, dbx, etc.  Perhaps I'm not using it correctly.  What's so great about it?",,
"Don't know why you were downvoted. I fire up msvc every couple of years and it is full of new things, but slower than last time. The compiler is also slower to get up to date, but I here you can use a real compiler now, but I don't really know how good clang integration is in the current version. It is also the only tool commonly mentioned in threads like these that costs real money.
Edit - how about telling me why I'm wrong. Downvotes aren't very convincing.",,
Pretty fast with Visual Assist actually,,
"Not sure what to tell you, the end result is extremely different between VS and other editors. For example, VS Code uses clang for a fact, but the only ""real"" autocompletion is on member variables of a class/struct.",,
Alright so I should learn VIM and then learn to use a whole bunch of other tools. You are doing the opposite of selling me.,,
"Oh I was wondering how far I had to go down. I basically use VSCode on my Arch laptop for most code editing (c/c++, python, c#, haskell). It basically replaced emacs.",,
Just tried it and it doesn't seem to re-open anything other than the first window if I close and restart. Is that a configurable option? Without it VSC is basically unusable for me.,,
Do you use in Linux out Windows? Atom for Windows is terrible. Nuclide for atom makes it an almost complete ide.,,
"Out of the box, sure. There are plugins to make Atom more like an IDE though.",,
"Things that I like:


comfortable and fast inspection of every variable


thread display (what does each thread do right now)


parallel stacks view


ability to work with large, complex applications",,
"Indeed. YouCompleteMe alone gives tab complete, jump to symbol, show variable type. Only thing I'm missing is find usages. But rtags can handle that if necessary. Together with vim-fzf for all sorts of fuzzy search I'm much happier in vim than in Visual Studio. Even in reasonably large code bases (+500k lines)",,
"git.  
gdb/lldb.
Depends on the platform, no IDE could accomplish this for each platform I ship on.
What the fuck is ALM interaction?",,
"Same debugger, but not the same UI :) More features in Visual studio.
Edit: Actually, there's a big reason. There's a super annoying bug, I don't think it's been fixed yet, where files are matched on a case-sensitive basis (I think), and it's different for C:\ and c:\ or something like that, causing you to get more than one tab with the same file.",,
"When VS Code supports opening CMake projects, I will jump ships immediately.
But I guess this is where it will eventually go. VS Code seems a more flexible platform compared to the VS dinosaur, and it seems to gain popularity and features surprisingly fast. I would not be surprised if in the future Microsoft discontinued VS in favor of a feature rich VS code",,
"too software bloated, installs soooo long
strongly tends to add non-standard features in code
precompiled headers - not as a compiler command but #include ""stdafx.h"" in source
_tmain, WinMain
pragmas for libraries instead of project settings


warnings on valid code - they warn about using standard low-level functions ""just because they are unsafe"" (too much C# point of view?), C4996 (unsafe) is one of them, other warnings mark actually legiit standard algorithms as deprecated
some functionalities offered by (paid) Resharper are free in Eclipse and Qt
default .gitignore for VS has tens of patterns, for other IDEs it's just few or a specific directory
no ABI compability (check all different Visual Redistributables)
GCC can link against VS libs, but not vice versa
spam during complication (GCC and Clang output only warnings/errors)
may compile code with mistyped file names - although it's a problem from NTFS case ignorance, not VS but it feels bad in a case-sensitive programming language
no good themes, searched multiple sites and plugins, max 10-15 different colors, Eclipse offers 30+, including 4 different colors for 1line/multiline/Doxygen comments and different color for overloaded operators (compared to non-overloaded ones)
works only on Windows, not very portable (might change due to VSC)",,
"YouCompleteMe uses clang-completer. Clang also performs static analysis. It’s also easy to integrate clang-format and clang based syntax highlighting.
It comes very close to IntelliSense.",,
"Fair enough. I'm willing to have my view changed. However, last time I checked (~5 years ago, admittedly), autocomplete was completely unusable in heavily templatized code (that uses expression templates, CRTP, ...) and was therefore just pointlessly draining my battery lifetime. Has that changed? Which FOSS IDE would you recommend?",,
"text editors have autocomplete. not as advanced as an IDE but it's decent depending on what you are doing. Static analysis and such are standalone tools that simply can be run via command line, and those editors he mentioned support assigning to a button to trigger static analysis, then have clickable errors via GUI to jump around between issues.",,
It boggles my mind that people think auto complete is a desirable feature. The only thing worse is an editor automatically putting in closing parens and braces.,,
The SDK for Switch comes with VisualStudio integration now.,,
Not sure. I've personally not worked on any thing Nintendo related.,,
Or it's the peek def window failing to load some COM shit.,,
I would've thought intellisense would be running on a background thread.  Although maybe sync'ing with the GUI thread takes a long time?,,
"Swap it out for Visual Assist and the freezing goes away.  (that is, turn OFF intellisense and its database)",,
"That's very strange because I've experienced it only using around 30MB for the 32 bit version and 60MB for the 64 bit version after a fresh install.
I don't have access to my computer right now or else I would upload a screenshot as proof.",,
"Thank you for sharing!
Alas, we are using bespoke 25-year old make-based build infrastructure. It's nicely organised and carefully maintained, but not at all modern.",,
You can use Ctrl+Comma on Visual Studio for the same effect. Although it depends on the goodwill of Intellisense but it works a lot better in the recent 2017 versions.,,
"I don't use CMake but while I predominantly develop in Windows and with MSVC I do still have to swap to Linux and gcc fairly frequently. In Linux I tend to use Codeblocks out of long habit, and of course maintaining two solutions is a pain in the arse and ultimately pretty much non-maintainable. Do you have any good resources for picking up CMake on Windows and Linux?",,
"Sorry, I was on mobile, so I didn't have access to my bookmarks. 
Your link seems even better than mine, here's the one I've been using lately: https://www1.qt.io/offline-installers/#section-11
They seem to be changing it constantly though, so yours is probably better!",,
"Whatever a kit is, there's no default installed kit on macOS.

No valid kits found. Please add a kit in the options or via the maintenance tool of the SDK.

You click ""options"" and it leads you to a page with 20 pages with 10 tabs each and each tab has about 15 drop down listings. You click add on what looks like the ""Kit"" page and are presented another 20 drop down menus. It all looks reasonable so you click ""okay"" and nothing happens. Still no kit. So you try again and play with some settings and modify a few things. Nope. Adding a kit clearly does not add a kit.",,
I don’t think it's your CMakeLists. It's way slow for me even with the simple projects my students are doing. I still like it better than anything else.,,
"What vim plugins do you use to make it more productive than CLion? 
I use the vim plugin for CLion and find that it's autocomplete and suggestions are far and away better than any other IDE. Clang-tidy integration is a complete game changer for me. I'll use vim for small projects but as soon as it's anything complicated I move to CLion.",,
"You can only use CLion if you have an SSD, because with an HDD it's so sloooow",,
"Very userfriendly and polished interface. Watches, STL visualizers, register view, everything works at a click of a button.
One thing I use regularly, I can step through my code step by step, and then switch to the disassembly window, and the same step through key steps through instruction by instruction.
Oh, and edit and continue.
What have you tried with GDB what you cannot do with VS debugger? I find GDB and VS debugger equally capable, however VS has a far superior UI which actually makes debugging easy.",,
"Clang/c2 Integration was more or less abandoned (you can still use the full blown clang/llvm for windows of course)
But the msvc compiler became pretty good (although it still doesn't implement two phase lookup and sfinae completely correct)",,
True story! I haven't found any other faster tool for VS. really an amazing piece of software.,,
"Yes I'm puzzled. Even on vim with YouCompleteMe, which is pretty barebone compared to VS, I got mostly the same autocomplete as Visual Studio.",,
"You're going off the assumption that these plugins require learning, with the exception of setting up YouCompleteMe, simply because it's big, it's all very straightforward.",,
That's the difference between an experienced big-company product and 'brogrammer' startup product.,,
It reopens everything for me. Maybe a bug?,,
"I use go to definition and go to declaration probably the most, next to intellisense (or whatever the autofill is called).  I tried installing rtypes (I think that's what it is called?) but the backend server kept crashing and I just gave up.
How do you set it up?",,
"So... the question was ""what do you use for development"", and you said ""an editor"".  
So I asked how.
So now you're saying something else.
Because one can hardly reduce development to an editor.",,
"Application Lifecycle Management - features of an IDE meant to integrate with the rest of your software development process, such as pushing builds, unit test coverage / continuous testing feedback, integration with code review tools, so on.",,
"Your primary complaint about VS is that it's bloated, but you use eclipse?
It's been a while since I've used it, but it felt like the epitome of bloatware last time I tried (probably 3 years ago or so).",,
"What I find ridiculous are people who claim not to use an IDE, but add tons of plugins to their Texteditor to give it all the nice IDE features.
Not saying that vim+ plugins can't be superior to a ""normal"" IDE - I haven't tried. But at that point, you are effectively using an IDE.",,
I have seen this gif before! But could never found what a thing it is ... until know. Thanks.,,
IDEs that use libclang to parse your code do not have this problem,,
"Not very useful for templates as you can't really give a good autocomplete for dependent names. On the other hand, IDEs like Qt, Eclipse and KDE have great syntax-aware features (generate getters/seters, implement virtual functions, rename variable) + very deep coloring (Eclipse offers over 30 colors, including different colors for overloaded and non-overloaded operators). Makes writing easy and avoids common errors like unknown variable or missing semicolon.",,
"FOSS

Did you actually mean free or Free?
*Not rhetorical. I'm seriously asking. You can have free without being open-source...",,
"have autocomplete. not as advanced as an IDE

This is a big difference. For example Eclipse uses different colors for oveloaded operators (than normal operators), different colors for static/function local/class member variables.
Autocomplete in text editors simply searches for commonly used names (and may have a hardcoded list) but these in IDEs analyze your classes/functions and propose only things that make sesnse",,
"I, too, hate efficiency",,
sarcasm or not?,,
"You can typically configure the editor to do it only when you press a specific shortcut key. That's what I do. Works very well, or I think so at any rate.
I never got on with the sort of auto complete prompt that pops up when you're typing, hides something else you're looking at, and then accepts the first suggestion when you keep typing.",,
"Is it possible to get Visual Assist to open things in a peek pane thing?
That's the only reason I leave intellisense on.",,
But that's the whole point of using Visual Studio.,,
"The main packages to give completion, error checking and navigation are ycmd, and rtags. They only require a compile_commands.json file, not necessarily CMake. You can probably generate that file with BEAR, or even write a python script to try to generate it ad hoc; it's just a json file with the flags for every file. Really, as long as you have the right language version and the include paths, it will work well enough, most likely.",,
Can that feature be used to lookup C++ and CMake reference docs?,,
"CGold: The Hitchhiker’s Guide to the CMake is work-in-progress but well worth the read. It's written by the guy behind Hunter - a package/dependency manager for CMake, somewhat reminiscent of conan and others.",,
Yeah it's a real pain. The one I found hasn't changed in at least a couple years thankfully!,,
"Sorry, I brought it up because to my knowledge source_group does it's thing for ""IDE project generation"", cmake by default in VS separates the h/hpp and c/cpp. So if cmake is the one doing that bit to you in Qt Creator, source_group might be the thing that fixes it.",,
"Seriously! I faced this issue just today, and I've used QtCreator for a few years now. Had the iOS + Android builds available but could not for the life of me figure out how to add macOS. Had to look it up in the user manual, which for once had the info I needed. otherwise I usually have a google tab open.",,
"interesting, if you install Qt a default kit is generally added automatically so it must have fucked up somewhere during the install process. You have xcode installed right ?",,
"YCM has a clang based engine and I use the 'vim-cpp-enhanced-highlight' plugin for a bit of extra oomph.
On top of that I use ctrl-p for quickly opening/finding files and then ctags.
I don't like integrated VCS plugins in IDE's, ever, so I don't use them.
What I found with the CLion vim plugin is that it didn't really play all that well with the rest of CLion.  Things like renaming can cause issues, so when using CLion I just turned it off.
It's by no means a perfect experience, but between these plugins and using external tools such as grep, I don't ever really find myself missing IDE's.
I've often thought about writing a 'vim IDE' that integrated the vim ethos into every bit of the IDE itself, including the GUI aspects of it, i'd call it 'vIDE'.
The problem I've found with most plugins is that there's a clear delineation between the vim keybindings and the rest of the IDE.
And before it gets said, I've been using Visual Studio since before it was Visual Studio, I'm quite familiar with IDE's and their use cases.  There are things that IDE's do better than vim, and vice versa, I've just found that the only thing IDE's have that I really miss in vim is an integrated debugging experience.
Everything else is just a matter of pros and cons.  People often bring up renaming, for example, but I've never found that be a significant productivity problem outside of an IDE.  It's a convenience yes, but I don't do it often enough across a large enough spectrum of files for it it matter for me.",,
"I think something that's also great is you can get extensions for visualizers for other stuff, including for example images. You can also customize the view of your classes but it's a bit tricky to get it right.",,
"Watches

Don't all debuggers have that?

STL visualizers

GDB is capable of printing the contents of STL containers and such.  Is this feature something more?

What have you tried with GDB what you cannot do with VS debugger?

The first things that comes to mind are conditional breakpoints and ignoring breakpoints for the first N times that they are hit.
Most other stuff is more of a nuissance than a real limitation.  For example, in GDB one can evaluate complex expressions like this: print some-&gt;expression( someFunction(5) )
Or do something like this to insert a print statement in the code:
break foo.cpp:44
command 1
  print someExpression()
  continue
end

Both of those can be achieved with VS using ""edit and continue"", but then I have to remember to clean all the debugging crap out of my code later.",,
"Can Visual Studio set a breakpoint at library functions today? Last time I looked, I could only set breakpoints on things I have source code for (in my project) because I have to see it to set a breakpoint.
Easy in anything that has a command language: ""b printf"".
The best debugger I used so far was the one from Green Hills, closely followed by Lauterbach. Both combine a command language and a GUI, and a steep price. GDB falls back by not having a (default) GUI, Visual Studio by not having a command language. But then, if your programs are native Windows programs, VS' integration probably is unmatched.",,
"I didn't downvote you. 
If I didn't have errors in CI, literally, yesterday I might believe you. It is warning for garbage reasons and the documented ways to suppress didn't work. We build with a huge amount of warnings enabled and try to suppress as few project wide as possible. But our list in msvc is growing, it gives us crazy warnings for code in the std headers that is beyond my control no other compiler does this, why!??!
The compiler takes 3 times longer than mingw and produces slower binaries with comparable optimizationson.
If I needed coroutines I would agree with you, but that is about it from C++17  I have no need or interest in. It took them longer to get real variadic template support, so I spent real time writing more code with another compiler that had sane errors and then moving known good code over to their interesting implementation before msvc 17 fixed it.
I am trying not to be a fanboy or just deragatory, but msvc is a huge source of pain for me and doesn't ever make things easier for me or live up to any hype.",,
"Turns out that the default is to remember one window. If anyone else comes across the same problem you can force all windows with the following configuration:
""window.restoreWindows"": ""all""",,
"Yeah, i use vscode in Windows too but not for cpp. Atom/nuclide integration with clang is great.",,
"I use atom-ide-ui and ide-cpp, though the latter only works properly on Linux (on Windows it tries to find /usr/bin/clangd, which unsurprisingly doesn't exist). I still run commands like make from a terminal though.
I have started using VS Code recently and been impressed at how slick it is. It's better than Atom for C/C++ and probably equivalent for things like PHP and Markdown (not sure if it has a Markdown preview which is a feature of Atom that I find really useful when working on documentation).",,
"Wrong, the question said what IDE do you use.  Note that none of the tools that I mentioned are integrated in the sense that an IDE is integrated.",,
"I have used Visual Studio extensively. The integrated debugger is an extremely well developed feature, and I have yet to find something that comes close. 
Every IDE leaves something to be desired. When you have one large monolithic program acting as your development environment, customizing and extending your environment can become hard and obtuse. IDEs consist of a bunch of components which act like black boxes, and hinder customization. 
For example, changing code syntax highlighting colour schemes in Visual Studio is unnecessarily complex. I find customizing options via a GUI to be slower and harder than changing config files. Using CMake to setup up your build toolchain is vastly superior to clicking through a bunch of menus.
A good Visual Studio setup for C++ requires some plugins to improve things like static analysis and refactoring (i.e. Visual Assist). 
For me, the Unix philosophy is the saner option. The typical linux development environment consists of a bunch of smaller programs, where each one does one thing well. It allows you to customize your toolset to your hearts content.
It can be frustrating at first. I have caught myself reinventing the wheel several times, but the end result is that you become extremely familiar with every component of a development environment. The learning curve is much steeper than using an IDE, but I think there is a point where your finely-tuned dev environment surpasses the features, responsiveness, and productivity of any IDE.
Naturally, this becomes a consideration of whether the returns in increased productivity justify the enormous upfront investment in time.
In the end, the most important thing is to be a productive developer, so master one development environment.
Sorry for the long winded reply.",,
"Horrible quality video, but this is what I always think of when people talk about their ""text editors"" with a billion plugins: https://www.youtube.com/watch?v=1BjahCczkFM",,
What gif?,,
"Free as in freedom, which necessarily implies open-source.",,
"It isn't that necessary in practice. The commonly used names still save you some typing.
Also once you have a large enough project + complicated package/build system to manage it all (e.g. 200mb of code) then IDEs die trying to figure things out. If you require intellisense to code then you're going to be in trouble.",,
"Not quite, the debugger and the IDE as a whole are also great.  Intellisense is flaky and doesn't seem to scale well to large projects.",,
Thanks very much - I'll have a read through,,
"If you have to work on both platforms, cmake will make your life so much better.

I'm already sold on this part, believe me. CMake could be almost unusable and it would still make my life much better than manually maintaining dual VS and CodeBlocks solutions... If CMake is even dimly usable otherwise that's a bonus.",,
brew cask install qt-creator,,
"All of that is possible in the VS debugger without using edit and continue, and has been possible since at least VS 2008 (which is the earliest documentation version available on MSDN).
Right click the breakpoint.  Click ""Conditions..."" to make it a conditional breakpoint.  Set your conditions, which can be based on an expression, hit count, or filter (which means a process/thread/machine ID).  Click ""Actions..."" to run a piece of code, such as a print statement, when the breakpoint is hit, or to log something to the output window.",,
"As far as I know, conditional breakpoints and a ""hit counter"" work just fine in Visual Studio.
You can also evaluate expressions during debugging (though admittedly, the expression parser seems to have a few problems with operators).",,
"'Debug->New Breakpoint->Function Breakpoint', type function name.",,
Green Hills was the best? ಠ_ಠ,,
"Which Version are you using and what warning did you encounter? I hope you are not one of those people that activate /Wall and then complain about the warnings. I find all /W4 (rough equivalent to -Wall -Wextra on gcc/clang) pretty reasonable and the standard library headers should compile warning free. Only thing that can get annoying are the conversion warnings in codebases that where not developed with that in mind.
Also, while I said that msvc became pretty good in recent times, I never claimed they reached parity with gcc or clang (I even pointed out the current main deficites).",,
"Thanks for finding this. Bizarrely, it was set to “one” in my settings (I hadn’t overwritten it), and yet it restored all windows. So there is a bug, but it’s on my system.",,
"Haha, we're both wrong, because it's ""what IDE for development"". 
You're more wrong though.",,
"but I think there is a point where your finely-tuned dev environment surpasses the features, responsiveness, and productivity of any IDE.

My point was that at that point you are effectively using an IDE. It might be manually assembled, but in the end, all the components are integrated. So saying I don't use an IDE, just because I don't use a single Program (whatever the definition for that is - vs probably consists of a dozen or more different programs) is a bit strange.
Edit: Neither Qt, nor Eclipse (which are commonly considered IDEs) come with their own compiler or debugger. So where do you draw the line?",,
YouCompleteMe main page,,
"The difference is that IDEs know about the project with paths, compile options, etc. This can make parsing more reliable, and allow jumping to things you don't have open.",,
The next question then is why do you need your text editor or IDE to be open-source?,,
I have an Eclipse at work and it still parses well (entire Boost + ~50 other libraries),,
"It crapped out on me a few times, but it got much better with newer versions of VS and lately it has been working well for me.",,
"Yeah, that was definitely not my experience. WiiU anyone?",,
"Well, what's better, and by what criteria?
Probably not everyone has the same criteria as an ""embedded"" guy, and I found its command language, scriptability and easy configurability quite enjoyable.",,
"Today, it is complaining about a variable that is ""unused"" in two line comparison function, where it is clearly used. It is doing this on some version of 17. It is in a static string class that checks the length and receives that as a template parameter and then checks the contents of the other string if those are the same and non-zero. It does this as a single expression connected with && and ||. Clang and gcc with -wall and -weverything (or something similar have warning flags enabled) has no warnings on Linux or OS X, and mingw has no warnings on windows.
But literally today msvc had a warning.
As for warnings in the std headers, yes that was with /w4. But the std headers aren't my code I shouldn't ever get warnings for them when using them correctly. I know I am using them correctly because my unit testsvall run in CI against 3 or 4 other compilers on like a dozen platforms with -wall a pile of other -w flags and -werror and have been that way for years on this project because we want to know our code is clean.
We have 1 or 2 warning flags suppressed project wide for most compilers, but like 20 on msvc.",,
"I was paraphrasing and focusing on the more important part, idiot.",,
"In that case I agree with you. You could call my environment an IDE.
It reminds me of a professor back in university in a CS course telling us to use nano and GCC.
I think some people who come from the side of big monolithic IDEs have that sort of thing in mind when I tell them that I basically use vim.",,
"If you get warnings from the headers on W4 you can submit a bug (helped for me in the past). It's just /Wall where you can't reasonably expect warning free compilation (although I think they guard against Wall locally most of the time). I think the vs team is also working on an equivalent of -i&lt;external_library_header&gt;, but I'm not sure what the state is there.
Regarding the unused warning: It's of course hard to say without the code, but that sounds like a bug to me too. If you feel like it, you can submit a Bug report to the msvc team. There is a very slight chance that due to short circuit behavior of(&&,||) the compiler determines that the expression is never actually evaluated, but I think this should produce a different warning.
Sorry to hear your experience with recent msvc has been less than stellar. I'm only using it for small scale projects, so maybe that's the reason I didn't got any major problems/annoyances.",,
"If typing text was more important, then we'd be called typists not developers. It isn't more important, we are not and you're wrong.",,
"This wouldn't be the first time I have stepped into bug in in the compiler territory, and generally whatever I have found is already found (but rarely fixed). I have to work around it anyway because I ship source and I cannot force people using it update or change compilers

recent msvc

All msvc, I have yet to find one anywhere near as good as the open source alternatives. I found exactly 1 bug in gcc and none in clang. The one I found in gcc was already fixed I justhad to get a newer version than was shipped in the OS package manager. The other compilers just have fewer defects, produce faster code and take less time to do it.",,
"It's not the development or environment part I have a problem with.
Unix philosophy.  Google it.",,
"Nah, you're still wrong. The guy else-thread, who said ""my development environment is UNIX"" was right.
You want to be l33t vi haxorz. Bwahahahaaaa...
You're also just saying something, anything, because you think that having the last word wins you an argument. Sure dud. Knock yourself out, I am out now.",,
"Visual Studio, Code::Blocks, CLion.",,
"If you want to start with something similar to what you learned in school, you can use CygWin to install g++ and emacs and all of your favorite Unix/Linux tools on Windows.
In Windows 10 you can also install the Linux Subsystem and get something similar.
CygWin is a bit clunky but it's been around for years and there's lots of documentation on how to use it. Microsoft's Linux subsystem is newer and slicker when it works, but there are some gotchas and it's still kind of new and not as well known.
Either of those options will be all you need to edit with emacs and compile command-line programs.
If you want to make more interesting programs, Visual Studio is probably the best IDE around, it's fantastic for writing C++ code on Windows. It will take time to learn it and it can be confusing, but at least it's very, very popular and there are lots of resources online.
Code::Blocks is good and cross-platform. Eclipse is widely used but C++ is not its strongest language. I'd favor Visual Studio.",,
It really comes down to you. Whatever fits you the  best. I use Visual Studio Code with GCC compiler.,,
Sublime to code and terminal to compile.,,
G++,,
"Visual Studio if you are on windows, qtcreator everywhere else. qtcreator is shockingly lightweight and fast compared to all the crap built on java.",,
You can use emacs and g++ in pretty much any operating system. However I like eclipse for most of my development needs.,,
"Visual C++ Is nice, but it does have a steeper learning curve than some other IDEs. I personally like SlickEdit... alas, it's not free. I've also been using Atom IDE for some non C++ projects and I like it a lot so far - very clean and simple interface.",,
I’m partial to Atom plus the terminal.,,
"Windows: VS
Linux: KDevelop/GCC",,
"With Emacs you really need to know a lot more about the editor than you'd need to know otherwise. Visual Studio / Eclipse etc. are far too simplistic in comparison. The difference is also that when using Emacs, you'll have many different options to set up your environment, while in MSVS / Eclipse kind of tools, it's usually only one way of doing things.
I've been using Emacs for many years, but I'll readily admit that for a novice, tools like MSVS / Eclipse have an advantage of possibility to explore the configuration / settings without necessary large amount of understanding of how the tool works.  This is, unfortunately, a doubly edged swords, since when you become more proficient with other tools you use, you'll find MSVS / Eclipse kind of editors to be too limiting.
Wrt compiler: I'd go with clang++. This compiler provides better diagnostic messages in my opinion.  It also has some tooling, that you can use from other editors. Tools like code intellisence, error checking can be outsourced to this compiler (this is the best way to set up Emacs for C++ btw).  My second best option would be MinGW. This is because it has the same interface as g++, and the knowledge you get using it will easily transferable to other systems. MSVC would be the third best option, since it's ""endemic"" to this system, but it's kind of problematic when it comes to versions, installation, and not in the least, following the standards.",,
Surprised no one has mentioned qt creator.,,
"watch this video 
https://www.youtube.com/watch?v=Ee3EtYb8d1o 
https://www.youtube.com/watch?v=zN7llTrMMBU
https://www.youtube.com/watch?v=hbmV1bnQ-i0
he uses Visual Studio Community Edition for compiling and debugging, but he uses emacs as his editor (you don't have to use emancs -- you can use any editor -- even notepad -- or you could just use the editor in the IDE)
he shows how to compile using VS from the command line and explains the compiler switches 
he does a few ""strange"" things (like setting up the W drive), but that's just so everyone following along will have the same configuration he has 
the first 43 days of this series are really excellent and teaches a lot (although he does have strong negative opinions on C++ and object oriented programming)
https://www.youtube.com/user/handmadeheroarchive/videos?sort=da&flow=grid&view=0",,
"Eclipse CDT, Black Theme all you need. 
Or just use vim",,
I don't know why people recommend CB. I haven't seen anything about it worth using.,,
+1 on everything except CLion. It wants money from you after 30 days :<,,
Eclipse is a godawful C++ IDE.,,
"I'd favor Eclipse for multi-language, but it's only so-so at C++ support. Visual Studio is better for C++.",,
"In my class we work through the terminal, is that the same deal with this? Sorry for these stupid questions, just very confused.",,
Lol eclipse is shite,,
"It's fun and it's lightweight. That's about it. Good for jumping back and forth between some game or movie without too much lag.
I'm an Eclipse CDT man, myself, but I keep a copy of C::B around.",,
"What features are lacking from C::Bolocks?
When I used it(granted - for a few borderline-trivial projects), I had all the things I needed: compiling was done correctly, debugger worked(mediocre-ly, yet worked), Cppcheck checked the code, I could rename symbols easily(after finding the feature, because there is a lot of drop-down menus).",,
"It's really the only decent free C++ IDE besides Eclipse CDT, and a lot of people have had nightmarishly slow performance from the latter because it's a lot heavier of a program. CodeBlocks is also dirt-simple to set up and use.",,
"It's free if you are a student. And anyway,  the OP didn't say that ""free""  was a requirement,",,
"You can use the terminal or an IDE, your choice. The Windows Command Prompt is an awful terminal. Either download Console2, or learn to use PowerShell. Or use a real Linux terminal from CygWin or the Linux subsystem.",,
"No, eclipse is a full blown crossplatform IDE. I hate to say it, but everyone has their own taste. Asking what IDE to use is much like asking someone what color is best.",,
"Well, on windows there is Visual Studios community edition. On Linux, there is KDevelop. There is also QtCreator. You don't even need to use Qt to use it.",,
https://youtu.be/cV0tCphFMr8?t=2m27s,,
"Wow, I haven't seen that movie in a decade at least.",,
"CLion and Visual Studio (Not Visual Studio Code) are what most professionals use for C++. I'd say try CLion out, it makes getting setup super easy and is completely cross platform. Most importantly, it's completely free on an unlimited number of devices for students, you just register for a JetBrains account and apply for the student discount. Usually takes less than 5 minutes.",,
"I strongly recommend Visual Studio 2019.  As others have said, Community Edition is free, and it will be years before you need anything it doesn't have.  Yes, it takes a long time to install, but it will be worth the time.",,
"In order of my preference (my job includes writing c++ daily):
Visual Studio Community is free. It is the IDE used by professionals, but to just create, build and debug a project is just a few clicks. There is no reason not to use this, other than wanting to work on Linux/Macos. VS2019 has the latest C++ features. It’s quite a heavy install though. The autocompletion and debugging experience is the best you can possibly have and there are many options and extensions available to tailor it to your needs.
Qt Creator is free and open source. Unlike the name implies is is not only for Qt projects. This is my preferred IDE on Macos, but works great on Windows too. Has a very light footprint (especially if you disable the clang code model). There is no compiler included, so on Windows you’ll need to provide one.
CLion is not free, but has student licenses that you can request. It is really slow and has terrible memory usage, but great IDE features. Also has the advantage that if you already use PyCharm or IntelliJ it will be familiar. I think some kind of compiler is included, but didn’t try installing it on a clean machine.
Code::Blocks is free and open source. This is what I used when I started out. It’s not a very good IDE, but it will get you going quickly. The mingw compiler included might be old, so you won’t have the latest C++ features.
Additional comment: Do not use stuff like VSCode or Atom or Sublime text or vim or whatever text editors. They are not good IDEs per default and you’ll have to fiddle with configurations to make them work nicely.",,
I'd recommend Visual Studio 2019 or https://repl.it/,,
VS community and CodeLite are my favorites. CodeBlocks was crashing every now and then.,,
"Dev cpp is a great compile-execute IDE, perfect for beginners. It's fast, simple and free.",,
I would recommend Visual Studio Code,,
In my class I learned on Eclipse and then I switched to AWS Cloud9 bc it saves my programs and I can open it anywhere,,
"if you use linux, i recommend directly use g++ compiler and any text editor. that way you get the feel for linking and compiling directly. if your not used to IDE's it will be another learning curve. it's very subjective.",,
"Visual Studio Code is good to have to learn every programming language, but it's a little bit harder to install. If you want to get a decent IDE for casual programming, not professional you can use Code::Blocks which came in a version with MinGW debugger. Anyway these two are open-source so you don't have to pay for them",,
"Visual Studio would be an overkill since you're just starting out. It's a heavy install too.
So I would recommend you check out Code::Blocks :)",,
"I personally like atom, my school gives out a free version of intellij idea which Ive heard is really good maybe the best. Idk if you might have access to something like that bc I think intellij is typically like $600.",,
Visual Studio community edition is best one.,,
Why not install clion on a clean machine,,
"Do not use this. Maybe it’s good for beginners (although I’d argue it isn’t), but you will have to learn a new IDE soon enough anyway.",,
I think Code is just an editor though; it doesn't include a C++ compiler.  OP is asking for an IDE.,,
I think Code is just an editor though; it doesn't include a C++ compiler (and not sure if it includes a debugger either).  OP is looking for an IDE.,,
"If you have an edu email address, you can get a student pass, which gives you access to all the IntelliJ products.",,
Because I don’t have a clean Windows installation without any compilers available just to test if CLion comes with a compiler?,,
Or you can use any document that proves that you are a student. It worked for me it will take like a week to get it mannualy verifyed.,,
I dose not come but the installation of one in verry easy. You just download and install minGW from source forge and then clion detects it automatically.,,
"A fellow teacher recommended Dev C++, which is something that a lot of programmers I know curse to death. I also have thought of Turbo C++ which features a very simplistic UI, but that's only because it's from the ages long past.

for hell's sake where are you from ? Dev-C++ has been dead for 15 years. 
I think that we should collectively send a big message to most schools, manifesto-like, telling them that they are harming their students there.",,
"QtCreator could work. Really simple to install and Qt installer can also install MinGW. Also gives easy option to try C++ GUI programming.
It has lot of features but simple things work well out-of-box and eg. cppreference can be integrated to QtCreator so that simply pressing F1 shows cppreference page of hovered symbol.",,
"Sorry but I'm a little nervous to see you on here asking only about the IDE. Teaching cpp is (imo) pretty tricky so I'm surprised this is your only question. Also your colleague recommending such an old ide makes me think y'all aren't really keeping up with cpp which is scary because this language changes fast and a lot of cpp classes out there are utter trash because they're not kept up to date.
I'm no expert, but SG20 are and I would recommend checking out their videos about learning and teaching cpp before you do anything else. At least watch the ""critical"" lectures and the ones about teaching cpp. https://www.cjdb.com.au/sg20-and-videos",,
Check out juCi++. The main rule while developing this IDE was to keep the UI as simple as possible (no buttons etc.) while still having the needed functionality easily available trough hot keys.,,
"A fellow teacher recommended Dev C++, which is something that a lot of programmers I know curse to death. I also have thought of Turbo C++ which features a very simplistic UI, but that's only because it's from the ages long past.

Please don't do either of these things. Do not teach current students yesteryears programming. Teach them modern C++17 using Visual Studio Code. It's free and open source and works on Linux + Windows + Darwin.",,
"VS Code. Works everywhere and there is no reason why high school students aren't able to use a full featured one. Just use Visual Studio Community if they are all on Windows and you don't want to have them compile on a terminal or walk them through setting up compiling withing VS Code.
And please don't listen to the people stuck in the 80s with their vim or emacs.",,
"Honestly, just use Visual Studio. The community version is free (as long as you don't make a profit from it), and you can probably grab an educational license (I don't see why the students would need one).
Stuff like VS Code will require your students to add the proper C++ extensions themselves and you'll lack Visual Studio's debugger, which is considered the best C++ debugger by many.",,
"QT Creator or VS Code, both have

good autocomplete
good syntax highliting
go to definition
debugger
CMake support

and both are cross platform (OSX, Linux, Windows)",,
"Speaking as a complete beginner to c++ and learning from a book as we speak to hear me out:
Is an IDE really necessary at this stage? Why not just download a simple code editor and compile through a terminal? Learning that process is valuable in itself.
I didn't want to spend time learning the ins and outs of an IDE that I may not even use in the future when I could just focus on the code. Besides if you're only teaching the basics, the terminal will tell you enough to be able to debug without adding breakpoints etc.
Logistically, think about having to worry about getting people set up with the IDE, then all the issues people will have during class using it i.e. ""this tool has disappeared from toolbar, I don't know where this is, etc. etc."".
Probably not the answer you were looking for and others might disagree but speaking as a student in c++ myself I think this is the best way to go about it in order to focus on the code.",,
you don't need an ide.  use the command line.,,
For beginners starting with C++ they should start with a normal text editor. Ive heard too many stories of students who are unable to program in environments in which they dont have access to an IDE.,,
"Emacs
But seriously, VS Code",,
"I work for the Visual Studio team so my opinion is biased, but I wanted to highlight that we've made a number of user experience changes designed in part to reduce the learning curve for new users (particularly students) over the past few releases. For example the console window no longer auto-closing itself when a debugging session completes, ""This project is out of date"" build prompt that was confusing to a lot of people, quick fixes for missing #include statements and semicolons (they both seem to be pretty popular), and even an overhauled new project dialog and a new start window to help a new user focus on the experience they want. 
​
But putting that aside, I learned a lot by sitting in UX labs with many students over a period of a few months. My two biggest takeaways were: 
1) Some of the biggest stumbling blocks are things that seem really basic to an experienced professional developer as they have already overcome and routinely bypass these issues. I think it's up to tool vendors to fix those (so please file bugs on tool vendors when you see a pattern with your students getting stuck somewhere). But even without that there is the second takeaway - 
2) Tutorials work really well to reduce the learning curve. I put together a basic tutorial for a console-based calculator app in Visual Studio that took maybe 20-30 mins for a student to go through, and by the end of it they knew not only how to compile and debug their first C++ app, but even to do things like use a conditional breakpoint or step through the code. I was also careful to describe each line of code since all of it is brand new information to the reader. You can actually still find the tutorial here ( https://tutorials.visualstudio.com/cpp-calculator/intro) and we since integrated it into our docs as well. The difference between students who took the tutorial and those who were asked to get started on their own with only general guidelines was huge: students who followed the tutorial were much happier by the end of the session and felt they really learned something. Students who didn't couldn't get a program to run in an hour's worth of time. So as an educator, regardless of the tool you end up choosing, I suggest investing some time into a good getting started tutorial. That alone will make a huge difference. The GIFs are worth the time investment too and don't take too long to make with a decent tool.
​
Also to comment a bit on the console vs. IDE teaching method: I think it's fine to start off with just a console, a Makefile and a compiler you can call to build the code from the command prompt. My problem with it is that this often turns into years of students being asked to work this way. It's one thing to get students to understand basic principles, it's another to hurt their productivity by having them avoid tools everyone else uses for professional development. Students are busy too, and they could use the time savings provided by a good editor, IDE, or debugger. I wouldn't spend more than a few weeks in just a console. On top of that, learning tools is important to prepare them for their future career as well. Otherwise it's like insisting on teaching graphics design in Paint. Look, I love Paint, but it isn't Photoshop.",,
Visual Studio Community Edition or whatever the free one is called,,
"Using Visual Studio with vcpkg automagics adding include directories and linking libraries that would have to be done manually in some kind of build system (and potentially a project helper file for IDE-like intellisense) with other solutions. All the user has to do is install a package with vcpkg and when they simply #include a file from that package in a cpp/h file in their project the rest is all done for them.
Having said that, is C++ the next logical step up from Scratch?",,
"CMake + VS code or Visual Studio if you are on windows, and CMake + QtCreator or KDevelop if on linux.
​
This is how I acheived the most success showing C++ to beginners.",,
"Visual Studio Code.
It's easy to set up, and can provide decent IDE features even if you don't bother to set up all the integration with the build system and whatnot.",,
"kdevelop (or Qt Creator).
Reasonably intelligent suggestions, reasonably easy to use.",,
"You should not be teaching them C++ at all, unless they are really excited and actually asked for it. If Scratch is what you are teaching right now, perhaps continue with Javascript or Python. If that’s not an option, try as hard as possible to keep them in the browser. Nobody wants to headache of installing and configuring Qt correctly or whatever IDE+compiler(+build system) you might choose.
I realize this might not be a great response for the cpp subreddit, but in my opinion C++ should not be taught to high school students because of how difficult it is to teach correctly. The amount of dragons and edge cases behind every single corner of the language makes it very unsuitable to develop an intuition for how things work. C# or Go or Python are all leagues better at this.",,
"For UI simplicity, go with text editor that can compile files. Visual Studio Code is my pick in this matter. Install the C/C++ extension from the market. 2 clicks away and its ready to use.
Another option would be QtCreator community edition. It's free, has awesome autocomplete, go-to definition, and suggestion, low memory usage, runs everywhere, and would be relatively easy to teach GUI programming because it has built-in WYSIWYG designer. Students who are interested beyond the scope of the class can learn more on their own and use it to develop marketable software, so that's another huge plus to keep in mind. I use it everyday.
Last but not least, CLion. Its a paid IDE, but fortunately JetBrains (the company behind it) gave 1 year extendable free license if one can provide a student email. Its downside is huge memory usage (1.5GB+ RAM on my laptop after build, 500-800 MB idle with unused extensions disabled).
Note: I'm aware of Visual Studio IDE (not Visual Studio Code), but since its not cross-platform I don't recommend it in educational setting.",,
"Instead of choosing an IDE, I'll be talking to our coordinator and probably make plans to push this to JavaScript...

JavaScript normally means JavaScript + HTML + CSS and this isn't a clean introduction to programming imo. I'd much prefer that kids learned something like Python where there's much less noise to put them off with.",,
https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#C/C++,,
"Can you get an academic license for MSVC?   I think that is great for getting started, assuming that they are on Windows.   Precompiled headers will simplify things for them also.",,
VS Code combined with whichever LSP implementation works on Windows (clangd?),,
"I think that we should collectively send a big message to most schools, manifesto-like, telling them that they are harming their students there.

I am from the Philippines and yes please, do that. I am teaching now because I have been in this cycle when I was taking up my degree. It was not just unproductive but toxic, you being taught something that's not even used anymore, wasting years of study only to come out with nothing useful learned. I just wanted to be a part of some sort of change, I guess, that's why I am teaching now.",,
"where are you from ?

In my country - Romania - my high school teacher considers Turbo C++ advanced because it has the graphics.h header included and requested me once to make it work on school's computers. I tried but I couldn't make it work and I tried to explain to him that the library is very old and Turbo C++ is not even developed anymore. With my limited knowledge I tried writing a library that uses SDL2 instead to draw simple stuff, I made it work on their computers and I made a simple template in codeblocks - the IDE that the school uses - to make it easy for students to create new projects. Sadly I have just finished high school and after I made it work they reinstalled windows on their computers and I did not get the chance to 'install' the library again. The same teacher says that codeblocks is a programming language - something like an advanced c++ that highlights text, that the only difference between c and c++ is printf vs cout, that iostream.h should always be used and I am not even kidding.

I think that we should collectively send a big message to most schools, manifesto-like, telling them that they are harming their students there.

Just PLEASE do it.",,
"The problem is obviously not [really] with the recommended tools, but with the fact that OP and his colleagues call themselves teachers.",,
"I second Qt Creator as well. It’s cross-platform. Has it’s own simple and grokkable build system which is also cross-platform, yet also supports cmake if the need arises. Can install mingw on windows using Qt installer. No need to do it manually.",,
Thank you! This is a godsend.,,
Isn't the fact that you need to build it kind of a non starter for what OP is looking for?,,
"That's a nice and simple IDE, but I built it this morning and it definitely isn't simple to setup, especially for beginners.",,
You overestimate high school students. Many of them are just doing the programming course randomly and aren’t interested. You would overwhelm them with setting up “magical” tools like compilers in vscode.,,
"Poo, I would actually choose something very basic like gedit (or emacs) because IMO these students need to see how everything fits together at a low level.  Let them run the compiler at the command line and see how the files sit in the filesystem.",,
"I understand your point, but I think the public here isn't people how are actively pursuing a career as programmer, but rather potential hobbyists and programmers. I think the class should focus more on easily doing something cool, rather then showing them all the nooks and cranny of the language.  
Yeah, they will end up doing stuff they don't understand, but if they have fun and it capture their interest, they will end up learning that stuff later.",,
"Having said that, is C++ the next logical step up from Scratch?

No. But that is something that's beyond what I have power over. The country's Department of Education set up the curriculum and as an entry-level instructor, I can't do anything other than assisting my students ever so gently into C++ programming.",,
I second that,,
"That's what I use and it's a good choice. Not perfect by any means, but it's free, it works well enough, it's being actively moved forward, and it's the same on Windows and Linux so it's good for cross platform work.",,
"I think this is good, though. They have been taught HTML + CSS in their previous school year, and a lot of them showed a good understanding of these technologies.",,
community version is free.,,
"Precompiled headers will simplify things for them also.

How so?",,
"The same teacher says that codeblocks is a programming language

That's just... sad. To be honest, this type of scenario is very widespread here too (I'm from the Philippines). And I'm talking about universities and colleges that give out degrees in Computer Science and Information Technology. The teaching professionals just aren't that good in learning themselves, and give out wrong and misleading information. This results with students barely ready for work after they graduate, and the better students end up working as software developers in high paying companies; almost none of them even consider teaching.",,
"Just PLEASE do it.

Hey, see my flair? I might add something like this to my TODO list of ""single page articles dedicated to shortly present important problem"" (next to strict aliasing violations and common C/C++ myths)",,
"Exactly. If we call ourselves teachers, then where the hell are our students going to, right? That's why I am finding recommendations to start change in our schools. My colleagues didn't even have professional work background with Software Development; they all had degrees in Computer Science and then permitted to teach. Meanwhile, I, too, have a degree in Computer Science but worked as a freelance Web developer for 3 years before I started teaching. And I am as clueless to C++ just as my students are. The only place I could look for help is here, where other developers could help me teach my students in a way that prepares them for the future, regardless if they want to enter the tech industry or not. I am so happy that a lot of you have given your recommendations, and I will be looking into all of them and tell my colleagues.",,
To be fair I think it's hard to set up a good school curriculum and keep it updated over time. Any time a big change is made there is a risk that something will go wrong and you'll end up with students not learning much. Maybe one thing us tool vendors can do is make a greater effort at lowering the learning curve and providing useful supplemental materials to educators and students for using our tools. Documentation designed for professional development is different than documentation targeted toward students working on small projects.,,
ayyy nice! I am super glad it was helpful :D,,
"Starting at too low level is how you end up pushing people away from programming IMO.  
When you first start to program, you want to make games, web sites,and other cool stuff. It's by easily allowing that that you can interest people in the craft. Of course, if they pursue learning the craft, they will eventually have to understand what the hell is happening at a lower level but at first, show them how fun and easy it can be to make something cool.  
Take two beginners, one in Python, the other in C++. By the nature of both these language, in a few weeks, the Python one could easily be taught how to create a simple game with a UI. The C++ one will still be making console app with endless segfault because ""he needs to know how raw pointers and memory works before moving further"". Stop teaching C, stop starting at the very low level and C++ can be a fun starting language.",,
They can already do that in VS Code.,,
"Yes you can learn a lot from compiling on the terminal, but if you ask me that's no reason to use a text editor without any features, might as well use Word at that point. Use VS Code to write the code, compile it on a terminal. They don't need a ""click this button to do the compiler magic for you"" functionality, but syntax highlighting, auto-complete, and intellisense are all really useful tools. I just mentioned VS Community in case the teacher does want the students to skip the terminal for some reason.",,
"Sure, just like we introduce chemistry starting with quantum mechanics and mathematics – with ZFC.
Because these students need to see how everything fits together at a low level, ay?",,
"basically you're saying it's too hard to use raw tools.  of course this is not true at all.  it's dead simple.  if anything it's easier when things don't work because you can see exactly what happened and debug it.  it's hard to debug ""linker error retry with -v for invocation"" when you just pressed a button",,
"Yes, but said teacher [or institution] might not qualify?",,
You can set them up with just the headers you need and then they do one include.   It makes building faster also.,,
"And I am as clueless to C++ just as my students are.

So, the blind leading the blind?
It's just abysmal that you even pretend to be a C++-teacher [and what about the institution that hired you for this purpose]. If you are a teacher, you would give advice and your opinion here.",,
"You really have no idea what emacs is do you? ""Without any feature"" is very much not what anyone that knows the least bit about it would say. Emacs is really powerful.
That said, I defo wouldn't advice a beginner to use emacs, since it can be daunting to learn how to use effectively. VSCode Is a lot more user friendly and does most things you might want, specially once you add some plugins.",,
"I am not saying it's too hard. What I am saying is to focus on teaching them how to do something cool rather them teaching them all the boiler plate and lower level stuff.  
You can go pretty far and build rather large project using Visual Studio Solution management without knowing how it works under the hood. If you have multiple projects, you can easily select the build order and dependency in the UI. Also, at a beginner level, I don't they will end up writing a software big enough to warrant linking with big external libraries and stuff like that.  In the same vein, I wouldn't teach them raw arrays and stuff like that. Go straight into using vector, standard algorithm, string and higher level stuff so they can more easily write cool stuff like games.
If programming still interests them afterwards, then they can go and learn everything else.
To quote my other comment:  

Starting at too low level is how you end up pushing people away from programming IMO.  
When  you first start to program, you want to make games, web sites, and other cool stuff. It's by easily allowing that that you can interest people in the craft. Of course, if they pursue learning the craft, they will  eventually have to understand what the hell is happening at a lower level but at first, show them how fun and easy it can be to make something cool.  
Take two beginners, one  in Python, the other in C++. By the nature of both these language, in a few weeks, the Python one could easily be taught how to create a simple game with a UI. The C++ one will still be making console app with  endless segfault because ""he needs to know how raw pointers and memory  works before moving further"". Stop teaching C, stop starting at the very low level and C++ can be a fun starting language.",,
"Disclaimer: I am not a lawyer. However, this is explained clearly by https://visualstudio.microsoft.com/vs/community/ in the ""For organizations"" section:

An unlimited number of users within an organization can use Visual Studio Community for the following scenarios: in a classroom learning environment, for academic research, or for contributing to open source projects.
For all other usage scenarios:
In non-enterprise organizations, up to five users can use Visual Studio Community. In enterprise organizations (meaning those with >250 PCs or >$1 Million US Dollars in annual revenue), no use is permitted beyond the open source, academic research, and classroom learning environment scenarios described above.",,
Why is this easier than including them [the headers you need] directly? I seriously doubt that for any student-project compile times will be affected.,,
"you even pretend to be a C++-teacher

I guess that's true, pretending to be something that I am not, ""blind leading the blind"". The only difference is that I know more than the basics of C++, and although I have no work experience with C++, I have worked on it for two years when I was studying. I may not be able to teach them everything, but I am more than capable of teaching what they need to learn to just see if they want to go into software development.

what about the institution that hired you for this purpose

You know how schools go. They just want to follow what is written on the stone tablets so they could operate for more money. Just a few of them actually push for change in our education system. I needed a job, they needed a teacher, so I went in. But out of my conscience and care for the future of these kids, I want to be more than just a teacher technoblabbering his way through the school year.

If you are a teacher, you would give advice and your opinion here.

I disagree. Teachers, though their job is to be content experts, should also learn. And to learn, the first step would be to be honest to yourself that you don't have an idea about a thing you are to teach. That is why I am here, asking for the more expert's advice and opinions. Please don't see me as an enemy or the cause of why we have problems in our system. I am trying my best to not contribute to that problem, if I can't be part of the solution.",,
"Are you mad?
This happens for most subjects. Most school teachers do not have backgrounds of successful professional careers in their topic. Most maths teachers don't have a maths PhD, most chemistry teachers have never worked in a lab, etc etc.
High school level is so far below professional practice it's not an issue. OPs special skills are in how to teach young people, rather than being a wizard in CPP.
Unless it's a very expensive school, no where is hiring wizard programmers to teach their 16 year olds.",,
"I guess it depends if you want to write something fun as you say or understand what you're writing.  I think understanding is top
edit: as I reread this it sounds like I'm being an ass and I'm sorry for that but hopefully the message shines through.  I really think it's a difference in intentions",,
"Thanks for clearing that up, I'm no lawyer either, but it looks all good [one can at least claim to be of good faith, I would say].",,
"Sorry, just saw this.   My thinking was regarding a student.   Just a little improvement to keep them focused on the code....",,
"The only difference is that I know more than the basics of C++ ...

Well, that's not a great qualification. I cook better than my wife, but that doesn't make me a chef.

... and although I have no work experience with C++, I have worked on it for two years when I was studying.

Unless you are seriously clever, 2 years [of daily] programming in C++ [while keeping up with the standards] doesn't get you [or me] anywhere.

You know how schools go.

That's why I'm objecting, seems to be a problem in countries like India and apparently the Philippines. The thing is that you could be better as well, but you say you are not.

Teachers, though their job is to be content experts, should also learn.

Yes, so what happened, what stopped you from learning? Asking questions here is not gonna teach you program in C++.",,
"Are you mad?

No.
But you do think that it's ok for the teacher 'to be as clueless as the students'? To me it seems the students are being ripped of by the school and don't get what they paid for.",,
"I completely understand, but because the public of the class seems to be more high-school, I think the focus shouldn't be on the inner workings and more on making programming interesting so that they might see it as a potential career choice.
That's my impression of the post anyway.",,
"I cook better than my wife, but that doesn't make me a chef.

I think you are missing the point. My students are high schoolers. They don't even know the word ""programming"" exists. The point of this class I am teaching is to pique their interests and give them ideas so they could decide whether to pursue a career on software development or not. They don't need to be C++ programmers by the end of the school year; they don't need to be hired to develop games or optimized utility software by the end of the school year. The goal of the class is to give them a brief introduction to programming so they could have an informed decision if they want to specialize in software development in senior high school. I don't need to be an expert, or know much really. I just need to let them have fun with the basics and create awesome things with it.

Unless you are seriously clever, 2 years [of daily] programming in C++ [while keeping up with the standards] doesn't get you [or me] anywhere.

Yet I have made a point-of-sale and payroll type of applications during those two years that I had been studying, the same types of application that these students are building in my class (according to the curriculum provided by the national department of education, of course). Like I said, I don't need to be an expert in C++, I just need to know more than just the basics so the students would know just what they need to enjoy programming.

The thing is that you could be better as well, but you say you are not.

When did I say I am not, or that I couldn't be better? I repeatedly said that I am trying. Isn't asking for recommendations a part of making myself a better teacher? Isn't searching for answers a way of improving?

Yes, so what happened, what stopped you from learning? 

Please try to read my answer more thoroughly.

Asking questions here is not gonna teach you program in C++.

No it doesn't. I am asking for recommendations for an appropriate IDE to use, not how to program in C++ because I know enough to teach my students.",,
"The point of this class I am teaching is to pique their interests and give them ideas so they could decide whether to pursue a career on software development or not. 

Purely imo but c++ doesn't sound like the call then. Cpp is super deep to the point where if you're just trying to do simple projects with kids it's probably overkill. Ime the main killer for tiny projects is the dependency management wrt other languages. Pip install x vs good luck figuring out how to compile install and link x (not to mention having to first teach the students how compiling and linking work)
Let's say you want to setup a simple program that reads an image from a file and detects faces using opencv. You will be done in python before you have even installed opencv on the c++ side.
What motivated you to pick such an in depth language to teach absolute beginners when you yourself have minimum experience to begin with?

They don't need to be C++ programmers by the end of the school year; they don't need to be hired to develop games or optimized utility software by the end of the school year. 

Again then what's the point of c++ here? The benefit of cpp (ime) is the control you get from the depth and complexity. If you're just trying to say ""hey kids look at this"" why try to make them swallow cpp? Imo if you're choosing cpp there has to be a legit justification for dealing with the language complexity and build systems. Otherwise try python seriously.
Disclaimer: I'm not trying to say cpp is bad i actually love c++, just it wouldn't be my choice language for building  simple projects with high schoolers esp if this is just a 1 year thing.",,
Visual Studio and QtCreator are absolutely the best IDEs in my experience.,,
"My opinion, QtCreator for C++.",,
"vim + gutentags (ctags code naviguation/autocompletion) + ALE (linter and static code analysis: clang-check, cppcheck, flawfinder, etc) + ConqueGDB.
Works on all platforms, lightweight, fast as hell, configured to work on multiple code base (not just c++). Integrate perfectly with command line tools, so you never have to learn tools twice to achieve the same workflow.
Have been working for more than 10 years with that setup (or close to it) at 4 different companies, never had to relearn (I insist on the RE, learning is part of our everyday job) a tool since.",,
"CLion, I like the fact I can carry my idea across all three major operating systems.",,
"I really like QtCreator. It has a minimal UI (which is rather refreshing compared to something like Visual Studio or Eclipse where the UI feels super cluttered) and has good support for CMake, QMake, and QBS based projects. The clang code model has no problems with any sort of code I have thrown at it, and the application handles large projects well. It integrates Qt Designer and ships with stuff to make debugging Qt applications nicer, but works just as well for projects that don't use Qt.",,
C-Lion has gotten really good after the last few updates.,,
Visual Studio has its quirks but it is the best.,,
Vim + YouCompleteMe + gdb for developing on remote machines only reachable through SSH,,
[deleted],,
"For me VS Code worked out pretty well, with a few extensions :)",,
"This comes up a lot. There was a poll:  
https://www.reddit.com/r/cpp/comments/7yvned/results_of_the_poll_about_the_most_used_cc_ides/",,
"I haven't used it in a while, but I would still guess that its Visual Studio with Visual Assist X, that is if you're okay with staying on Windows. If I were to use C++ professionally again that would be only on Linux though, so for that I would go with CLion probably.",,
"I love CLion. However it costs money. In my opinion worth it. The nice thing is that even though they do it as a subscription, you get a fall back license so it's not like you're renting the software.",,
"Sublime Text (with EasyClangComplete , SublimeLinter-Clang & CImproved plugins) for normal stuffs and Visual Studio for heavyweight IDE stuffs.",,
Jetbrains CLion is magical,,
Spacemacs + ycmd + rtags.,,
emacs,,
"QtCreator if you need it, Vim if you don't.",,
Visual Studio + Visual Assist X with Sublime Text for quick file editing and viewing.,,
"The system used and what you developed have a great impact. For windows developers, visual studio is a good one. Linux or cross-platform GUI apps, Qt is one of the best, unless you want to use gtk. For macOS, xcode maybe is the only one. If you have enough knowledge how to work in terminal, emacs or vim with other tool chain(such as llvm, langserver, make, and so on) is better, which can be used anywhere and you can customize them and only install what  you really need. CLion is also nice, but it is written in Java and sometimes may not work satisfying.",,
"I use KDevelop on Linux, Visual Studio on Windows. KDevelop has great highlighting and code navigation, and VS since it's the most integrated with Windows I think.",,
emacs + evil + lsp-cquery,,
"vim + tmux
The only way to go.",,
emacs with the cmake-ide package,,
"Visual Studio is best if you don't have millions of Loc and you need to debug it quite frequently. 32 bit Visual studio  is too buggy for debugging. In Linux, QtCreator is the rock star, no matter how big is the project, QtCreator handles it well.
To make full use, you should use Visual Assist with Visual Studio and Locator with QTCreator.
Vim days are gone. VSCode, Atom, Sublime are distractions.",,
"Clion, they are highly involved in the C++ Community and also tend to be really quick in updating to a new version of the standard.",,
QtCreator without a doubt.,,
"I made a poll about this once, you can check it out here: https://www.reddit.com/r/cpp/comments/7ydk8y/bestworst_c_ide_you_have_ever_used/",,
"I really like SlickEdit. It handles my very large C++ project of over 18,000 files very quickly. It indexes all the symbols and I can quickly find the definition of a symbol or all cross-references to it. Each text search results are shown in a new search tab, so I can double click on any search result, or my old search result (in previous tabs) and it opens the file at the line number of the search result. It can do regular expression searches, and it has excellent VIM and emacs emulation. It is also cross-platform and runs on Mac, Linux and Windows. Been using it for many many years. The IDE is written in C++ itself so it is very very fast. Additionally whenever I have an issue or question, I post it on the SlickEdit forum, and developers or devoted community members answer it. When I find a bug, it is quickly fixed by the developers. It is not free but it is very very worth its price.",,
"VS Code for sure. I maintain a large library with has both C++ and Java code, with a JNI library to interface between the 2, and VS Code is the only editor where I can work on both, with full intellisense for both, at the same time. Once you get the json files built out, it's a dream. And I'm working on some Gradle plugins so allow it to generate the project information and automate even that. The extensibility and cleanliness of the extension API is simply amazing. And being able to edit support and build files with some support from the same editor, it's kind of unbeatable.",,
"Heh - I am the odd one out - I use Xcode on a Mac.
I like clang / llvm. Also, the debugger is excellent.
If vscode gets good CMake support and C++ completion, then I will check that out at some point. I've used vscode for typescript and js and it was better than anything I've used before.",,
emacs + cquery,,
"juCi++; fast, stable, cross platform, easy to use, supports latest C++ standards trough tight libclang integration, written in ""modern"" C++.",,
Visual studio Hands down. Nothing can beat visual studio.,,
KDevelop is my personal favorite because CMake integration is easy to pull off and I prefer to make my projects as portable as possible.,,
"VS to a point of making one feel there's no real true competition. It's not perfect, but it's amazing.",,
"I really like the work-flow that Vim (with NERDTree, restore view and YouCompleteMe) gives. In my experience, it's the best.",,
I use Eclipse with CDT. It's a decent IDE.  Takes a little work to configure but works well once it is. I build outside of Eclipse though.,,
"vim + gtags.
Every time I have tried to use a ""real"" IDE for C++ I hit enough annoying little performance lockups, buggy code completion, and badly designed UI that I decide it's not worth it. I'd rather give up the supposed advantages than be stressed and distracted by the problems. I mean, when you're writing code milliseconds of UI hang are super annoying. All the IDEs struggle with the fact that C++ is barely parseable.",,
CLion!!!,,
Visual Studio and VS Code on non-Windows platforms has been the best for me. VS has it's bugs and I don't know why the damn Intellisense stops working when it wants to but it's the best out there. It's got macros and code completions that take into account what sort of a code design you are adopting. Good stuff,,
CLion.,,
"Visual studio + Whole Tomato Visual Assist as my main IDE setup even if I am targeting Linux. I generally follow dev/debug on windows and deploy on linux paradigm. 
With Window 10 Linux Subsystem bash, I don't need a separate Linux dev machine. I actually deploy our linux production builds using WSL.",,
vi,,
"The answer is: depends.
First, what OS are you developing on? 
What OS are you developing for?
Are you developing command line, a background process, a GUI, a game?
For instance, I develop multiplatform, do ML, and do embedded. I use a mac as a desktop as it allows for the embedded and for Linux development. I use Visual Studio Code(+platformio) for the embedded and XCode for the command line or daemon stuff aimed at Linux as its debugging, tracing, memory stuff etc is the best on Mac. I like Mac for Linux development because the Unix base of both allows for nearly identical code to work well without having to fight with Linux as a desktop.
I develop multi-platform GUI apps in QtCreator. And finally I use Sublime for the occasional Web work.
That all said, Visual Studio on the PC is by far the best IDE but so little of my stuff is for Windows only that I don't get to use it much.",,
Cevelop (based on eclipse),,
Vim + ctags + ycm + gdb/lldb,,
cquery (+ kakoune + kak-lsp) is my IDE. It's pretty incredible how fast and accurate it is.,,
"Visual Studio is a bit heavy handed for me, I prefer minimal style editors. Like Sublime with a c++ code extension. I use that when I am working with a system that I know through and through, when I am working on a new system, I'll use Visual Studio to have reliable autocorrect.
I need to checkout C-Lion/appcode from Jetbrains, though.
(I make mobile games in c++)",,
Notepad + cmd,,
"The latest version of Visual Studio hands down. Since they've added the ""open folder"" and cmake support my workflow has significantly improved. The Linux compiling/debugging story is pretty awesome too, I'm interested to see how features like this will continue to improve.",,
(Atom + CQuery) + Terminal,,
Dev cpp,,
I use Sublime Text for editing and Visual Studio for debugging.,,
Visual studio with this extension,,
"VS Code in zen-mode. With disabled cpp tools because it's intellisense is failing to handle nested folders. 
I'm not using autocomplete other than based on words from current file, it's too distracting and always failng to provide good results in any IDE I was working with.",,
"Btw, any sane IDE on mac that can fully work with xcode project files?",,
I like visual studio because it's easy to customize and hook up other build tools. VSCode is also nice.,,
It depends: do you use a mouse?,,
"Can I piggyback on this request and ask what open source IDE that has the least number of dependencies on the build system?  I work on an open-source project with a very special snowflake build system, and the IDEs that I have tried insist on trying to understand the build system, failing, and then get very angry.  Specific problems that I have had:

KDevelop refuses to even create a project if no file called ""Makefile"" exists.  I can work around this with ""touch Makefile"", but it's a pain and I find KDevelop pretty buggy
qtcreator insists on having the build system tell it which #defines are defined for the build, and greys out any code that is under an #ifdef it things isn't defined.  I can't find a way to disable this feature and as a result, a lot of code in this project is greyed out and hard to read and navigate.
eclipse I can't even manage to install properly under Ubuntu.  The standard packages are garbage and I had problems trying to install the version on eclipse.org

Don't bother suggesting emacs or vim; I loathe editing code in a terminal.",,
Visual Studio with Visual Assist & VSVim.,,
Try jucipp,,
Clion JetBrains,,
"KDevelop is also great. I don't use it anymore, but has nothing to do with it not working well.",,
I like Code::Blocks,,
Unix is great,,
Nano,,
Netbeans can be configured to work with Cygwin / gnu.  This is a great option if you were a former java guy.,,
"80% of what you do in an IDE is edit text, and QtCreator unfortunately doesn't pay much attention to that aspect. The Vim-bindings are woeful, and you cannot even configure line-height.",,
"What's you opinion on language servers? Don't they give you the same functionality as ALE, gutentags and much more?",,
"Really cool, I've never come across ALE before, I'm having a few issues seeing it up though. Are there any guides to setting up ALE with c++? I have a project with multiple libraries, executables and third party include paths so my compiler options are not simple. I've generated a compile_commands.json but it seems the GCC and Clang linter doesn't support using this. Surely there's a better way than having to copy the compiler commands into my vimrc and updating then when I make any changes?
The other annoyance is that I can't seem to get line underlying for errors to work. The sidebar works correctly but not underlining. A limitation of using putty to SVN in perhaps?",,
"How do you debug? I still need CLion to debug in ways other than cout, as I dread learning GDB.",,
RemindMe! 5 days,,
I'd wager than qt creator works on much more OSes açd platforms than CLion :p I've used it from ARM at least,,
"idea 

That's a nice typo right there. Or is it?",,
[removed],,
Is working on three different OS - really part of your every-day work?,,
"While I agree on the user interface aspect, I have had nothing but trouble with the clang code model and QTC. That's not to say the old code model based on Raggi's parser didn't have its quirks, it did, but performance has never been an issue as much as lacking functionality following new C++ features. The clang code model brings my QTC instance and/or computer to its knees whenever I work with large projects.",,
"CLion is definitely my preference now. But QtCreator is indeed very good as well, and free/open source (unlike CLion, unfortunately).",,
"i have c-lion with the student program, and it's awesome, i love it",,
It ridiculously expensive.,,
Seconded. But their lldb interface leaves a lot to be desired,,
did it get any faster,,
Can c-lion jump in reverse? Those rare cases where I actually need a debugger I always use some combination of rr and valgrind.,,
"Main quirk being, it doesn't run on Linux. :(",,
+ Visual Assist.,,
"That's pretty much how I feel as well. I'm a huge fan of CLion and when I have filed support tickets, the folks at JetBrains have been very responsive.
But if you're on a super-tight budget, QtCreator is an excellent choice as well.",,
"I've also been using VS Code with extensions. It's not perfect, but it's lightweight and zippy (for an Electron based app, anyway) and suits my purposes.",,
Same.. can you send your vscode config if possible?,,
"do you run two separate language servers, for rtags and for ycm?",,
What do you use for tag search and autocomplete?,,
What about Qt Creator in vim mode? :-),,
"Does VA work with the free version of VS? Also may I ask, advantages of Sublime over Notepad++?",,
My exact setup,,
Nah. Screen is also ok albeit inferior :),,
"I have and use all of these, but when you say work-flow that it provides i'm not sure what you mean. 
I may be missing something a 5 year old would get but could you run me through your workflow please?",,
I tested several IDEs including CLION and QT and nothing beats Eclipse when you have to deal with large project spread among different repositories. Although I build outisde of eclipse too I use eclipse external tools to launch a remote build by pressing a button.,,
vi is only the editor of your development environment.  The tool that integrates all the tools together is your shell.,,
AppCode https://www.jetbrains.com/objc/ never used it though.,,
"Occasionally, but I'd rather get away from the usage of a mouse.",,
"Me too, one of the few I find it simple to understand what is going on with behind the scenes.",,
are you using the fork? Since the original project is abandoned,,
What are the text editing features you miss in QtCreator?,,
Vim bindings are always terrible.,,
Who cares about vim?,,
"Do you have any example by any chance? 
vim is so adaptable, this is what I like with it. I often find myself having to ssh and do actual C++ work remotely, on different computers (debugging mainly). With the proper vim config, vim can be pretty much self sufficient. If an external tool is missing: ""git clone && make"" are ~~usually~~ enough to get everything back, without any extra fuss!",,
"You can debug linter issue using the :ALEInfo and debug commands, at leat ALEInfo will tell you which linter is failing. Here is my config for ALE:
let g:ale_cpp_gcc_options = '$(cat ~/.compiler_options)'
let g:ale_cpp_clang_options = '$(cat ~/.compiler_options)'
let g:ale_cpp_clangtidy_options = '$(cat ~/.compiler_options)'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%]%s[%severity%]'
Is this msg format more helpful? And, yes you can hide your config away from your .vimrc! The key thing here is that you can actually execute your own script to parse the generated compiler option (instead of cat), or be lazy as me and share the same compilation option in one unique file filled manually by reverse engineering the ""compiler_option.json"". Personally, I only
 need to update it a very few time. It would be great to have something automatic though, maybe a combination of ""bear"" (tool to generate compiler options over make commands) + shell scripts?",,
"GDB is pretty good, try this: 
https://cs.baylor.edu/~donahoo/tools/gdb/tutorial.html",,
"In addition to the other answers, gdb can be configured to become very elegant and pleasant to work with! Please have a look at:
https://github.com/cyrus-and/gdb-dashboard
This integrates perfectly with ConqueGDB plugin for vim (which is basically terminal inside vim)",,
"I will be messaging you on 2018-06-04 09:05:09 UTC to remind you of this link.
CLICK THIS LINK to send a PM to also be reminded and to reduce spam.
^(Parent commenter can ) ^(delete this message to hide from others.)

|^(FAQs)|^(Custom)|^(Your Reminders)|^(Feedback)|^(Code)|^(Browser Extensions)
|-|-|-|-|-|-|",,
"After a quick search, it should be possible to run clion on arm. Just some tweaks and removing of bu dled executables (which are built for debian). I don't have an arm platform to test it, but it would be nice to try.",,
"Hah, yeah it was a typo.",,
.idea,,
"I use it on a 2016 MacBook, with 2 core, 1.1ghz + ht CPU and 8 gigs of ram on small-mid sized projects. I consider that a pretty weak dev machine, but I can see that it would fail on a large project (luckily for those projects I have a beefy enough system) using this hardware or on a much slower machine.",,
"Is working on three different OS - really part of your every-day work?

dunno for OP but I at least work on win, mac, and linux on any given day.",,
https://en.wikipedia.org/wiki/Straw_man,,
"It used to be the case for our project a year ago but is not anymore, super fast indexing (compared to CLion), code completion and navigation.",,
"$89 for a personal license isn't very ridiculous imo. You get a perpetual fallback license plus the cost goes down each year for the first 3 years. They also offer free licenses for open source projects and students.
I have a subscription to the jetbrains all product pack since I program in a lot of languages on a lot of platforms and I think it's a huge value for the money. I spend more money on coffee every year than I do on the IDE licenses, to put it in perspective.",,
"I pay annually for the entire Jetbrains pack. The amount of time their tools save me in the course of a week, is well worth more than the cost of my annual subscription.
Additionally they provide free licenses to open source project maintainers and students, and a few of their products have free community edition licenses (not clion however)
So while I'd say yes, it is expensive compared to free options, but imho it is cheap for what a professional dev gets in return. Especially if you're on Linux or mac, where the alternatives are imho not as good.",,
"You don't need to, use remote compiling (debugging) from VS.",,
The CMake plugin for VScode is really a class apart. It's by a 3rd party dev.,,
depense on what plugins. i use cquery for code completion and it doesnt use  one specific to it (it will look for a compile.json from cmake or other build system) but you can just sym link it. it you want to the ms plugin that one is moslty generated for you by the plugin through your intracion from the ui.,,
"I do use Intellisense C++(planning to try something else), CMake, CMake Tools, CMake Tools helper, Native Debug. For the text I like the Atom Dark pro theme :)",,
"I do; it's not as onerous as it sounds because the ycmd one is handled entirely automatically and it's relatively lightweight. So the only one I ever really think about is the rtags one, which is fair because it's doing quite a bit more.
I also turn on emacs' semantic mode (but I think not global semantic mode). I did literally zero setup for it; the only thing I use it for is to get a much better quick-outline. SPC j i and SPC j I are pretty amazing in my setup, and so is treemacs with auto follow mode.",,
"Not op however; I use RTags and company with the Irony backend. It just werks.
Evil mode as well",,
I also use emacs and I use cquery which indexes the whole project. It works quite well and is simple to setup.,,
"Emacs has autocomplete, M/, though it isn't that smart :\
Don't know what you mean by tag search, it of course has regular search, Cs :)",,
"Not OP, but I work with ycmd",,
Sublime has really fast folder searching and navigation as well as the best multi point file editing I have used.,,
VA does work with the community edition of VS,,
do you mind sharing configs?,,
"Hi. Well, English are argued to be the language with the largest number of word and expressions, and not being a native speaker, probably I get wrong the definition of the ""work-flow"", sorry. What I mean is that with Vim, these plug-ins and some configurations, I'm very comfortable with the dynamic, efficiency and ""fluidity"" that Vim provides.",,
give this man more upvotes please.  Simpler in this case is absolutely better.  And the last thing I ever want is a language or project that forces an IDE.,,
"Then trying out vim (or emacs) might be a valuable experience. Unfortunately vim's learning curve is quite steep, so it comes with a price...",,
"Just 2 for now:


Cmd+S should save the file, not delete the entire line when Vim mode is active. 


Configure line height.",,
Why does anyone want to use vim bindings?,,
Line height is exactly the useful feature for reading text.,,
Oh no...,,
Do we really need to go down this road today?,,
It’s treason then.,,
"I still genuinely don't understand how people debug effectively with gdb. I tried for a while and it's ok if I'm inspecting something very specific, but if I try to understand how data flows through the program in general and find the point where it's going wrong, the experience is horrible for me.",,
"please fix your typo, thx",,
"Yeah, I do move around enough to see the advantages of using the same toolset everywhere. Also, I never said working on three different systems is part of my everyday work.",,
"or maybe just pirate it ?
Edit: I forgot to mention, and obviously pay for the product once you're not dirt broke.",,
"I pay annually for the entire Jetbrains pack. The amount of time their tools save me in the course of a week, is well worth more than the cost of my annual subscription.

it's good.

they provide free licenses to open source project maintainers and students, and a few of their products have free community edition licenses

Visual studio is free for everyone, QtCreator is also free. In terms of free features, You should not compare with Visual studio and QtCreator.",,
"Ok, that's fine if I only wanted to develop in VS for Linux. But I want to run VS on Linux so I can run VS on not Windows 10. This OS as a service concept is turning out unpalatable to me.",,
I'd like to see both your configs please!,,
"For me it's not about simplicity, but about unlimited power.  IDEs can do very complex things with the push of a button ... but only certain things.  Once a week or so I'll find myself doing something that nobody would bother programming into an IDE because nobody will ever need to do such a thing again.  The way the shell integrates everything together makes these one-off tasks so much easier.  Once your know your tools, that is.",,
"What do you mean by changing the line height? Do you mean that the editor should be able to insert padding between lines in addition to what your font provides? Why would this be useful, let alone necessary, for editing text?",,
Because they are used to them.,,
Ha! Yes we do if some prick expects me to adhere to 80 charcater columns on my 2K monitor.,,
rr is way more useful than gdb. You should try that.,,
"You could, but I'm an adult who has no issue paying a pittance to support the livelihood of fellow developers for making excellent tools that make my life easier.",,
"Run a Win10 VM on linux.
Or docker it.",,
https://github.com/DarkWingMcQuack/emacs_config,,
"More space between lines makes text look less cramped and easier on the eyes. Even Xcode, the least customizable IDE, added 3 line height options last year. Other editors like VS Code let you specify it in points/pixels totally flexibly. 
Furthermore, configurable character spacing is also useful – I use it to compress Fira Code (with ligatures) so it doesn’t look too horizontally spaced out.",,
"Download any of IntelliJ's IDEs and go to the Font properties in the settings, you'll be able to modify the line height. Once you go 1.3 you never go back.",,
"So they are masochists?
Edit - Spelling.",,
that doesn't even have anything to do with vim...,,
you're troubled,,
"""If you need more than three levels of indentation, you're screwed anyway.""",,
"Ooh, I vaguely remember reading about that a while ago, rr looks super useful :)",,
"great, then you do not need to pirate stuffs. But don't forget some of us can't afford those  expensive subscriptions but want to write code effectively. Also, I don't think the developers behind such massive corporations -  Jetbrains IDE Team , Microsoft Visual Studio Team - are being paid unfairly.",,
"I never get the idea of running stuff like that in a vm, every time you may want to open it you start up a vm, its a hassle and it just seems to complicate the issue rather then solve it.",,
Thanks! :),,
This puts my config to shame. I need to organize my config like yours.,,
I never thought about needing such a config. Maybe you have too many adjacent lines without a blank line?,,
"Some of us are, but that's not why we use Vim/Vim bindings.",,
"""this person made some good software, so everything they say is law""",,
"They're being paid fairly because people purchase their products. Funny how that works, huh?",,
Why do you believe you're entitled to someone else's work/labor without fairly compensating them?,,
"How are they getting paid unfairly? What are they currently getting paid relative to what they should be paid?
If you are a software developer then it's very rare for you to be unable to afford spending $90 a year on a tool like this. Software developers pretty much everywhere seem to be paid well enough, even in much lower col countries/cities, to pay that yearly.
And if you are a student, then they have free student packs.",,
"Starting up a saved VM is literally one click. 
A VM configuration file can be passed between users for easy setup of the same environment.
If it goes horribly wrong somehow, you've only ruined your VM.
It honestly does have a lot of advantages.
Especially in this case where the user wants to continue using Linux but wants to use VS. it's a simple solution.",,
"Also, I'd like to note that, depending on your jurisdiction, you may be able to deduct the cost of tools related to your job, including software development tools, on your taxes, which does effectively reduce the cost.",,
"It looks like you're looking for a bundled IDE! An Integrated Developer Environment, one that comes with a compiler and is an all-in-one solution.
I recommend Visual Studio Community Edition for the Windows platform. It's free, and when it installs it'll all just work.
To start, you'll want to create a new project. You'll get a ""wizard"", which I don't know if they call them that anymore - it's just a dialog box that will walk you through setting up your project.
In Visual Studio, you have a solution, and then within that solution are individual projects - projects get turned into programs. Bigger software ""projects"" will actually be a bunch of projects in a single solution. Walking through the wizard, it'll automatically generate the solution for you, and name it after your project - it kind of assumes you're going to have one solution, one project, or at least name things such that there is a ""main"" project and the rest are dependencies.
I bother to spell this out because if you start and you see ""create a new solution"" and ""create a new project"", I don't want you to wonder WTF is going on. Create a new project, hit the check box that generates a solution of the same name. Know it's an organizational structure thing, and move on.
You'll want a console application. In the beginning, you'll be writing a whole lot of text programs, just learning the language. There are many, many other project types, and they're all for different and specific things. Frankly, I've absolutely no idea what the vast majority of them are, and if this is the start of your career, likely you won't ever know or have to know what most of them are, either. Microsoft has A LOT of technology, and they are kings of backward compatibility. You DON'T WANT to know what most of the other options are...
There should be a button somewhere to say you want a Hello World application. For your first time around, click that. It'll give you a basic project from a template, probably way too many files in the project than strictly necessary. All you have to do is go to the Build menu and compile, and it should Just Work (tm).
Then there's going to be a button or key combo to run the program. Do notice that a console window flashes on the screen and disappears immediately. The IDE can run your programs for you, but it will also helpfully close the window when the program is done running. After printing ""Hello World!"", the program is done running, so the screen closes. There's a key combo or something to keep the screen open until you choose to close it, that way , you can see the results. I don't know what it is off hand, but that's how you want to run your programs.
There should be a tree view of the files in your project. Go ahead and explore the files this template generated. Again, probably way more than you need. Look for *.h, *.hpp, *.c, and *.cpp files, and modify these to see what happens, these are C/C++ header and source files. These contain the source code. There are likely other files that, for a lack of a better description to a novice, ""do stuff."" I'd say delete everything from these file contents and start writing your own program but I fear this template may have come configured with precompiled headers (stdafx.h is a dead giveaway).
Create a new project and solution, a console application, but this time select a blank project and make sure precompiled headers isn't checked. There's a number of check boxes available, but less is more - if you don't need to enable stuff, let's just avoid that. You should have a basic project with nothing in it. In your project explorer window, you should be able to right-click and add a file. Add a main.cpp or something. Now you can begin writing code from scratch, your own Hello World.
You can also debug your programs in this IDE. On the left side of the text editor, where you're writing your code, you can click, and get a red circle. Now, when you run in Debug mode, the program will stop at that point. Through the IDE, you can inspect elements and watch the program execute - stepping into and out of code, statement by statement, line by line, until the program ends. So in the future, if something isn't working right, you can watch as it goes wrong.
This is, of course, the tip of the iceberg. There are lots and lots of options, lots and lots you can do. This should get you started.
And when you are having problems, come here and post your code. Be sure to format your code in a code block - the Reddit editor should help you with that. Try to ask as narrow a question as possible. That'll be hard at first, it's a skill you'll learn by trying.",,
"Visual Studio is as good as it gets on Windows and is good for an absolute beginner as well. There's a lot of features in the development environment, but you can just not use most of it. Setting up and working with GCC (the other good compiler choice) on Windows is way more work than just grabbing the the VS Community edition and using that.",,
"So there is a bit to untagle here. A compiler turns your source code into an exectuable. The IDE or text editor you edit that code is a different thing. It may be rather smart, using a compiler in the background, to give you hints on what is wrong while you type, give you contextual autocompletion and all the fancy things.
There honestly is nothing wrong with starting in a full fleged IDE. While it may be true that doing compilation and linking on the commandline do give you a bit more insight that really is nothing you should bother with until you got the basics. IMO its like learning how to build a car before you can even drive one (which is sorta lacking as an analogy, but i hope you get it).
On windows i would suggest to use Visual Studio (not VSCode), since ""it just works"". You select ""new terminal application"" and its all setup for you.
On linux its a different story. Installing a compiler and separate text editor is way more feasible. For compiler you have the choice between  gcc (or rather g++) and clang (or rather clang++), and it doesnt really matter which one you choose. For an editor/IDE you should def use something with syntax highlighting, for example VSCode or even just gedit. Another option would be KDevelop, which is a proper IDE, but would need more setup.
What you most def do not want to do is use anything like vim, emacs or any other terminal based text editor. You want to learn C++ and not an editor that will just be alien to you and not nearly as usefull.",,
On linux you could try qtcreator. It is a really nice IDE with or without using Qt.,,
"https://sourceforge.net/projects/orwelldevcpp/ 
is what I downloaded a couple of weeks back, I'm in the same boat as you pretty much. I'm not too sure what to look for myself as I'm a beginner too, but it works great for me! Everything looks nice and as for autocompletion I've never really seen it work. Probably possible to enable it, but disabled by default",,
"Start with VS Community. When you run into problems or you have questions, there’s almost always some solution or help online somewhere and MOST of the time that solution is using VS. 
There are other IDEs out there that work just as well. I use CodeBlocks. Why? My machine has to remain off network and because, Microsoft (I REALLY wish they would put out another edition that can install offline without activation). 
When you work with open source stuff you really have to rely on the community of developers that take a lot of their free time to work on such things for support unless you’re some kind of wizard. If you don’t really know what you’re doing (like myself), you find yourself stuck asking questions on forums where people just kind of push you off objecting to form. Or, sometimes they like to point out typos that really aren’t the problem and then tell you to go elsewhere. Kind of like that know-it-all kid from Polar Express. I should clarify, I’ve found that people on Reddit in this sub in particular haven’t had that same tendency. They’ve been way more helpful than other forums, so I think you’re starting in a good place. ;)
All of that being said, Eclipse is pretty good (I used it with Java for a class I took but haven’t used it with C++). CodeBlocks is pretty good (that’s what I’m kind of stuck with for my offline machine) and I’ve heard really good things about and would love to try CLion. If I were you I would go with VS if you can, just because of the disparity in the amount of online information you can find from people using it vs the other IDEs.",,
"Visual Studio is really slow for me, so if you have almost no knowledge, use repl.it for low level projects. (It’s free)",,
The best ones are msvc and gcc,,
"Start with the Nuwen distro of g++.
It's small and super-easy to install.
Maintained by u/STL.",,
"Although you talk about the command line, you seem to think about the IDE.
In order to play with small C++ programs as you need to do when learning C++, you need the go through the following steps:

Enter and/or edit a text file that is the C++ program. You'll normally store the file somewhere on your hard disk. Let's assume it is called program.cpp.
Compile the file, by passing the name of this program file to a compiler. In fact, many steps are necessary: preprocessing : takes program.cpp and processes it by reading all included headers, replacing all macros and stuff like that. If the result is written to disk this probably would have the extension .ii, for example the resulting file could be named program.ii. The next step is the actual compilation done by the compiler. This takes the preprocessed file as input and writes out an object file, which usually has the extension .o. Aka, program.o. Then it is the turn of the linker that takes program.o and possibly other compiled object files, as well as libraries (.dll files on windows) and produces the end result: program.exe.
Finally you need to run the program. Simple C++ programs won't use Operating System depending libraries etc, but will just use the standard C++ features for I/O: reading a line or lines from the keyboard (must hit Enter key to be able to read it) and writing character strings to... the ""console"" (or terminal).

When using a command line, you will have a window open that IS a console or terminal. This gives you a command prompt from which you can start your favourite text editor for writing C++ programs. You can type in the command that does step 2 (usually everything is done with a single command). And finally you can run the resulting .exe from the command line too.
Personally I PREFER the command line. I use it exclusively, also for the most complex projects. Of course I do not type all the commands in again and again; I use self written scripts and shell aliases and functions to abbreviate what I need often and to make my commands powerful. An IDE does the same, but then has a button for each such function. The downside of an IDE is that it is less flexible (often you can't even choose your own editor, but it has that builtin). It is more integrated though, for example the editor that they force upon you is aware of C++ and program structure, allowing a visual way to navigate the program (and provide completion etc). It might write your stuff to hard disk in a more black box kind of way though, writing a ""project file"" that isn't really human readable: you will always need that specific IDE to continue (easily) with your project.
A GOOD editor (read: (neo)vim) can do everything you want, doesn't require a mouse (everything is done by keyboard, which speeds up production a lot (a mouse is slow), and saves you from RSI:p), but has a very steep learning curve: in the beginning you'll be learning for weeks just how to use the editor (And you'll never really learn it all, it's just too much). Plus, once you get USED to vim you won't want to use anything else anymore, which makes it thus impossible to use an IDE anymore ;). I speak from experience.
If you use a simplistic text editor then you won't need to learn how to use it, and it will be easy to start using an IDE later on (it just won't be as fast). If you plan on coding 8+ hours per day every day for years to come, I advise you to invest time into vim though.
The command line compilers are basically all the same (as long as they are command line): it either works or it doesn't. The IDE will call the same programs, it will just do it behind the scenes, hiding all the details from you. That is fine, just click with the mouse and it compiles and probably even runs too, as long as it works. If anything goes wrong you won't have a clue what that is. Hence, getting practise with the command-line yourself is the way to go to become a wizard - also an IDE wizard.
I use only linux, and I'd say: use g++ or clang++. Those also exist for Windows, but I'll leave it to windows people here to advise maybe something else.",,
"Dude, I have bee. stumbling around inside visual studio solutions and c++ for almost 4 months now. I came from python on a mac OS sooo.... lots of new.
This cleared up a ton of the VS side though. Thank you!!!",,
Thank you so much for this in depth tutorial. I download VS and I backed away from it because it seemed too complex. I'm definitely going to give what you suggested another go now :),,
"I take minor issue with the last paragraph. It's not important if you are learning this as a hobby or expect to get a job where they are paying for an IDE. Otherwise, it's worth the time to learn a CLI editor as well so you can do your job. 
A lot of my job is on CLI, and the only way to learn it is to use it and pick up pieces as you go. I don't think I'm at the one weird company where CLI is still heavily used.
Basic vim/emacs is just a couple days of use.",,
"QtCreator is a good choice on Linux if you want something ""that just works"". Similarly to Visual Studio you can select ""New console application"" sand everything is there for you, including a cmake script.",,
"Another good IDE is CLion. At least on Linux, it just works (once your compiler is installed, of course, but that's just a single terminal command on Linux). It's a good idea to learn C++ on Linux to start with since the support for C++ on Linux is so much better than it is on Windows. Of course, you can do everything on Windows that you can on Linux with C++, it's just usually more annoying.",,
"Thank you so much for interpreting my question and clearing a few things up :) So as I understand. A text editor/IDE is the actual thing you use to write the code? And up to this point the ""code"" is just written text, that a machine can't do anything with? So the compiler takes the this "" english code"" and turns it into some kind of binary that the computer/machine can execute? 
​
So further more I understand that you can have the editor and compiler separate(easier on linux), where as something like Visual Studio is a ""package deal"". 
After reading this thread entirely I can't help but be intrigued by Vim and Emacs after hearing about it. Should I definitely stay away from this as a beginner?",,
"It's a tiny bit irrational, but I loathe devc++. I also loathe geany. More problems than solutions, in my experience.",,
"All taken on board. Visual Studio is definitely coming up a lot so I think as you said its probably definitely the best place to start with :)  I have heard of eclipse and codeblocks, I may have a look at these but as you said, as a beginner you need as some resources as possible to help you along the and VS ticks that box. Well I have definitely had a good first impression on this sub :) hopefully I can help people when I start to get to grips with it :)",,
"I like the way you think. Except for all that stuff about vim. You obviously meant to say emacs.
A command line interface is way better when you're learning in order to get a better understanding of how things work in the build process. And more powerful and flexible in general than a gui once you do know what you're doing.
A basic class in using a shell and its core concepts should be part of any programming curriculum. See so many questions caused by, say, not understanding what a current working directory is...",,
"I must ask, have you ever used an IDE?
You are aware you dont have to actually click buttons? Keybinds do exist. KDevelop even has a ""enable vim keybindings"" checkbox that i fear to enable.
You also are aware that an IDE is not a compiler, but infact a text editor with integrated development features? So that comment on it ""forcing an editor on your"" is pretty redundant. An IDE is and editor.
You also are aware that IDEs exist to integrate the compiler and its output into your editor, so you can e.g. click (yes, sometimes that is the better option) an error message in the compilation output and it takes you to that line? So im not sure what its ""hiding"" from you, that you cant find out what went wrong.
You also might know that you can (and should) use CMake, which your IDE then loads, so you are not tied to the IDE at all. Ofc your ide has to stores its own meta information somewhere, but that is not required for the project itself, its information about your setup on this machine.",,
Really interesting stuff. You've really intrigued with this. I'm not conflicted wether to go down the IDE route or as you say the vim route. I really do like the idea of learning and understanding everything thats happening under the hood. I do have a tendency of picking the hardest way of learning/doing things but that's always better and pays off in the long term. You mentioned g++ or clang++. Is this the vim that you mention? (0command-line),,
"No one should suffer for 4 months. This sub is much nicer than SO, so don't be afraid to ask. There are VS users on here, someone will be able to guide you through how to setup your next thing.",,
"I don't think I'm at the one weird company where CLI is still heavily used.

I'd beg to differ tbh. Using a terminal to compile/build is obviously fine and all and yes, people should definitely learn how to do that, but your comment strongly suggests that the entire work is being done in a terminal only. Which implies you have no graphical interface on your OS. And I'm sorry, but that doesn't sound like any normal (work) environment at all. Even in the few scenarios where you run code on a system without a graphical interface you wouldn't do actual coding on that system but rather do that on a normal machine (either by transferring files or via SSH or something similar). What kind of job are you talking about?",,
"Note that this post is me agreeing with you /u/sweenish182. Sorry for the rant.
Vim is fantastic and seems to get a lot of hate in this sub. I work in/on what is understood to be the world's largest monolithic software repo (not a toy project), and I am not alone at Google in preferring vim (not by a long shot). In fact, they have a stock vimrc that is really well tuned to our environment as a starting point.
When forced to use an IDE, the first thing I'm looking for is vim mode (and I'm very judgemental if it sucks [e.g., no support for macros]). With vim, I have code completion including parameter annotations and function comments, can jump around (e.g., to symbol decl or defn), etc. It works fantastically for me and many others.
The point I'm trying to make here is that terminal (or console) people are a thing--we work in all levels of industry. I am one of those people, and we are not even rare.",,
"A text editor/IDE is the actual thing you use to write the code?

In principal, yes. Nothing stops you from writing your code in notepad (apart from your sanity ofc). An IDE is more than that. It interfaces the different parts of development together, giving your access to the compiler and its output from within the ""editor"", allowing you to debug and stuff.

And up to this point [..] can execute? 

Correct.

So further more I understand that you can have the editor and compiler separate

Yes. These things, just like the term IDE, are not as clear cut. Usually editors and IDEs are developed by separate entities.
VS also has a bit of a special role here. You can use VS without the MSVC (the compiler) that comes with it, and you can use the compiler without VS, but really VS as an IDE is way to good to do that.

Should I definitely stay away from this as a beginner?

Starting off in a command line editor just adds a step to the learning curve that doesnt get you anything at that stage of learning. Would you rather be confused by how to navigate your editor, when you already are used to just being able to click where you want your cursor to go?
Personally my advice would be to avoid these things (like the plague, which btw is fairly well treatable...). Do not actually develop in command line editors. You should know how to use them to a certain degree, just in case you have to. But in the end modern tools are 1) superior if mastered to the same degree as any command line editor buffed up with a dozen plugins (at that point its just an IDE in the command line anyways) and 2) way easier to get into and setup.
That doesnt mean you shouldnt have an understanding of how compilation and linking work, but thats like learning higher forms of poetry before you can speak the language.",,
"Sure, why? For me it works fine",,
"Thank you ;). And yeah, the old emacs <--> vim war is fought with a chuckle between friends. I never used emacs at all by the way, so wouldn't have an idea. But the generation brought up with Windows, who indeed don't understand what a current working directory is, ... The difference between CL and GUI is just too large. Different worlds imho.
PS, if you are using linux and bash, you want to use my cdeh system ;). You REALLY do. https://carlowood.github.io/howto/cdeh.html",,
"Per paragraph,
yes - that is, I tried them out and they did NOT offer to use vim. There is no such thing as vim-keybindings imho (although at the time I tried these IDE's they didn't even offer that): if you want vim you want all of it.
Of course, but reaching for ctrl-shift-F11 is still harder than what vim offers. I find key bindings that use control, shift, alt, super or the F* keys hard (slow) to use, too, although not as slow as a mouse of course, but we're talking about jumping back- and forwards through the text, selecting text to move it around, things that are used too frequent to spend half a second on.
I can do that with my ""command line"" setup too. Of course it is a crucial feature to be able to quickly open a source file at the place of an error that the compiler just spewed. And so is being able to jump directly to the declaration or definition of whatever is under your cursor. Vim doesn't have that built-in, but it is so extendable that you can use other tools to support it (I'm using ctags). It might be harder to set up, but it is also more customisable as a result I think.
I guess I have indeed not enough experience with IDE's. But the fact is that that is because every time I tried them, I hurried back to the command-line. The main reason being that I can't work (efficiently) with another editor than a full-blown vim (now using neovim). It SHOULD be possible to ACTUALLY support that imho (although I read that one of the reasons for neovim is to make this possible, so apparently it wasn't with plain vim). The second reason being that I want a separate window for everything. A single window that got split into a lot of little windows is like an application that tries to be its own window manager?! Not to mention that I don't need all that ""info"", it just takes screen space :/. I think that it is possible to write an application that should be called IDE and does exactly what I want, but I haven't seen any yet that comes near that (last time I checked was 10 years ago or so, so maybe things have finally improved).
Bottom line, I don't think that an IDE offers anything except a menu and other clickable things to ""configure"" your project (Aka a GUI). I have never had a need for that though (plus I hate menu's). I configure my projects in (text) files that I edit in vim. It is certainly true that my setup is something that has grown over many many years, not something a newbies could to set up in a week (unless I'd write a HOWTO, then it shouldn't be a problem to start using this system).",,
"g++ and clang++ are compilers, they come with preprocessor, assembler and linker too.
For larger projects, that is, anything larger than a single source file that You'll start with for the earliest learn cpp cases, you also need a ""build system"", this is the part keeps track of which files need building (generating, which includes compiling .cpp sources) and how, in what order etc. So you can just say ok ""make"" the project, building everything that needs (re)building. The build system is often very complex, so much so in fact that you usually generate it.
Anyway, I can only tell you how this works on linux :/. Here, next to configuration files, one can use environment variables (although also these are often given a value in some file of course) and command line parameters to tell the build system generator how to generate the build system, then to tell the build system (additional) how to build the project, and finally tell the created application how to run.
There are many build system generators, but the industry standard is currently pretty much cmake; there is also ""autotools"" which has its roots in pure UNIX (or rather POSIX) and therefore a lot less suited for cross platform building (it is possible, but harder to set up and maintain). Also, autotools only support 'make' (and Makefiles) as build system, a single-target build system (where target means ""build for debugging purposes"" or ""build a release version"" etc), but there are more build systems, also multi-target ones (here you'd tell the build system (when building) if it has to make a debug version, a release version or both), and cmake supports those too.
Calling an IDE an editor is incorrect imho. An IDE tries to integrate everything: the editor being built-in I guess (because of the extreme integration that is necessary) but at the same time it provides the GUI to configure the build system generator (still cmake, or the likes) and fire that off from within this GUI. I am sure it provides as much sane defaults as possible, while also allowing to configure everything differently. It can even provide the terminal that your application runs in (Aka, intercepting its output and then displaying that in some window of the GUI).
The CLI (Command Line Interface) route keeps everything separated and doesn't provide a GUI to wrap all of it and make it look like a single application. You'll need the following things eventually thus,
1) any text editor
2) build system generator
3) a console or terminal application to run everything in / from
You should probably start with being the build system generator yourself (aka, don't use one, type it yourself).
If your pick for build system would be ""Makefiles"", then that means you'd have to write a little Makefile. But, before doing that I'd start with executing the build commands yourself even from the command prompt.
It would be nice if your text editor supported syntax highlighting and allowed you to quickly navigate around all the sources etc. That rules out most text editors. While vim can do almost anything, most of it needs manual configuration (I'd like to get that .vimrc file that Google is using, as another person said here). I wrote a HOWTO how to get TrueColor syntax highlighting with vim using custom colors and patterns (I'm even using ctags to generate syntax highlight config stuff).
So, using vim, cmake and having a terminal with shell and command line open, a typical edit/compile/test cycle would look as follows:
$ cmake -S . -B build   # generate build system (Makefile's)

$ vim program.cpp       # make changes to program  
$ make -C build         # compile/link program  
$ build/program.exe     # run application; afterwards go back to 'vim program.cpp' to repeat cycle.

But your commands will instead look like this at first:
$ vim program.cpp       # write / change program code  
$ clang++ program.cpp -o program.exe   # compile/link program  
$ ./program.exe         # run application and repeat.

And only once you get tired of typing the clang++ command learn how to use a Makefile. And once you get tired of writing those, learn how to generate them with cmake.. And once you know that, consider using an IDE to integrate it all.",,
"One where the code is is on a server that you ssh to only after connecting to your remote desktop which can only be done after connecting through the company VPN. That's not to say I don't use a GUI editor, I use VS Code 90% of the time. But that other 10% is vim, and all my git stuff is CLI (we don't pay for a GUI git client, we have smartgit. I hate smartgit). All build and test commands are 100% CLI (scripts invoking build containers and all that jazz).
I will be the first to admit that we could do with some more modernizing (but we do have some great CI/CD infrastructure), but so could any company that's been around for a while. 
We are at least using C++14, will soon be investigating C++17, and I am leading the charge on making clang tools more prevalent in our day-to-day, starting with clang-format. 
Most of our devs still proudly use vim, and they're only lacking a couple features when it comes to linting. ctags are stupid powerful. This being a sub for C++, I'd expect more than you think still do a LOT of work in CLI land. 
Also note, I'm not in full disagreement mode here. It depends on what the goal is. Just for fun, hobby, etc., I think you could safely ignore the CLI. But if the goal here is an eventual career, you need to be competent with a CLI. Expert, master? No. In the same way that I don't know how to do everything in MS Word, I don't know how to do everything in vim, but I know enough to edit a file and do basic operations. And being able to put both on a resume beats one, especially if that one is just a GUI.",,
No auto-completion but it works fine? Sure it does.,,
"Forgive my cynicism, but you are one of these people who turned their command line and command line editor into an IDE with a dozen plugins, scripts and whatnot, but now tell people that IDEs aren't the way to go.

they did NOT offer to use vim

Again, an IDE is mainly a (smart) editor. What would ""using vim"" inside another editor even mean???

if you want vim you want all of it.

That may be true, but very obviously is only an argument for people well versed in vim. I dont even know what ""all of it"" for bare vim means, i dont think its a lot. The same probably applies to most command line editors.

Of course, but reaching for ctrl-shift-F11 is still harder than what vim offers.

What exactly made you stop in the settings right before opening the keybind menu? Thats a thing, right? And as you rightly point out shortcuts like this are too complex for common things - which is why that most likely is not the shortcut for e.g. ""build"".

I can do that with my ""command line"" setup too.

See my comment above. The point of the IDE is to not require any setup for this. It will simply build a syntax tree of the project and be fully aware of anything, without needing to add plugins or tags.

But the fact is that that is because every time I tried them, I hurried back to the command-line. 

Again, nothing wrong with that. But as is clear by now you did spend a lot of time doing setup and whatnot and most crucially are used to your personal environment for a long time. A start in bare vim is about as good as a start in bare gedit or notepad++. Hell npp might be better since the never versions actually know c++ and can autocomplete.

A single window that got split into a lot of little windows is like an application that tries to be its own window manager?!

Taking Kdevelop as an example, you can detach all parts of it. It also starts in KDE so make of that what you will xD

Not to mention that I don't need all that ""info"", it just takes screen space 

Then maybe, just maybe use a fraction of the time needed to add plugins to vim to just remove toolviews from the IDE you dont want to see? I fully agree its stupid every editor has a big fat ""Save"" button in the toolbar, but that doesnt stop me from just removing it.

Bottom line, I don't think that an IDE offers anything except a menu and other clickable things to ""configure"" your project (Aka a GUI)

Again, which the exception of VS and their solution files (and i guess there is a way to use these without VS), there the build system/project configuration has not much to do with your IDE. I can setup a CMake project and use it without KDevelop/CLion/VSCode/... But i can also import the project into my IDE and have all the features ^TM without any setup required.",,
"So in the end we are around at not starting out with command line editors, because those would add a step to the learning curve that just doesnt need to be exactly there.
Sure its not hard and all, but its completly alien to anyone born after 1980. Especially when OP mentions word pad as a reference.",,
"Ah that way, welp the guy asked for it. Good to hear it's not anything else weird within the ide, but I'll look for other options!",,
I once opened a file in vim. Couldn't figure out how to exit out of it for 30 minutes.,,
"At the end, I landed on it depends. And my big caveat was that if you want a job, you should learn CLI. Hardly the same landing spots. Also, I was born after 1980.",,
The only reason I’ve ever used vim is because it’s the default editor that git shoves you into if you forget a commit message or have to resolve merge conflicts. I have to look up how to get out of it every single time.,,
rofl,,
"I never said you shouldnt learn command line, or at least i hope i didnt. You most definitely should. Knowing the basics of a command line editor would be included in this. My point is that starting out in one makes everything harder than it really has to be.",,
I recently started using Visual Studio. The community edition is free,,
Qt Creator.,,
"Take a look at Qt. It is free, very competent and supports multiple targets.",,
"I like using GVim straight or an IDE with vi bindings.
It sounds like you are on a Windows machine. I would recommend to just use Visual Studio at the beginning, it will let you use a similar environment if you are interested in using any other of the languages it comes with.",,
Visual Studio works pretty well,,
"I enjoy CLion. Can't comment on it much, though. I haven't used many IDEs.",,
Emacs.,,
Visual Studio 2015 :),,
VS2015 because I use it at work.,,
QT Creator on linux for me after years of using Visual Studio on Windows.,,
[deleted],,
Xcode. Simple and works. Visual studios has been a pita at times for me.,,
roxterm + zsh + cmake + (neo)vim + one or two shellscripts,,
"Code::Blocks
But usually just go with makefiles
Xcode is better than visual studio, but it's on Mac which I only use for work so I find it useless. And in general I consider visual studio and xcode over bloated",,
"vim with a load of plugins, most prominently 

youcompleteme (autocompletion)
omnitags (tags)
fugitive (git)
pyclewn (debugging with gdb)
Ctrl-P (file opening/navigation)
vimgrep",,
"If you're on Windows, use Visual Studio. If you're on Linux, pretty much any text editor will do. I like Atom, though lots of people say it sucks for some reason.",,
Clion by JetBrains very intuitive.,,
"Sublime is killer, but to be clear, it's a Text Editor, not an IDE.  Same goes for Vim/Emacs, Notepad, Text Edit.  IDE's typically restrict you to the language the IDE supports whereas text editors allow you to code more efficiently across all languages.
In Simple Terms:
IDE's are nice because of code completion
Text editors are nice because they make editing text (read code) more efficient.  Some allow for code completion too.",,
"Bash.
That's right, I consider the command line to be an IDE (the environment that integrates my development tools).  It might not be for everybody, but it's certainly my favorite.",,
I use eclipse. Like any other tool it takes some time to learn before you can make proper use of it. Clion is also a very good IDE but you need a fairly new machine otherwise it may feel slow. If you like to compile the editor yourself you can try juci at https://github.com/cppit/jucipp.,,
Qt is the toolkit/framework. Qt Creator is the IDE.,,
+1 for vim or Xcode + Xvim,,
Hands down the most intuitive.,,
"Me too.  
Whoever downvoted you can kindly fuck off.  Emacs has a great set of tools for programming in C++ (as well as C, Python, and various Lisps).
Edit:  downvoting people who reply to a question about which IDE they use to write C++ because they don't use the same tools that you use it simply childish.",,
"Linux is an operating system designed around ease for developers. Getting a development environment up and working in Linux is trivial. Getting a development environment up and working in Windows is a dark ritual filled with blood and horror, even for experienced Windows developers.
But at the end of the day, each person will have the easiest time with the platform that they're most familiar with, for better or worse.",,
You may be the only person I've ever heard that thinks Xcode is better than anything at all.,,
can you debug in that?,,
"The build tools an lack of debugger integration make it inferior to gedit, vim or emacs with the right plugins.",,
"I can write code in emacs, compile it, run it, debug it, read documentation, interact with version control... it's an IDE.",,
How to you edit text?,,
"Just curious, but could those with insigt elaborate on why it is being downvoted?",,
"I can't deny that, no.",,
People are silly.,,
Don't take them for serious. Small children do that when someone else proved them wrong or said something that doesn't fit into their close-minded brains...,,
"It took me longer to install OpenCV than to learn to write code using.
My $PATH is the biggest mess in the world right now. GOES EVERYWHERE!",,
"Look, he's being a bit dramatic wrt setting up a Windows dev  environment, but once you understand Linux and the GNU tools, it really is a breath of fresh air.  The flexibility it provides simply cannot be matched by Windows.",,
"I've long extolled the virtues of Xcode. In general I find its UI to be better than other IDEs such as VS. VS has been getting better over time though. Here's a post of mine that gives some examples.
On the other hand while I've had my share of VS crashes, VS has seemed to be generally more stable than Xcode.",,
"Yes, fairly well. Clewn provides ex commands to control the debugger, like :Cnext or :Cwatch. 
You can bind those to shortcuts:
map &lt;M-n&gt; :Cnext&lt;CR&gt;
map &lt;M-p&gt; :exec ""Cprint"" . expand(""&lt;cword&gt;"")&lt;CR&gt;

It can also use buffers in windows as watch lists and such. 
You lose completion, I can't just press <tab> to get symbols autocompleted, but it works for me.",,
"cool story bro.  good job reading their website.

GNU Emacs is an extensible, customizable text editor—and more.

It's a text editor just like Vim, Sublime, Text Edit, or any other text editor.  It happens to have features that allow you to do more than just edit text.  Still a text editor though.",,
ed.,,
echo and grep are all friends you will ever need (ok zsh too because bash is no fun).,,
"vim, one of those development tools.",,
"I can't tell if you're referring to Linux or Windows.
On Ubuntu, it's literally as easy as
$ sudo apt-get install libopencv-dev",,
"All you have to do to get Visual Studio running on Windows is going to visualstudio.com, downloading the installer, then running and clicking through it. Then you let it work for a little while and that's it. That's how you get the, imo, best IDE out there.

You forgot the mandatory registration. It took me several hours to get through that process several months ago. As someone who has been programming for decades, this was immensely frustrating, especially when I was juggling multiple accounts at the time. If my sole living grandmother were to try this, she would have given up at the installer, if she managed to live through the wait.",,
"Also, I guess I should respond to this:

Besides, all zach2good said is that OP should be using Visual Studio on Windows if that is the OS he's using.

I might have misinterpreted their original post. I thought they were saying that using anything besides the combination of Visual Studio and Windows is making your life hard for no reason. If your interpretation is what they meant, then I do withdraw some of the vitriol from my original post, but I don't withdraw any of the sentiment.",,
"I never said anything about installing Visual Studio. Of course that's trivial. Setting up a development environment is entirely different.
Windows development is no big deal if you want to work with a completely monolithic code base, but I would argue that anyone with a modicum of self-respect should rather draw from existing packages, and because of that their projects will have multiple dependencies on third party libraries. Getting several third party libraries to work together and link together on Windows is hellish. I say ""is"" present tense, because I work on cross-platform libraries where I have to support Windows.
The dark ritual involves figuring out which mystical combination of /Md /MD /MT /MTd /LD flags you need to give each dependency in order for everything to cooperate. Or figuring out whether VS can't find your library dependency because of your $PATH variable or because of some project configuration variable buried deep in Settings -> Tools -> C++ -> Compiler Options -> Linker Settings then scroll through nested tabs and throw a dart at your monitor blindfolded.
Compare that to Ubuntu where handling dependencies is literally just
sudo apt-get install libname

and there's just no competition in the eyes of anyone who values their sanity.",,
"I've had them both crash multiple times. Every time i turn on my mac at work and run xcode for the first time there's like 95% chance it will crash. VS crashes on random when i had to do some work for uni, mostly just putting code inside a vs project because they wanted it to be a vs project. 
I just don't like IDEs in general, usually they try to do too much when i need only one or a few things and thus, for me, it ends up an overbloated piece of garbage. Last time I updated the work laptop os, my xcode stopped working, then i updated it, then it started crashing and i had to reinstall it, that took me like 1-2 hours (because it weights like a fucking triple A game, not to mention that apple store is complete trash and can't download at full speed most of the time). When i had to install VS on my home pc for the first time it took me like 1 hour because my internet is slow and because somehow I managed to skip instaling c++ compiler. This shit is ridiculous.",,
What does an ide do that it doesn't?,,
Then the answer would be VIM not bash.,,
vim is my favorite editor when I'm on FreeBSD and Linux. But bash will probably not be what most consider an IDE. But I get what you mean. :-),,
Windows.,,
"handling dependencies is literally just

You can argue that in VS handling dependencies is Install-Package libname. Though that is just as multiplatform as apt-get (not very).",,
"most IDEs provide built in templates for managing projects, creating test code, and other features related to programming in whatever language the IDE was built around.  Emacs, out of the box, with no configuration, does not compile, run, or test code.  You have to set it up to do so with add-on features.  An IDE such as Netbeans or Visual Studio come setup to do so out of the box.",,
"No, it's not.  Vim is not an IDE, it's a (very advanced) text editor.  Though the line is blurred, since Vim can integrate with the compiler, build system, etc. to some extent.",,
"There was zero feedback as to which account I was logged in with. Because of that, I ended up going through the registration process four times before I started over by logging out of everything I could find.
It turned out that there are three separate logins tied to a single account when you go through that registration process, all independent from each other, but changes in which are reflected in the first account you happen to be logged in as.
It's worse than Google's multi-account login, except at least Google shows you something you when you try doing something that affects the wrong account.",,
"Sadly, Nuget doesn't have nearly the level of comprehensiveness that aptitude has. I would LOVE to have a comprehensive and reliable package manager for Windows. That would completely turn around my opinion of Windows development. But so far no one has been able to point me to one.",,
"Comparing that to what you have to do on Linux

The Linux equivalent of installing Visual Studio is to download and install Qt Creator, so your followup post here is disgracefully hypocritical.
Qt Creator has intellisense, graphical debugging, valgrind, and a UI designer all built-in and completely free. It has everything that Visual Studio Community offers, in a much cleaner (IMO) package.
Or if you want to pay for a more advanced IDE on Linux, there's also CLion (although I personally would not recommend it, because I found it to be very slow for large scale projects).
Edit: Also, I should add that Qt Creator has far superior support for CMake than Visual Studio does, so that could save a beginner a hell of a lot of headache. And even better for beginners is QMake which is far and away the easiest build system to use (but it's admittedly very limited in terms of features, which is why I generally prefer CMake). Conversely, the Visual Studio .sln build system is the grossest thing I've ever had the displeasure of needing to use, and I say that as someone who has had to use autotools < shudder >.",,
"M-x compile, etc.",,
I stand corrected.  Still not an IDE.,,
"Without even trying it

So you're making conclusive judgments about things you've never even tried. I've actually used both, and I've found Qt Creator plus Linux to be an overall better development experience.
I won't deny that there exists ""better"" intellisense than what Qt Creator offers, depending on what kind of metrics you use. For example, CLion has far more comprehensive intellisense because it uses a stronger code model; in particular, it offers much more complete intellisense for templates than what Qt Creator does. But I don't use it because that stronger code model takes much longer to build up and causes the whole editor to do things slowly. I've run into this issue with Visual Studio as well, where the time it takes to parse the code model results in frequent hiccups which impact my productivity. So in that sense, Qt Creator's intellisense is better for me, because it's not as taxing and gives me what I need 95% of the time, which is good plenty.
Now you'll probably argue that beginners won't be working with giant code bases so that's a non-issue. And that's probably true, but that still has nothing to do with why I recommend Qt Creator for beginners. I recommend it because I find it to be an overall cleaner and simpler experience than Visual Studio. I find it easier to get going, easier to find all the settings you'll ever need to find, and more compatible with a wider range of third-party libraries (especially open source libraries, which is a main focus for me).

VS is widely accepted to be the best debugger out there

This is purely a matter of opinion, not fact. I've never struggled to debug difficult problems with the Qt Creator frontend for GDB, and I've never found Visual Studio to be any more helpful than Qt Creator + GDB.

I'm just going to stop responding now

I won't lose any sleep over this.

all you do, and did from the start, is arguing for the sense of arguing,

My impassioned arguments come from hours and days of accumulated frustration over getting basic shit to just compile under Visual Studio's terrible build system. If you haven't had to suffer through that, then I can only assume that you've never tried to put together a particularly complex project in Visual Studio before. Even just getting a Visual Studio project to link to Boost has been a headache on numerous occasions.

without even reading properly

I admit that I may have misinterpreted the original parent comment. Other than that, I think my reading performance has been satisfactory.",,
qtcreator,,
emacs does everything I need in an programming editor.,,
"I really like KDevelop. Nothing beats it's highlighting and integration with CMake. I recently had some problem with it (due to a crash in clang) but otherwise it's a great ide.
I also tried QtCreator, which also have a great integration with CMake and it's recent integration with clang makes it even better (but suffers from the same clang crash).
That said, I've been told that as a power user, a good vim setup with the right plugins is hard to beat.
Edit: typo",,
"I've been using CLion for the past 6 months or so. It requires a license and it's early days, so there are bugs. But it functions very similarly to IntelliJ which is hands down the best Java IDE on the market.",,
VS Code is fantastic.,,
+1 Clion.,,
I used to use Clion. It is good but it is not free for commercial and the licensing is yearly basis. Move to Qt Creator. Its free with decent tools and finctionalities.,,
CodeLite is an actively maintained and feature-rich C++ IDE. It's similar to Code::Blocks but easier to use and works better out-of-the-box. I used to use it for my C++ development but moved to VS Code with mixed success. I strongly recommend checking out both CodeLite and (for a less visual-oriented IDE) VS Code.,,
My recommendation - CLion. Its paid but if you are investing a lot of time developing in C++ on Linux then its worth it.,,
"As already suggested, give VScode a try. It's pretty much Atom but more stable. I only used Atom for about 5 months last year and it felt like in pre-alpha, although it had a lot of potential.
Atom used to crash when opening large projects, as well as when adding some plugins. I think VScode have never crashed yet and I've been using it for about 10 months. I've even changed Notepad++ by VScode in Windows.
What I love about both Atom and VScode is the versatility they have adding plugins. You can configure them as whatever you want much easier than in classic IDEs (I've never tried CLion but people say it's awesome).
VScode is greatly integrate with Git, for example. And you want to edit some extra Python files? Just add 1 extension and quickly reload it to have syntax highlighting/error checking for Python.
Besides that (completely personal preference), I find the GUI very comfortable and really 21st Century, not like Eclipse for example.
The only thing I miss is more easiness in indexing files, although I have to admit that working with embedded I had terrible times configuring Eclipse in the past as well, and I blame the project structure more than the IDE in this particular case.",,
"If you are looking for the best out-of-the-box experience, without any configuration necessary: CLion.
If you are willing to google a bit and install a couple of plugins and edit 1-2 config settings, then VSCode is a really good option too.",,
"There are some options today, and you will get at least these, but even more suggestions:

Qt creator
CLion
eclipse CDT
KDevelop
VS Code with the C++ addon

You can try them all, a subset, or pick one and stuck with it, that's up to you
​",,
"You can pry Kdevelop from my cold dead hands. What a fantastic piece of software. CMake and gdb integration are just perfect, I've used it for years and do not really miss anything.
Before this, I used Qtcreator and that is a very comparable package. I prefer Kdev because it integrates well with KDE which is my DE, and I don't use Qt libs nor make Qt guis (when I do, I'll check it out again).
Quite frankly, I think Kdevelop is not very well known and quite underrated.",,
"Hey man you might want to give Emacs a try. It has a steep learning curve, but it's something worth mastering. By that I mean you will be much more productive and will learn a lot more. Also vim is a good substitute, but Emacs is in my heart. There are a lot of tutorials all over the internet how to integrate Emacs with cmake and many other things to make your life easy. 
Happy hacking!",,
eclipse is very nice imo.,,
Eclipse CDT,,
You might want to try the lightweight C++ IDE juCi++. It is also one of the few IDE's that is written in newer C++.,,
I would recommend trying VSCode with cquery or ccls,,
"For C++ look hard at Qt Creator (and I say that as a VS Code fanboy for non-C++ work).
It’s very subjective, though. VS Code, CLion, Qt Creator, Emacs ... try them all, pick the one that feels comfortable.",,
Nothing could beat Clion now. Otherwise invest your time in learning Emacs - be warned it is a life-long investment.,,
vscode + cquery,,
"I used NetBeans and Eclipse. There's also Cevelop, build on eclipse (https://cevelop.com/)",,
"cquery, a language server for C++ offers advanced IDE functionality to any editor that speaks its protocol. Many editors have plugins for it: emacs, VSCode, vim... I use kakoune myself.",,
I also use atom/terminal.  What's missing from it?,,
"If you are using cmake, ive found vscode to actually be an excellent c++ ide on linux",,
"Well to start out with there is one I can safely say you need to stay away form and that is Eclipse.   Eclipse consistently breaks itself and has done so for me on Linux, Mac OS and Windows.
You may already be past this level but it never hurts to learn to program using the command line and a text editor like VIM.  
As for IDE's and more advance editors you actually have many choices out there.  Examples:
Geany
Anjuta
Code::Blocks
EMACS
SciTE
These are not mentioned extensively here but worth your consideration.   
I should note that many of the free IDE's or advanced editors out there are very buggy in my opinion.   If you want reliability turn to software that has been around for awhile such as EMACS.",,
I really like SlickEdit IDE. It is very zippy especially with large projects (30000+ files) where I found using Eclipse was very slow. It does code indexing very quickly and I find it very easy to use and intuitive. And whenever have any questions about it the forum is monitored by the developers/enthusiastic users and they are very responsive.,,
Check out Visual Studio Code,,
codeblocks with the plugins package,,
Visual Studio 2017 remote development\debug\compilation,,
"Atom, afaik, isn't an ide, it's just a very nice text editor with more tools
Try codeblocks or Eclipse, I'm loving em",,
"also, don't use the QtCreator version in the ubuntu repos. Even in the latest Ubuntu releases it is fairly outdated. Use the official Qt packages instead : https://www1.qt.io/offline-installers/#section-11",,
"Same here. I haven't found another editor that's as fast, has the features I want and also allows me to disable features that I find annoying. I have a customized .emacs file I've been carrying around with me since the mid-90's. There's surprisingly little in there, though. Mostly just a function to do vi-style paran matching in the editor buffer. I've used a lot of editors over the years, with my two favorites still being emacs and vi.",,
"my problem with emacs is that you can program it. ""I'll automate this with just a bit of this elisp"". A week later I get back to what I was working on :)
​
fwiw, I've been using it since the 80s. It's very useful and flexible.",,
"emacs can turn off those attached to mouse interaction and those who want a ready, out-of-the-box experience.
That said, after putting in the time to learn it and customize it, it allows you to run circles around VS Code, QtCreator, etc..  
For intellisense look at cquery or ccls (forked):
https://github.com/cquery-project/cquery
https://github.com/MaskRay/ccls",,
But op is looking for an IDE. Can you debug with emacs? Editing is only half of the job...,,
[deleted],,
"Fellow KDevelop user. Both at home for Python and at work for C++.
Unfortunately clang seems to crash on our source files in any version above 5.2.0 for some reason (but only when running the appimage). I really want to upgrade though.",,
Could you elaborate on the vim setup? I’ve never heard of that term,,
I love KDevelop with its great array of plugins to help with productivity and catching bugs early on. One problem I have with it is the dark theme isn't the best and that there aren't a lot to pick from. It's low priority issue but I hope it gets fixed eventually.,,
"Honestly, vim is not great compared to qtcreator. YCM requires generation of an extra configuration file to work correctly with headers as the compilation database is not sufficient, and you need a different tool like rtags to be able to follow links. Rtags can be restrictively slow on larger codebases though as it takes hours to index all the files. Clangd based plugins also rely on the compilation database which makes it unsuitable for jumping between header/source and interpreting headers in general. Qtcreator's interaction with cmake server mode and the clang code model make it more reliable than any vim plugin. The only advantage of vim is the key bindings which almost every IDE and code editor supports nowadays anyway.",,
What sort of cmake integration does it have?,,
"CLion was going to be my recommendation. It has native integration with CMake which it uses for it's code completion. I've only made small networking projects using it but JetBrains git features are a godsend for simplifying the VCS model. It's worth noting I also use a Vim plugin on CLion/PyCharm/IntelliJ which is absolutely fantastic.
CLion is, as mentioned, a licensed product but it's free for hobbists.",,
I use Clion because I have an open source jetbrains license and I'm used to intellij and pycharm,,
"I recently decided to give VS Code a chance. I find it less user friendly than other IDEs I've tried such as Eclipse or QTCreator.  Also not a fan of their ""tasks"" system.",,
"I really love VSCode.
I've been using it from the beginning and the tooling has become so much better.
The CMake plugin (props to /u/vector-of-bool) has really matured and from my point of view covers most use cases.
cpptools plugin was a little hard to configure in the beginning, but now works very well and integrates nicely with the CMake plugin. Sometimes I have some performance issues with intellisense though (but that's on my VM).
Works even nice with SCL environments on RedHat/CentOS.",,
"I've tried a few VS Code versions in the last couple of years and never managed to get the C++ plugins working, always had some issues with code navigation or bogus compile errors.",,
"I know this is old. I tried to use KDevelop but it felt somewhat lacking and not as mature as other IDEs (or even text editors with plugins such as VS Code).
Just as an example, I want my editor to have a nice color scheme that I like, and KDevelop doesn't have many of those. There aren't many on the internet made by the community either so you're kinda stuck with what the IDE offers.
Also, I found the autocompletion a tad ""bloated"". Like, when I start typing it pulls out all sorts of symbols and macros which I know nothing about (I'm guessing from the standard library).
I switched to QtCreator after literally 3 minutes of use :/",,
"+1
Investment in your tools multiplies productivity.",,
How does CLion handle new and/or complex Code ? Last time i tried it it had problems with code that is not trivial.,,
"checkout ccls too. Which is a fork of cquery which makes use of C++17 features, has less third-party dependencies and slimmed-down code base.",,
Doesn't it run on Wine anyway?,,
"Correct, atom can be converted into an IDE but all of my compiling is done through the terminal",,
"Emacs supports mice just fine, and is ready out of the box? Only change I've ever made from the defaults are a keybinding to run the current buffer through clang-format.",,
"https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html
(That's a yes)",,
"I want to like KDevelop, but I find the UI distractingly busy. QtCreator has one of the best UIs of any IDE I have ever used. I really wish it did the inline integration stuff that KDevelop did though.",,
"We'll see with clang 7.0.0 how things goes. I reported the bug but if it's in clang, it's harder to fix and updates are show. Also, it's good to know which appimage works, thanks.",,
"Vim is a very popular, and can be a very powerful, text editor. But, out of the box, it is only a text editor. There are numerous plugins to give it IDE like abilities.",,
"Vim is a command line based text editor. It is known for being beginner unfriendly, but really powerful when mastered. I'm personally okay with graphical based IDE.",,
"What do you mean the dark theme is not the best? I'm working using the dark theme for years! Here's a screenshot of my dark setup
I only selected the breeze dark scheme in the color theme, and tweaked a bit the color schema of the editor.",,
"Vim is an editor, so we are not comparing apples with apples. But if the user wants IDE capabilities in vim, Language Server Protocols are the way to go. For c++ in particular, cquery has been working really good for me, including completion in headers. Clangd has a bright future, but not as mature as cquery right now (I tried a few months ago).  

The only advantage of vim is the key bindings which almost every IDE and code editor supports nowadays anyway.

Nah, not close to reality, try to see a video on how to use vim by a power user.",,
"Well... The parsing is done correctly using the compilation database, there's also a full configuration and cache editor, and the whole project configuration is done through it.",,
You should try CMake plugin.,,
"I have used both Qt Creator and VS Code fairly extensively, and can't think of a single advantage that Qt Creator has except for native integration of qmake and graphical .ui editing.",,
Its not IDE though,,
Try reinstalling them? I've never had this issue,,
"Yea that's the thing I was mentioning - last time I tried it was similar, but it was 6+ months ago. It may or may not have gotten better since then - not sure!",,
"I mostly work with legacy code, but so far it is doing well, recognizing lambdas etc.
Sometimes coloring is broken for a while on a heavy-templated code i.e. using boost::msm.
To format the code I'm using clang-format anyway, but build-in formatter works just fine.
Hints about unused functions etc are not always accurate but extremely useful anyway.
In general just give it a try, it greatly improved my productivity working with the C++ code.",,
"Never heard about it, and will check it out today! Seems much more active then cquery.",,
"Thanks, gotta give it a go for vs code.
Developer himself maintains AUR packages (tagged + git), very nice!",,
VS Code has native integrated terminal. Atom can have it via a plugin afaik.,,
"I'm not sure what you mean, you're entirely in control of the buttons and panels shown at any given time.",,
Funny thing is that when used without appImage everything seems to work. Might be a problem with the packaging.,,
you can enable vi-keybindings in both qt creator and kdevelop to get a taste of it,,
"You are vastly understating it's perceived difficulty, no other editor feels the same, it is super weird if you haven't been exposed to something like that.  I would highly recommend he watch many tutorials on VIM to get used to it",,
Thank you very much,,
The color scheme of the text editor isn't to my liking. I like softer colors that match closer to a material palette.,,
"full configuration and cache editor

Full configuration editor? What do you mean by that? My laptop is Darwin and their Darwin release crashes looking for a library not included in the package, so can't check it out right now.",,
"can't think of a single advantage that Qt Creator has 


Code completion is better (Microsoft C++ plugin never worked for me, both cquery and clangd are still incomplete).
Memory view during debugging.
Little things like showing the type of auto variable.",,
I don't disagree with that. I'm still getting used to VS so take my opinion with a grain of salt,,
"These extensions (cpp extension, clangd, cquery) became much better in the past half-year, especially if you have compile_commands.json",,
"Yes, and it also has slightly more features. Checkout the wiki page
I use it with emacs and it works damn well",,
"Yeah, it is possible to configure it to not be as bad, but by default it has a ton of stuff going on in the GUI that is at best marginally useful. The top menu is also a bit confusing, with what basically feels like 3 separate application menus present at the same time. The fact that it pulls in whatever you have for the main toolbar in Kate into the main toolbar in a confusing way doesn't help either. It makes a great deal of sense to have a ""New"" button in kate, but that in no way means I want one in my IDE.",,
"I have two setup. One with the arch package and another with their git master, both are crashing. You might have an older clang on your distro?",,
These young whippersnappers of today with their YouTube videos and what not.. Back in my day we just fired up vimtutor and learned our stuff hands on.,,
"Well... You can download additional one (maybe even with the add-on downloader) or you can also roll your own, good thing there is a configuration editor in kate",,
You can edit/add configuration variables for CMake cache with a GUI,,
"AppImage should mask the version installed on my system shouldn't it? The crash happened both on Ubuntu 18.04 and 12.04.
The bug report I submitted contains a minimal file that reproduces the issue: https://bugs.kde.org/show_bug.cgi?id=396310",,
Configuring a theme would take a long time to get everything looking good for me. How popular is KDeveloper compared to other IDEs? That would explain why there aren't they many good themes (at least for me) around.,,

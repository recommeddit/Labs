idx,text
5449,"Lowe’s, Home Depot, and Menards all had bigger ceiling fan departments in the mid 2000’s, I miss that."
5450,"Lowes has always been my preference. Better organized, better prices, better customer service, better quality lumber. And better benefits for employees (at least when I worked there). They used to call it the womens home improvement store because they marketed toward ls women AMD families rather than contractors."
5451,"Other than issues with individual stores, not much different. Lowe's gives 10% discount to all vets, HD only retired military."
5452,"Lowes because of a myriad of reasons. They do military discounts everyday, they have an electronic record of everything you bought so that if you're not sure which type of light bulb you bought you can look it up. The Lowes that we go to is closer than Home Depot and is better organized."
5453,"HD does all the same, military discounts, electronic receipts, etc....Lowe’s is less than a mile from me, HD/Menards are side by side 6-8 miles away.  I started going to HD/Menards last year because Lowe’s screwed up soooo bad with appliances.  I ordered an ‘in stock’ washer the first week of November.  It finally got fully delivered the 1st week of February."
5454,"Lowes seems to always screw me over whenever I need to do a return but lost the receipt. If you’re good with hanging onto every single receipt, then maybe it’s no sweat. I go to HD and they always at least give me store credit, which is as good as cash for me."
5456,"Menards is probably a better resource if you have one near you.  They are like a more like a true hardware store in that they have EVERYTHING.  In a lot of departments they tend to lean towards house brands or lesser name brands but their pricing reflects the same.  You can literally build a house/building from the stock on the shelves at Menards. Their lumber selection is more like a lumberyard than the orange or blue guys by a mile but they don’t/can’t cut sheet goods for you.    Their appliance section isn’t nearly the same as the others but they make up for it in a myriad of other ways.  

One thing I have noticed with any of the Menards that I have been to is that if you ask where something is the person will stop what they are doing and walk you to the item on the shelf.  You don’t get ‘aisle 17’ as a response - EVER!  I’ve said before that I just needed a number and the response is pretty universal ‘I want to make sure for myself’  and they walk me there anyway."
5457,"Lowes was specifically designed to appeal to women and make it easier to market to women as well as serve women.

So if I am fixing the trap under my kitchen sink, I go to Depot. If I need a planter for the yard or something that I need to be aesthetically pleasing, I go to Lowe's"
5458,Home Depot is closer so I go there 90% of the time. From what I can tell they both carry pretty much the same stuff and prices are similar. If Lowe's was closer I would go there instead.
5459,"That particular Lowe's is IMO the worst of their stores in the Indy area. I don't go there if I can help it. The store at Madison and County Line Rd is much better. So's the one at 465 and Emerson.

Each of the chains has a few stores that are duds. You've already found the dud Lowe's. IMO the dud Menards is the one at 465 and Pendleton Pike, and Home Depot's dud is on High School Rd.

I prefer Menards for most things; their prices are usually better than Lowe's, and about the same as Home Depot, sometimes cheaper. Menards also has many items that the other chains don't carry: pet food and supplies, an *extensive* variety of bird feeders and food, much more automotive stuff, and a small grocery section that rivals 7-11.

One chain may be better than the others for some items, worse for other items. This is how I'd rank them:

* Lumber: Menards >> Lowe's >> Home Depot

* Electrical: Menards > Lowe's >> Home Depot

* Plumbing: Lowe's > Menards >> Home Depot

* Paint: Home Depot > Menards > Lowe's (although if you're looking for solvents, spray paints, stains, or varnishes, Menards is far and away the best of the three)

* Drywall: Lowe's > Menards = Home Depot

* Plywood: Menards > Home Depot > Lowe's

* Helpful and courteous staff: Menards stands alone."
5460,Thank you home improvement guru.
5462,"There's one employee at the Beech Grove Lowe's who takes ""overly helpful"" to an entirely different level."
5463,Will menards cut my lumber in store for me?
5464,"Not in the store per se, but most of their lumber isn't in the store anyway, it's in an outdoor warehouse. And they do have a chop saw at that building. They've cut lumber for me before; I'm not sure if that's just an occasional courtesy, though, or a regular service they offer."
5465,Is that why the only trip I've taken to Menard's was a surrealistic nightmare?  I went to the Pendleton Pike location to buy 10 concrete blocks.  It took 2 hours.  Haven't set foot in a Menard's since.
5466,Try literally any other Menards store in the metro area and you're likely to have a much better experience. That one seems to be staffed entirely by idiots.
5467,"Thanks, this was really helpful! I used to live on the southside up til last year, so I was used to my Lowe's at Madison and County Line."
5468,"If you were used to that one, I can certainly understand you being very disappointed in the Post Road store. We used to live on the NW side, and after the Menards store on High School Rd closed, I'd normally go to the Lowe's on West 10th or the Lowe's on N. Michigan Rd, both of which are pretty good. So is the one on N. Shadeland, and it's not much more than ten minutes away from the Post Rd store (via 70-465-69-82ndSt exit-Shadeland)."
5469,How is that Menards a dud? It just opened 4 years ago
5470,"Well, like I said in another comment, it seems to be staffed almost entirely by idiots. I hardly ever go there, and yet I've had more problems with product being out of stock at that store, when the website said it was in stock, than at all the other metro-Indy Menards stores *combined*. Product is frequently not where it belongs on the shelves. Employees don't know where things are.  On-line orders that supposedly were picked and wrapped, ready to be picked up, are nowhere to be found.

Yes, the store opened only a few years ago, but that shortly followed the closing of their previous east-side store at Pendleton Pike and Shadeland -- which *also* was a dud, for the same reasons I cited above, and in addition was small, dirty, poorly lit, and poorly maintained. I suspect that much of the staff, and all of the management, are holdovers."
5471,"Give Trust Hardware a shot too, always good to throw some dollars to locally owned businesses. The 24 hour availability is nice too because shit always goes wrong at night for some reason. 

https://www.trusthardwareonline.com/

Also they have shop dogs."
5472,I just went to the one on Mass Ave last week! Having a couple month old puppy bound into my lap while I was crouching looking at paint is just what I needed
5473,"> shit always goes wrong at night for some reason

Preach, bro. Thanks for the tip -- will definitely keep Trust Hardware in mind next time something breaks after hours."
5474,I despise Home Depot so I choose to go to Lowe’s (Castleton). My next choice would be Menard’s (E. 96th St.)
5475,"If it's part of your calculus how employees are treated, Lowe's is generally considered a better employer than Home Depot, and Menard's owner is, well,  you can look him up.  A bit of a tool, himself.  I have noticed that that not all Lowe's are equal quality in both service and quality of products."
5476,"Sullivan Hardware is pricey but if you need to go in a store where the staff is actually helpful they’re pretty great. 

As other people have said, Menards is awesome too. Every time I go in there it’s shockingly cheap."
5477,Menards is the GOAT for home improvement stuff. The stores are absolutely MASSIVE and have nearly everything. I'll never step foot in a Lowe's again
5478,"As others have said, your experience will vary by location. I'm on the north side and have had pretty good luck. One thing I discovered recently is a new(ish) string of hardware stores called Trust Hardware. They are open 24 hours every day!!! So if you have an issue in the middle of the night or a holiday when all others are closed, they have a lot of repair parts. Looks like they have 3 location now."
5479,Menards!!! Especially when they have the 11% back rebate.
5480,They are so deceptive about that. Store credit is not a rebate
5481,I know— but it’s better than nothing. I ended up buying from there for garden bed supplies and it was nice to basically get a gift card back.
5482,"Lowe's is shit. Absolutely shit. Don't bother with any of them, especially the one in Glendale (off Keystone). 

We've been using Menard's for all reno supplies. Keep in mind though, that everything is on short supply due to supply chain issues, pandemic demand, and time of year."
5483,I like to save big money at Menards
5484,"I know it's probably less convenient than the big chains, but there are lots of places locally that carry awesome quality products, they just specialize by category. Might check out plumbing supply stores for your particular issues. I also love Fusek's True Value for a lot of home repair supplies/parts."
5485,Ha. Lowe’s is my favorite but mostly because they are pet friendly.
5486,Home Depot is as well!
5487,"That's one of the many reasons I *don't* like going to Lowe's -- too many clowns that can't leave home without bringing along their yappy little pseudo-dogs. Some of these damned animated dust-mops Never. Shut. Up.

Don't get me wrong, I love dogs. *Real* dogs. But I leave mine at home when I go shopping."
5488,"Don't be afraid of contractor supply stores. Know what you need, have a good sense of what you're talking about, and you'll get in and out with the best if 'em. Assuming the minimum qty isn't too much you'll definitely save over big boxers. I had heard that you had to have a company account to shop at them, but I've never had an issue paying with a credit card or cash."
5489,"Where I live, the big box stores have the market for working people cornered, because everywhere else closes no later than 7 on the weekday, and earlier on the weekend. 

It varies from spot to spot. If you have something better in your area, and you are able to make it there without taking a vacation day, by all means buy from them. Home Depot and Lowes are both awful corporations that I wish I were not forced to support."
5490,"Yeah, I love my local ACE Hardware/lumberyard... but it's open 9-5 m-f, and then 9-12 on Saturday morning....   so I end up going to HD/Lowes a lot instead..."
5491,"We have a really great local chain that has enough weight to have everything you might need in stock, or easily delivered from their distribution center, while retaining the small mom and pop customer service. They employ contractors, tradesmen and experienced handymen as managers who are reaching retirement in-charge of kids in or just leaving high school who get assigned to a department and only work there or at checkstands. They are awesome, sometimes a little more expensive depending on the item but they make up for it in staff.

McLendon Hardware, what would I do without you?"
5492,"You're paying for the convenience. The fact that you don't have to shop four different places to do a small project is where you make that money back. Also, the convenience of their hours.  I'd love to be able to support my local equipment rental when I need a jackhammer, but the rental shop closes at 530 and is only open half a day on Saturday. I can rent one from HD at 9:30 on a Monday night and be ready to work the next morning. Same with hardware. Have a really nice Ace by the house, but by the time I need supplies, their closed. It sucks, but the big boxes catered to the customer."
5493,"Buy your material from the contractors.

Lately I've been doing tons of exterior work. If you need to do some soffit/fascia/gutters/siding/caulking/windows/doors etc, just come to my shop between 7:00-8:00, we're happy to sell you our material. The markup we throw on is minor, you'll still pay a lot less than the big box stores, and you can get advice from real installers on whatever you need to do. At my shop we're happy to explain every detail, and set things up for walk-ins like you.

Whatever job you need done, call the best contractor in town, and ask them if you can come in to talk to the guys and buy material."
5494,"Where I lived there was a local independent small chain, 3 stores. We bought nearly everything there. Service was excellent, price maybe 1/3 of the box stores. In Northern Ca, East Bay where would I have been without Sincere Hardware? Appliances, windows, cabinets, fixtures, doors and door knobs, sinks, toilets, faucets, lighting, granite counter top ... And service that does not run away from you."
5495,"I have found great deals at the Habitat for Humanity stores. The only problem with them is they do not carry a standard stock of material. It is basically whatever has been donated to them. I just go there often and see what new items have come in.

 One time i bought a pair of solid wood closet doors with full size attached mirrors on them for 13 dollars a piece."
5496,"Lumber, siding, rocks, bricks/pavers, mulch, insulation, drywall, plumbing, electrical, HVAC, paint, roofing, cabinets/countertops, flooring..."
5497,Doors.
5498,"Local lumber yards are generally cheaper than the big box stores (at least in my area).  When HD, Lowes or Rona are asking $3.50 for an 8 foot 2x4 SPF (insanity) the local places are around $1.90.  They seem less likely to adjust prices during peak demand seasons."
5499,They're not around here. 84 Lumber is consistently higher than Lowe's Depot.
5500,"buying bagged dirt/mulch/rock/etc from big box stores is MUCH more expensive than buying from a landscape materials yard...assuming you need a truckload or more.  Sometimes you just need a few cubic feet though.

When I was remodeling my wife's house, now a rental property, there was a Tru Value hardware store about a mile away.  Tru Value wasn't just a little more expensive, they were a LOT.  Like each copper pipe fitting was 2-3x as much.

So it pays to know what stuff costs, and where."
5501,"Wholesalers often make cash sales to the public at significant savings. For instance, I only buy screws from a fastener supply place, because their price is usually about 1/3 the retail price. Box stores make zero money on drywall for instance, and make all their profit on the screws and accessories."
5502,"I've started checking Amazon.  Not much more tha box stores nearby.

Example - needed a certain door lock/combo to match existing.  HD was out - Lowe's was higher.  Amazon was 25$ cheaper than cheapest locally.

Needed sill pan for a new door, I can't fab one - ordered from Big A.

New Framing nailer 80$ cheaper.

Needed new chalk line and rather than drive, since I was ordering anyway - Big A and cheaper also.

It's not going to be WalMart that kills retail but Amazon.

I really like to support local, but since the local does not even exist anymore, it's just as ez to support Big A a the box stores.

Too bad they don't ship 2x4's  :)"
5907,"In this day and age, I would absolutely recommend learning JavaScript if your goal is to become a web developer. More and more the browser is becoming sort of like a thin-client for cloud services, and JS is the language that browsers understand. Currently, there is also a huge surge in popularity of building native (and native-like mobile websites) with React Native (a popular JS library), and the technology in that space is just getting better.

If you're thinking about doing mostly backend web development, you could get away with minimal html/css/js knowledge but if you're wanting to build any sort of modern web app, you'll need JavaScript."
5908,"> More and more the browser is becoming sort of like a thin-client for cloud services

You are completely right about JavaScript, although the browser was never a thin client and is only getting more complex, not less. Thin clients are simple pieces of software and browsers have never been simple."
5910,"> Thick clients can stand by themselves. They don't need a remote service to function (although they may still talk to remote services for certain extra features).

That is interesting and not something I have heard before. I always assumed thick clients, while doing a lot of the work, were reliant on the remote service for the data to work on. This is food for thought for me thanks."
5911,Wow. This is the first time i've seen someone politely accept a counter argument online. Tip of the hat to you good sir.
5912,"That's a fair point. I guess I was more referring to *thin* from the developer/consumer perspective in that the browser has become so ubiquitous you can essentially take it for granted and abstract away that complexity when you're developing web apps. That being said, you're absolutely right that the browser itself as a piece of software in itself is not simple or thin."
5913,"Yea Im mostly interested in Modern Web Apps, Im currently doing codecademy's javascript lessons, could you tell me some beginner projects i should attempt, and if there are other websites that teach JavaScript?"
5914,"I'm not very well versed on the formal courses out there that tech JS concepts, but I did run across [this article](https://codeburst.io/best-courses-to-learn-javascript-in-2017-fc3a254638cc) which lists a bunch of free online JS courses you could choose from.

I think now especially, there is a heavy focus on Javascript frameworks (like React, Vue, Angular etc.), but if you're just starting out, I would recommend staying away from a framework. Learning the basics of the language itself is paramount. These frameworks just introduce extra niceities around data management, layout and ui components which are things you won't have to worry about unless you're building complex web applications.

As for a project suggestion, I would try to build a website that has a single input field and a button. When you click the button, try to get a website to display an alert message with the text inside the input field."
5915,"You should write some bare-bones apps with both React and Angular. Having exposure to both will be good for you. Choose something like a todo app, keep it simple. Check out todomvc.com for comparison. Don’t get paralyzed by the vast number of frameworks tho... stick to react and angular."
5916,"Vue.js is just as powerful and much easier to learn. I’ve seen experienced developers take weeks to get comfortable with React, but be productive in Vue in a day or two."
5918,"It’s more to personal preference. I’m personally not a fan of Vue, especially when used with templates rather than JSX. A lot of it feels like magic, with bindings abstracted away to the point where you don’t really know _how_ it works, you just know that it does."
5919,That's how I feel about rails.
5920,"That's actually the reason why I think Rails+Vue/Laravel+Vue are such good fits. They have the same ""it just works magically"" concept."
5921,"That’s totally fair. I just think you need to learn the big 2 first. You’ll be more hirable, and you can always pick up other frameworks like vue.js."
5922,"If you have to learn two frontend frameworks at this point in time, your best bet is React and then Vue. Angular will be the “also ran”. I’d be very surprised if Vue doesn’t come out on top to be honest - developer friendliness is super important in acquiring and retaining new developers, and Vue trumps all. Just my opinion though ;-)"
5923,Why would angular be the also ran if it has a massive presence in enterprise though?
5924,What I find really off-putting about React and Angular is the huge amount of changes that break stuff from year to year. I don't want to have to deal with more shit than I already do.
5925,I politely disagree.
5926,"Javascript is certainly a requirement, however to a great extent what you do backend work in is up to your employer and sometimes if self employed the customer.    So you really should be flexible with language skills.   I'd seriously consider Python and Java as good starting places.    Python really is a tool that you can use no matter where you career goes even if used for nothing but simple scripts.   

Now to expose yourself to more modern concepts look at Swift and Rust.    Neither can be considered web development platforms right now (at least not with a huge mind set behind them in the area) but there are some interesting concept to learn there."
5927,check out free code camp. They teach web development and recommend some projects
5928,"What I did was browse around Reddit (/r/software, iirc) and looked for people asking for tools that didn't exist and seemed relatively simple.

For example, one person asked for a display similar to ones on sports talkshows where you enter in a list of topics and a time limit, then it builds a list of the topics and scrolls through them.

It was easy to get basic functionality, then I added more graphical sugar, animations, and options. It was cool having something that was useful to someone else, and it's even better if they treat you like some genius with a programming super power."
5929,Try Javascript 30 by West Bos. It's full of different projects you can try your hand at.
5930,"As u are just starting, I think You Don't Know JS - https://github.com/getify/You-Dont-Know-JS or https://maximdenisov.gitbooks.io/you-don-t-know-js/content is the best out there. Then go learn React & Node. I think there is a comparison all over the internet why React or Node. But I will give u short description, with React's principles u can use React Native for mobile development. Node bcz then u would write an entire application in just one language, i.e, JavaScript & also NPM is the largest code repository in the world & if u are a JavaScript developer who is decent at his job then u won't be out of job for the next 10 years atleast. Mark my words, it isn't going anywhere."
5931,Thanks alot for your feedback! I will be sure to check out the links
5932,God I am struggling so hard with their JavaScript lessons.
5933,"You may want to consider taking an introductory university course that's been made freely available online, such as [MIT's 6.00.1](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-11) or [Harvard's CS50](https://www.edx.org/course/introduction-computer-science-harvardx-cs50x). While they do not focus on web development, they will give you a deeper knowledge of general computer science principles that will pay dividends down the line. As you are still in high school, you have plenty of time to invest before you need to worry about what languages are wanted on the job market."
5934,Dude. Th. Fucking saved.
5935,Thanks alot man!
5936,JavaScript
5937,"It doesn't matter.

A good programmer is a good programmer no matter what language they use. You will never be able to tell the difference between a programmer who learned first with python and one who learned first with javascript.

The differences between modern programming languages are incredibly minimal."
5938,"This is really kind of the right answer. 

I find that with each new language I know, what I'm really learning is just a new syntax.. and it is really the new concepts that are valuable. Those new concepts are often ported over, mentally, into the other languages that I know."
5939,"> The differences between modern programming languages are incredibly minimal.

No. 

Ex: Js, Go, Rust/ Swift"
5940,"I think this is incredibly simplified. I'm a python Dev and can tell immediately when someone is coming from another language. Usually when they do something like `for i in len(foo)`. It's true good programmers are generally able to program in other languages, but if they are inexperienced you have to spend a lot of time fixing their habits from other languages."
5941,"Syntax problems are not real problems.

90% of dev time is going to be spent thinking and designing solutions and 10% of it is going to be spent typing.

If one developer has to spend 15% of their time typing because they are brand new to a language and frequently have syntax issues they are not going to come out with a worse result. Any typing mistakes they make are going to be obvious and shouldn't even make it to a code review because the code straight up won't work if you don't use the correct syntax. Furthermore in a month of practice they won't be making those syntax issues anymore."
5942,"Certain languages make expressing ideas a certain way easier, where as others are more flexible or dictate more boiler plating and putting mental energy to conceptualizing those. Also depth of understanding in the language is an issue. Language features are a real part of the development process."
5943,"That's more than just syntax, it's inefficiencies which over enough repetitions or in the wrong place can lead to extremely slow code."
5944,"Keep in mind that you're still young and nobody has any idea of what the landscape will be 5 years from now. Nothing is guaranteed. Focus on what you enjoy because you're more inclined to deep dive into it and learn principles that may span across multiple languages at a time. Many languages share some common threads and they all tend to steal/borrow from one another. Learn that abstraction.

That said, Javascript looks like it's the most reliable choice. Even if you look past the current technological climate it has a stronghold in, the language itself evolves and adopts many concepts from other languages. From personal opinion and experience: I'd say Go (what I do at work and as a hobby) and Haskell (what I do as a hobby) have not only been very rewarding but keeps my interest peaked which fuels the push for more."
5945,"Thanks alot for your feedback! yea now that i think about it, there are new languages coming out very often. Go seems really interesting to me so im looking forward to learn it, any good articles to start?"
5946,"Great choice! I hope you don't get spoiled, not too many other languages have that combination of readability, efficiency and productivity. It does not get more pleasant than making simplicity as the abstraction. This is coming from a longtime Haskeller.

A Tour of Go: https://tour.golang.org

Todd Mcleod videos/courses on udemy and youtube for sure. When it comes to web development, Udemy has a few solid ones for Go.

There's also The Go Programming Language book which is the standard. It's a terrific book although it doesn't necessarily focus on web development. The Go Programming Language Phrasebook is another gem and I do not go to work without it.

For articles and blog posts specifically, this site: 
https://www.goinggo.net/

I'll update if I can think of more."
5947,"Thank you very much for your feedback! Im super interested in Go, I will start learning in the near future, ill be sure to check out Todd Mcleods channel on youtube"
5948,"###As someone who has been a PHP+MySQL developer for 18 years, and generally hated JavaScript for most of this time:

**JavaScript.**

haha... I've only come to this revelation in the last two months or so.

I'm in the process of learning Node, Express, React and a few other things.  It's really the way everything is going, and I can already see that this workflow is going to be much more efficient + powerful in the long run. 

One language for everything (for webdev at least).  

Node is even becoming pretty popular for building and distributing command line + GUI programs... even programs unrelated to webdev.  Microsoft's very popular VSCode editor (a GUI program) is even written in JavaScript/Typescript.  You also can even use JavaScript inside PostgreSQL.  

I thought that composer/packagist (PHP packages) were awesome in how many there are to do so many different things for you.  But NPM (Javascript/node) blows it away.  And it's pretty cool being able to play around with npm packages in your web browser before even downloading them.  Click the ""Test {packagename} in your browser."" link on the right-hand-side when browsing https://www.npmjs.com/

PHP+MySQL are still going to be around for a long time, and there will be plenty of work here, especially given that common systems like WordPress and Magento are built on them.  Also php/mysql are both are easy to learn for a few reasons: 

* Just technically easy to use for people new to programming
* PHP has the best documentation of any language I've ever come across - the comments are quite helpful too
* There's a bajillion guides for n00bs on the web - however much of it is now bad advice, especially if it was published 2+ years ago.

But I likely won't ever be starting any new projects with PHP or MySQL.  Large ones at least anyway.

On the database side - PostgreSQL is superior in MySQL in pretty much every way, aside from a few uncommon use cases.  Also I suggest not wasting any time with any type of NoSQL database (as your primary datastore).  In most cases postgres will be better.  There are of course exceptions here too, but unlikely to be relevant to you in your first 5 or so years of being a webdev."
5949,"I just want to add that PHP is a powerhouse language to know, especially if you are interested in building full-stack applications and need to know some sort of backend language.

Laravel/Lumen are **amazing** and take most of the good bits from Ruby on Rails. 

The latest version of Laravel comes with Vue.js builtin and makes developing frontend thin-clients with PHP backends super easy. The way that you can template out resources (JSON) for APIs is fan-fucking-tastic.

PHP gets its share of historical hate, but really v7 is just great."
5950,I'm very far way from your level of experience but i mainly do PHP+Mysql also. What would you recommend as basic resource to start with JS powered webdev? I mean i already know  simple JS :)
5951,"I haven't really come across any one specific source that stands out or anything.  So here's a few different things I've been looking at, in random order:

* search ""javascript for php developers""... there's a video series, a book, and various web pages on the subject.  I downloaded the videos and have watched about half.  Very useful as it jumps right into the fundamental differences for things like: scope, async, object inheritance vs classes.   As a PHP dev, I always assumed I could just start writing JS seeing the syntax in mostly the same.  But these differences are mostly where all my frustrations have been in hating JS over the last 18 years.  Taking the time to learn this stuff properly is the first step to becoming as comfortable with JS as we were in PHP.
* It also doesn't hurt to go through some basic beginners videos for JS.  You can always skip the sections that are obvious to you.  I apply this to anything really.  Been running linux/unix servers for 20 years, but I still pick up plenty of tips in places like /r/linux4noobs etc
* There's quite a lot of video courses you can torrent
* Lots on YouTube too
* When it comes to specific frameworks like React, if they have a beginners guide, take the time to do it.  For React it guides you on building a little tic-tac-toe game: https://reactjs.org/tutorial/tutorial.html - didn't take very long to do, so it's worthwhile.  Same goes for any other frameworks/packages etc you're going to use... if they have a beginners guide, go through all of it.  It will probably save you time in the long run, especially if you try to build something straight away based on misconceptions of how to use the package.
* One thing I've found really difficult compared to PHP, is that a heap of these JS libraries have really vague buzzword filled descriptions on npm.  I wish I had a tip here for deciphering wtf they mean, but I don't.  Anybody got any tips here?"
5952,"Thanks the great answer !
I too I'm playing around with Linux ... And I did not know about that sub, thanks for the tip too haha
Have a good one !"
5953,"In case you didn't know, there's also:

 
* https://www.reddit.com/r/linuxquestions/
* https://www.reddit.com/r/linuxadmin/

And of course: https://www.reddit.com/r/linux/"
5954,"As a guy that just started out using PHP+MySQL can you tell more of the superiority of PostgreSQL(I like the way you tell your experiences)? 

And why did you say to not look up at NoSQL databases? That's what cloud computing have been implementing for better scalability (or is it wrong?)"
5955,"Spend a few days reading results for ""mysql vs postgres"" and you'll find heaps of info.  

I've probably read most of the first 100 google results, and a bunch of things they all link to.  I'm really slow at making ""shopping decisions"" (even though this is free, it's a large investment of time to learn).  I should have done 10% of the research and spent the rest of my time just jumping in and learning postgres.    It doesn't take a heap of learning to switch anyway.  

I built a couple of projects around that time on mysql seeing I knew it and just wanted to get on with building, and I now really wish I'd switched sooner and done them on postgres instead of just reading ""vs"" debates on the web (although not many people who have used both who prefer mysql).  The latest project around that period I actually did initially build and almost finish on mysql, but then converted to postgres.  It was definitely worth it.

There were a few minor inconveniences with postgres being stricter about how I insert data - but they all have good data integrity reasons behind them.  In the long run this is actually very important to ""fail early"" to ensure you don't end up with a messed up production database down the track that needs a bunch of fixes applied to it that never would have occurred if the database was stricter to begin with.

Likewise PHP's default behaviour of errors that still allow the script to continue are the biggest reason behind PHP systems built by beginners being buggy.  When starting out, new developers who haven't set up exceptions and logging notifications likely are deploying projects that are generating errors all the time, and they'll only find out when the issue is big enough for the client/users to notice something being broken on the site.

Languages like Python and JavaScript will by default throw exceptions and stop running when there's a bug.  It feels like a pain in the ass when you're trying to learn - but forcing you to ""fail early"" and fix the minor bugs or ambiguous means you'll release much less buggier code.   

For your PHP projects, I highly recommend you enable ""error exceptions"" at all levels of errors so that you can fix everything from the start, including minor warnings.  Also make sure you have some kind of email notification system to let you know when bugs occur in both dev + production.  Monolog is good.



Here's my summary:

### Postgres benefits:

* stricter about ensuring you enter data as intended, one simple example is no crazy ""0000-00-00"" bullshit
* reputation as mobile stable/reliable
* much more functionality, one big difference is recursive CTEs, i.e. you can get a whole tree structure of recursive records with parent_id values in a single query, ordered however you want while maintaining the tree structure
* JSON is a first class citizen, you get the flexibility of structure-less nosql, with the power to do complex queries with standard SQL
* [foreigndata wrappers: you can use a postgres connection to query data stored in all sorts of things... mysql, sqlite, other postgres servers, most of the common nosql databases, JSON files, git repos, IMAP servers, web APIs etc](https://wiki.postgresql.org/wiki/Foreign_data_wrappers)
* truly open source, not controlled my a private company... especialy not oracle who have a vested interested in discouraging mysql
* not fragmented like mysql/mariadb/percona is now
* much much better doco than mysql
* features being added very rapidly
* these days performance is generally as good as mysql or better, especially for complex queries.  most of the ""mysql is faster"" stuff you read on the web is old and based on MyISAM - which nobody should be using anymore
* more flexible CHECK constraints you can easily add to table definitions
* mysql only supports SQL in procedures (functions). postgres supports: SQL, tcl, perl, python, javascript, lau, R, sh
* more native column/data types like: IP addresses, UUID
* timezones included in timestamptz (datetime in mysql) columns - this ensures there's no ambiguity about whether or not your data is UTC.  very convenient for development/debugging... timestamps always get stored as UTC ""under the hood"", but you can view them using a different timezone based on a db connection option (and also do timezone conversions in the db if you like)... so in the database GUI you use during dev for example, you can see all the timestamps in your local time rather than UTC if you prefer.  
* having both postgres + mysql (or even postgres only) on your CV will make you look better for higher end jobs on larger or newer systems


### MySQL benefits - (all with caveats, haha):

* easily to get started - because it's not very strict with what data it accepts (and then may silently change, unless you're logging warnings etc)... so it's a short term benefit, but long term risk
* right now I think the **built-in** multiserver stuff might be a bit more complete - but even after 18 years of web dev, I've never needed a multiserver database cluster for a single project (of course I and the clients all thought we would, but in reality you need to be running something massive like reddit to really need it).  By the time that I do need multi-server, postgres will probably be better anyway.  Note I'm only talking about the built-in functionality here, there's already shitloads of things you can add to postgres for clustering
* if you want to hire cheaper developers to work on a project, they're more likely to only know mysql
* likewise you'll probably find more employers looking for people to work on mysql projects - however this will likely be lowerend/small jobs



The only recent support I've seen for mysql over postgres was the Uber case.  But they were basically using it like a dumb JSON datastore instead of a relational database.  And even their use case preferring mysql has been refuted my a bunch of people that probably know better.  



""Web scale"" has basically become a meme.  It's basically mocking the proponents of nosql databases, because generally SQL will in reality be better for almost every web project, and 99.99% of projects that think they're going to be the next facebook will in all likelyness never need more than one server.  So don't cripple your project with nosql from the start to solve a problem you'll probably never get to anyway.  

If you do get there, you can solve it then.  Even very large sites that use nosql often still use SQL as their primary database, with the nosql cluster being used more for stuff like caching.  Reddit is one example of this: Postgres + Cassandra.

The biggest mistake I made in starting SaaS company/website I started about 7 years ago back was wasting heaps of time building it to function across multiple servers so that we were ""ready"" before we needed to be.  7 years later that site is still running on one $5/month VPS.  I could have been spending that time improving or marketing the product, and maybe then I would have had enough customers to start worrying about scaling... a nice problem to have, but doesn't need solving until you get there.  https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it

And anyway, Postgres will scale massively if you know how to use it properly, and learning to do that is less work than jumping over to some entirely different nosql system with massively reduced querying functionality.  Postgres has been shown in some benchmarks to be faster than mongodb when used a a JSON store anyway.  

Most of the ""nosql is better for web scale"" shit comes down to people never bothering to learn to use mysql/postgres properly to begin with."
5956,"I have read complex and simple stuff. Damn! What a content. You, Sir, should really consider to be a teacher :)

> Likewise PHP's default behaviour of errors...

At my first attempt at creating and deploying a CRUD with PHP+MySQL, I stumbled with errors that have never showed in my early development. It actually could been much worse (WAMP isn't case sensitive in localhost, but it is on the server)

> having both postgres + mysql

At that time, I realized how a DB is the skeleton of a system. Therefore, I decided that knowing only 3NF (while also disobeying the rules) isn't enough and I will have to learn more to be able sketch more complex system in which begs for this question: How do you sketch a DB and also maintaining it future proof (making the DB easier to scale without major problems) whilst being in a [YAGIN](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it) mindset?"
5957,"I was really just talking about scaling when I mentioned ""You aren't gonna need it"".

When it comes to schema design, that's an area where I would take the opposite attitude.  With schema design, you really want to ensure it won't be hard to expand/change things in the future.  

[Here's a related quote on the subject from Linus Torvalds](https://lwn.net/Articles/193245/):

> I will, in fact, claim that the difference between a bad programmer 
> and a good one is whether he considers his code or his data structures 
> more important. Bad programmers worry about the code. Good programmers 
> worry about data structures and their relationships.

He was talking about git there, but it makes sense when thinking about a good SQL schema - vs using stuff like NoSQL in order to write less code or deal with scaling. The most important thing is your data structure (SQL schema).  There's better ways to solve performance issues without making compromises to the schema design.

But obviously need to balance what's worth putting more time into now -vs- unlikely to be needed any time soon.

I suggest normalizing the database as much as possible.  And make lots of uses on SQL VIEWs that JOIN tables together for most of your output/read queries.  I'm finding that more and more now, that I very rarely queries tables directly for the ""R"" (read) in CRUD.  Most of my queries used for displaying existing records to users comes from SQL VIEWs.  Makes things much simpler when dealing with permissions and soft-deletes etc too."
5958,">  And make lots of uses on SQL VIEWs that JOIN tables together for most of your output/read queries.

This is a great advice to keep in my mind. In my first project, right after normalizing the DB, I had to test it (putting data and query them). As I was query them, I ended using those same queries directly into PHP (without using the views) which led me to re-utilize the same code."
5959,"Yeah we generally all start out putting doing all our JOINs in PHP.  But clearly defining this stuff into VIEWs makes it much easier to debug stuff when you're not sure if the problem is your SQL queries, or the PHP code.  

Nice to be able to just look at the SQL VIEW in your database GUI to first check that it's giving the correct results before trying to debug PHP app code.

And also when thing get complex,  you can start layering multiple views on top of each other instead of having one giant query that is hard to debug.

Once you start realising the true power of all the cool stuff you can do in the database instead of app/PHP code, you can even get closer and closer to barely having much backend code at all, with things like: https://postgrest.com/ which can allow your frontend to just read/write to the database itself.  I haven't gotten quite that far yet, but it's a pretty interesting possibility for certain us cases."
5960,"Wow. I can't thank you enough for the tips and advises. They are all great and will definitely help me on my path to Web Development. Especially the DB part.

There are tons of information out there and how to use them. The following list are the this things I read regarding to WEB that I can't really understand: 

* JSON, AJAX, DOM;
* UX/UI - I have been following The Futur, and they are really great. I want  to have a little background on those aspects while I am still learning PHP and do mostly CRUD. And as I want to work as a freelancer to gather a small amount money, I realized most of the small clients only want a fancy/creative page with basic CRUD; 
* REST;
* MVC (My teacher introduced - sort of - us to GRAILS. At first it is frustrating but seeing now, it solves a major problem that my project has: multiples static pages with PHP on it, that will be a pain when adding new features; and also, I want to be able to replicate MVC on HTML/PHP);
* Angular, React, Vue.

And at the end of the year I will ask someone (reddit perhaps) to check my code and give opinions or critics on the aspects I need to improve (especially about the code readability)."
5961,"Cool, sounds good, have fun!


> Angular, React, Vue.

I've been looking into these lately, and I'm going to go with React for now... seems to already have a heap of libararies that can already replace all the stuff jQuery ones I've used in the past... amazing how quickly they've all come out, and with quite a lot of options/functionality.  I'm also going to use React for both server and client side rendering."
5962,">  I'm going to go with React for now

I whish you all the best in this new journey. I am pretty sure it will definitely be fun. :)"
5963,"If you're going into web, JavaScript is pretty essential. It is going to have relevance regardless of the back end route you go (and if you choose to learn node, it will be even more all encompassing). 

SQL is obviously a must (don't get trapped into having complete dependency on ORMs).

As for back end... You will hear all sorts of conflicting information on this topic. People tend to have strong biases in this area; but in reality just choose one. Java, PHP, Python, C#, Node, Go, are all good places to start. I've mostly been a .NET developer over my 10 year professional career, and really enjoy C#, however I am always jumping into new languages just for fun (currently playing around with Python). You're going to be starting pretty simple anyways, so don't agonize over this decision. The important thing is to just start writing code. Once you have core concepts understood, you can transition from language to language with relative ease."
6002,Thank you for your feedback!
5965,"Ruby on Rails
JavaScript/Typescript
Web components (Polymer/Vue.js)
Serverless (AWS - API Gateway/Lambda)

Also take a look at VSCode or Atom, excellent editors too."
5966,"A majority of devs i’ve talked to highly recommend Javascript. I know javascript but i mainly prefer using ruby and rails, but i can agree its a really big trend in the way of js"
5967,"JavaScript is a must (knowing a framework helps, such as Angular, React, or Vue), HTML and CSS you can get by with minimal knowledge (although it would greatly benefit to understand it well), and then pick a backend language and framework (Python with Django, Ruby with Rails, PHP with Laravel, Node with Express, C# with .Net Core or MVC5, Java with Spring). The BE language doesn't really matter, but I would try to focus on one that has a lot of jobs in the city you want to live in (PHP and C# are the main ones where I live). 

If you want to gradually move your way up learn HTML and CSS, build some static stufff and then learn the basics of JavaScript and dom manipulation/event listeners. This is enough to probably get you a junior front end position where you can hone you skills and learn about things such as Grunt/Gulp, ES6/Typescript, and a framework. 

From there, if you are interested in backend, you could start with a CMS and build custom templates for them (such as Wordpress), but don't expect a full time gig as a BE dev unless you have a solid understanding of OOP, APIs, and MVC patterns. This will probably take about 6 months to a year to learn in order to be what I would consider hireable (there are obviously exceptions)."
5968,"It really depends on what you want to do.
If you want to make Web Applications or Websites with really strong interactive experiences - Javascript is absolutely essential.

You'll need to understand the interaction and overlap of HTML (App Structure), CSS (App Styling) and Javascript (App Behavior). Knowing this is 50% of the battle!

If you're planning on focusing on *just* the front end - those 3 will get you extremely far and you could easily have a very successful career.

If you want to dig into the backend as well, then you'll need a server-side language.
Depending on your familiarity with Javascript, you can use it there too. Otherwise you can choose between a wealth of offerings (PHP/Python/Java/C#/Etc...).

Picking one is the hard part! It's worth trying a few beginner tutorials in the most common ones and see what you gel with best. Take a look a Job Boards for your region and see which are the most popular and what they pay - you want to maximize your employability!"
5969,"People will hire you as a junior if you have a solid mastery of SQL, (start learning SQL **now**) JavaScript, CSS and HTML. If someone put a picture in front of you and explained how it worked and you could build it within about 30mins to an hour.

In web development the following technologies you will want a ""ok"" understanding of after you understand JavaScript. At min be able to parrot the definitions of these things and explain how they fit into the world.

- Nodejs (master this)
- MongoDB 
- jQuery
- Angular
- React
- npm
- Apache Cordova
- Electron

After that learn TypeScript. The start diving into languages like PHP, Ruby, C#, and Python, Java, and Go. JavaScript fairly recently made it to server side programming. Most websites still run on PHP, and small development shops use it. Java and C# are used in very large enterprise-style projects and desktop application development. Ruby Python is used in places that are more conscious of the world around them like startups, young companies, R&D departments, and companies with very powerful websites for sales. These same companies are shift more and more to nodejs but for integration purposes and cross work you need to know more than just JS.  Go is moving into the webspace, but it really is more of a system language like C, C++, or Rust. Its kinda a wierd language that doesnt seem to stick with companies much untill they have scaling issues. Then they either fire or retrain all the devs to know Go and rewrite the whole system. Its not a great language for changing business requirements."
5970,Thank you very much for your feedback! Ill start learning SQL alongisde with JavaScript Basics
5971,"If you like Python, stay on it. Otherwise Go might be the best choice for web backends and standalone software."
5972,"I have hardly heard of anyone using Go for backend. NET core, PHP, Node, Python you hear about often, but Go? Not so much."
5973,"https://github.com/golang/go/wiki/GoUsers

Go is using mainly to build APIs with micro services. (Now a days we use a js front-end framework plus APIs to build web projects). By the way not for small projects but mostly medium to large projects."
5974,"Cheers, thanks for the info. I'm currently getting started on a microservices project so I'll be sure to take a look."
5975,Go is one of the fastest growing languages right now; its used a lot in backend development.
5976,Are there any websites like codecademy that teach Go/golang? I hate python
5977,"Curious. How can you 'hate' python? One of the reasons it is so popular is because of how simple and easy to understand it is.

This is setting alarm bells ringing to me that you are rushing into this without fully understanding what you are doing."
5978,"Sorry, i didnt mean 'hate', I dislike it because the way my teacher taught us, He was trying to teach us machine learning from day 1 for some reason i dont know. It was complicated then, ill take a go at it again i guess. Thank you for feedback"
5979,"> He was trying to teach us machine learning from day 1 for some reason i dont know.

Possibly a resume padder wanting to be able to say ""YEAH I TOTALLY TEACH MACHINE LEARNING TO LIKE 100 STUDENTS"""
5980,"I work with a third party dev in work who keeps mentioning machine learning in planning meetings. Like, he just keeps saying it, but then talks about the reasons why he's not currently capable of implementing any 'machine learning' functionality to the application. There're some people who are just so full of it"
5981,"I have seen graybeard men with violence in their eyes as they say the forced spacing and layout kills them.

They normally enjoy ruby.

Personally I enjoy the python way of coding. I find other people code more readable."
5982,"* https://golang.org/doc/

https://gowebexamples.com/ few code samples to build small web project."
5983,"I don't know why, but Python really never stuck with me. I started with PHP, and moved on to JS and Ruby. Python feels.. I don't know.. inelegant."
5984,"Imo, even with django, python doesn't feel like it should be used for the web. PHP most certainly does, as does ruby on rails."
5985,"Funnily enough, I've entirely stopped using Ruby for the web and only use it for scripting either locally or server-side. I just like writing in Ruby. ""Everything is an object"" really sticks in my visual-oriented mind.

For the web it is hard not to like PHP's ""i'm everywhere so use me"" attitude. No set up, no real fuss. In comparison, setting up Django on a new machine can be a headache."
5986,"PHP would be better than Python, in pure employability terms.

But the main thing would be just building websites, solving problems, dealing with client requirements etc. Do as much real-life work as possible."
5987,"I am also a PHP dev but no, don't choose PHP now. Choosing Node/js is better than PHP and choosing Go is better than Node at this moment to learn as a new language."
5988,What's node?
5989,"It's a Javascript runtime which basically gives you the ability to execute Javascript server-side instead of using something like PHP or a more modern backend written in something like Ruby/Java/Go etc. The draw is that you could essentially write an entire full-stack web application in Javascript, which wasn't possible really before Node came along"
5990,Jesus I  have so much to learn.
5992,I'm working on my JavaScript. It's slow going.
5993,"> Node is actually a really fun and interesting language to work with.

Node isn't a language.  To reiterate /u/themoderncoder 's comment, _\[Node is\] a JavaScript runtime which basically gives you the ability to execute JavaScript server-side..._

Calling Node a ""language"" is disingenuous at best, and outright wrong at worst."
5994,https://packages.debian.org/wheezy/node
5995,I'm not sure I'd agree.  But I guess it depends on your approach. If you are wiling to put the ernest effort into python and seriously learn the details of the language and a framework or two you can earn a pretty decent salary even without a degree.
5996,Which part are you disagreeing with exactly?
5997,"> PHP would be better than Python, in pure employability terms.

I know a couple shops in Denver that really are willing to pay top dollar for people that really know python / django inside and out.  So I guess that is anecdotal, but its my impression."
5998,"What's ""top dollar"" in your case? I got paid $150/hr for PHP, $90/hr for JS."
5999,I don't really enjoy the contract work like that so I'm referring to a salary gig.  something like 90 to 120k a year seems good to me.
6000,"Yeah I didn't say ""high wages"", I said ""employability""!

Also, Denver? Not exactly a good example."
6001,"Where I live, most employers are looking for people with skills in:

* HTML
* CSS
* Bootstrap
* JavaScript
* jQuery/Angular/React

and either:

* C#, ASP.Net MVC and Entity Framework
* SQL Server

or:

* PHP
* MySQL

Honestly I'd say the best thing to do is to look for jobs in your area and see what employers where you are want. Maybe make a tally for each language or something."
6003,Why is he being downvoted?
6004,"stay in school and get a degree kid! Dont ever think those scam online courses etc. will teach you ""how to be a developer"".
If you learn javascript you can both do backend and frontend, so as a jack of all trades I would recommend JS"
6005,"Thank you for your feedback! I only do free ones, i dont pay for them, i learn what i can and then mess around in Sublime Text."
6006,"Woah, now kid (who am I kidding I am also a kid) Sublime is awesome, but try VSCode & learn Git & Github. VSCode is free, although u can easily crack Sublime but once u use VSCode u will never ever in ur entire life will touch another IDE or Code editor. & put stupid things on Github, u have no idea how people are crazy when they see u put stuff on Github. I got tons of job offers just bcz I upload to Github a lot. Although u must have some skills though but still. So as u are getting a lot thrown at u, I will give u an answer. Learn orderwise.

Learn JavaScript with You Don't Know JS
Learn React (for web) & React Native (for mobile bcz mobile is used by most people than desktop & people don't spend a lot of time on websites than apps)
Learn Node (for backend)

Now below are the things u might want to do after a year or so if u get bored -
Learn Java/Kotlin (for Android App making) or Swift (for iOS app making)
Learn C#(Unity) or C++(Unreal) (for making Games)

Now above languages for App making & Games making can be used for AR & VR as well. Now these techniques won't be skyrocketing till 2020 or so. But till the time you are grown up, this is the new shit. So don't waste a lot of time now, bcz if u learn this now u will secure your future. & drop out if u can bcz they don't teach shit no matter which country u live in or which college u go"
6007,"Thanks alot for your feedback! Yes i do use sublime text and GitHub, I will learn some c++ in free time Thanks"
6008,Check [this article](http://merehead.com/blog/top-programming-languages-2018-learn/) I hope it will help you
6009,"Take some business courses. Sounds like you’re already learning the right things, which is the easy part. Do yourself a favor and learn how to become a consultant."
6010,If your goal is to be a professionnal you should also check job offers in your country.
6011,You should be learning to make websites instead of languages. You already know enough to take you a long way. I would make some simple pages with html/css and javascript. These are all front-end technologies so you don't need a server setup or a fancy dev environment. You can make a index.html file on your desktop and do some pretty amazing things right in one file. Knowing this side of it well will make a big difference when you move on to other languages.
6012,"Node, Angular, React"
6013,"I would recommend being an expert in JavaScript. By that I mean understand everything about it. When you do, learning other libraries (Node, React, etc) would be easy to understand. From there on it’ll be easy to learn another language."
6014,Personally I think you must know the trinity.. CSS/HTML/ JS. Then a backend language Java/C# and then learn SQL.
6015,"This is a fantastic curriculum. If I were starting from scratch today, I'd follow this.

https://github.com/P1xt/p1xt-guides/blob/master/wd-cs.md"
6016,Thanks you for your feedback! Ill be sure to check it out!
6017,"This is a great book on JS, that I can not recommend enough. The introduction of the book also helps lay down some fundamental knowledge of programming. 

http://eloquentjavascript.net

It’s free to read online. I liked it so much that I bought a paperback copy."
6018,"Thank you very much for your feedback! Just started reading it, its really informative and explain well, Thanks alot!"
6019,Critical thinking and solution providing. Your customers will want a solution to a problem and they will know the end result they want but won't know how to get there.
6020,"From easiest to hardest, HTML > CSS > JS > PHP and once your done with the basics you might wanna look into Python."
6021,Thanks alot for your feedback!
6022,"**JavaScript.**

You can write your server in it. You can write you website it in. You can write your native app in it.

It's flexible, expressive non-oppressive and there are lots of resources out there for it.

JavaScript frameworks are there to help you organise application logic. They are not essential, in the technical sense, but in the practical sense you'd have a hard time building an app/webapp without them.

In my opinion, start by learning about the two halves separately.

Start with front end, use JQuery because there is almost no learning curve. Have it plug into a REST API and repeat/spit the data on the screen.

Use this for your sample data: https://jsonplaceholder.typicode.com/

Then use JavaScript on the backend with NodeJS and Express, to recreate the API and point your app to that.

Then use your imagination and drive yourself forward. Try React or Angular for the front end. Try using a database on teh backend. Add some styles, etc."
6023,"Thanks alot for your feedback! Sounds great, i will do this at that order"
6024,"If you want to become a web developer you need to learn Java, PHP, Python and .Net.."
6025,"First of all, very cool to see someone so young and so motivated!

As far as languages, for web dev, HTML/CSS and JS are musts. Python is cool, but focus on those.

source: work at a company building a web dev product"
6026,Thanks! Ill be studying JS more rigourously now.
6027,"Java, C#, JavaScript, SQL"
6028,"Potentially also Kotlin. It's picking up steam quickly, and won't be vanishing anytime soon."
6029,"True.  Its still early, but like Swift did on iOS, it'll start to outpace Java in certain circles, like Android"
6030,"A friend of mine is an Android developer; after I told him about Kotlin, he took it to his team, and after review, they jumped straight on the bandwagon. They're porting every app in their portfolio over the course of the next year.

I'm not familiar with Android development, but I have worked with Java in the past...For something to be _that_ appealing, I'd imagine it's got to have some pretty great features.  Like everything, only time will tell, but the outlook seems good."
6031,"It wouldn’t hurt to learn WordPress and PHP. A lot of companies out there want designers/developers who can crank websites out at a steady pace. That’s exactly what WordPress allows you to do. It may not be your final gig, but it will be a great way to get into the industry."
6033,"It's not bad advice, imo. I detest working with WordPress and only do so for blogs that I don't want to be bothered with making. 

That said.. there are a ton of jobs out there for places that churn out WordPress sites. If the employment landscape says WordPress, well you learn WordPress. I don't know that it does for OP."
52398,lmao
6035,"Not bad advice, also not great companies to work for."
6036,Python and Django as a server-side technology. Javascript / jQuery as a front-end.
6037,"> Javascript / jQuery as a front-end

It's inevitable that you're going to run into jQuery from time to time. It's not dead. It's a handy tool from time to time. A lot of the things it was created to resolve are gone or disappearing though.  Things like differing cross-browser behaviors, the need for simple animations, and so on.  Focusing on it as somebody entering the field isn't necessarily recommendable.  Should you learn about it? Yes. Should you learn _how it works_? Absolutely.  Should it be your main focus? Not if you want to keep moving forward."
6038,He did ask what he should be learning.
6039,"i'm going to be a contrarian and mention c/c++ and assembly...at least on an arduino or other small embedded dohicky, if not on bigger metal like x64. also play around with linux enough to be familiar with how to use bash to string command line programs together.


in other words:

1: learn how computer works all the way down. you don't need to be an expert, but you should at *least* be familiar with memory addressing, the stack, pointers, registers, opcodes, and enough of the structure of c/c++ to be able to write your own file copy routine, search a file, fizbuzz, and fibonacci generator. ideally, you would write a web server, even if it's an extremely crappy one.


2. learn bash and complex command line things. understand *why* 'echo \*' does what it does, know your pipe, your redirections (including stderr), grep, vi (even if you don't like it or emacs), wc, curl, wget, sed, find, ssh, ping, nslookup and source control. i'm sure i'm missing a number, but it's late. knowing this stuff will seriously prevent you from reinventing the wheel or spending a crapton of time doing repetitive and boring work. oh, you should probably be familiar with regex.


bonus: learn sql to a level where you are comfortable talking about and implementing 3rd normal form, avoiding sequence scans, and creating both pk/fk constraints and indicies.


bonus: learn how to configure apache and other tools you use. 


you don't have to be an expert at all of these things, but having a more than passing relationship with them will make your life a hell of a lot easier as well as making you an *lot* more valuable than a simple js assembly line worker. besides, if you know enough about what your sysadmin, dba, etc do, it's easier to talk to them and they are more likely to work effectively and efficiently with you when you know sorta what it takes to do the things you are asking them to do."
6040,Thank you for your feedback! I will start learning cmd right away
5637,HTML
5638,Really
64661,XD
5641,"HTML is not a programming language, it’s a markup language."
5642,That’s the joke
5644,My colleague and I both learned Java in school and now work with PHP. We both just kind of went where the job was at.
5645,"JavaScript, Html, css for front-end. I would suggest Asp.Net core MVC (C#)  for back-end."
5646,"That’s me also, and who posts jobs for one language?"
5647,Javascriptures know them live by them
5648,"For the frontend you'll pretty much have to use HTML, CSS and JavaScript, after that you can progress into various JavaScrupt frameworks (Vue.js is relatively easy & fun to use, and with React it's easy to find a job; Angular is the hardest to learn).

For the backend JavaScript works as well, but you'll have much more fun with Go or Ruby in the long term, and if you want to easily find a job as a backend developer you could look into C# or Java. You probably also need to know a bit of SQL."
5649,I fucking love Ruby. Ecstatic to be able to use it full time.
5650,"Same, such a joy to use. Pays well too"
5652,Show me on this doll where they touched you
5653,Cool
5654,job postings != job openings
5655,javascript and maybe php for backend
5656,"By far JavaScript. You can do both front-end (fancy UI stuff in the browser) and back-end (getting data from databases, serving files to computers connecting to your website, etc.) with JS. Also note that front-end stuff will require you to learn HTML and CSS, but JS is the actual general-purpose language you'd use for programming logic (e.g. front-end: ""pressing this comment button will send the server all of the text I just typed"", and backend: ""I just received a new comment, better add it to the database"")."
40097,C
5658,"To begin with you should start with HTML, CSS and JavaScript. Then move into JavaScript frameworks such a React etc And to transition from the frontend to the back end you can look into nodejs, databases, servers etc  
I would suggest you look into some free bootcamps such ad [FreeCodeCamp](https://www.freecodecamp.org/) to see if you like it. But if you need some help when you get stuck I recommend you [Practicum by Yandex](https://practicum.yandex.com/). Although there are many bootcamps out there I can recommend you only these ones because they are great online bootcamps that I 'm using myself. I wish you the best of luck with your coding learning journey!"
5659,"HTML and CSS are absolutely necessary, these are just the basics.  I would also recommend learning javascript too.  This will at least make your skillset more well-rounded."
5660,"For mobile/web development its javascript if you want to be a jack of all trades,you have a library or a framework for everything"
5661,Once you're good at C++ (or really any language where you have to keep track of your own memory) you can basically just google everything to get by pretty easily.
5662,Good luck explaining that to the person hiring you.
5663,"Oh, I meant it more as it being easy to learn everything else once you know C++.  I didn't realize the post was about getting a job."
5664,"You may want to check out [The Odin Project](http://www.theodinproject.com/). It is basically a free online self-paced coding bootcamp. It has seven courses that use the best tutorials from around the web, and organize them into the proper order to give a relatively gentle learning curve. If you spend several hours a day on it, 5 days a week, you should be able to finish all seven in two or three months I would think. You of course don't have to do all of the courses, but I do recomend doing them in order."
5665,"This looks absolutely fantastic. Have you done the Ruby and Ruby on Rails portions? I've used Code Academy, but similar to my love of traveling while working, I like a change of scenery and spending some time on CodeAcademy and elsewhere sounds really appealing."
5666,"I have nearly finished the webdev 101 course, about to start the Ruby section. 101 touches on everything, but even with that you will be building a Rails blog and putting it on GitHub. 101 even covers using RSpec to do Test Driven Development, which seems to be common in the industry but is something a hobby programmer may never come across. With all that just from the intro course I am very interested to see what is covered in the more detailed sections."
5667,This looks amazing.
5669,What are the seemingly better solutions?
5670,"So to sum up: HTML & CSS are essentials and the backbone. Next I should learn some vanilla JavaScript which also gives me knowledge in node.js and some framework functions. Lastly I should learn MySQL which would be a database language. 

Then (if I have time): Ruby on Rails or Python, WordPress or Drupal, nodejs, Linux, some popular js frameworks, postgres, some popular nosql dbs, Java, Erlang."
5671,Sounds like a good plan to me
5672,"If you **really** learn HTML and CSS, you'll have job prospects. They're ""easy"" languages, so they get glossed over by many devs, but there's a chronic shortage of real front-end devs in the market. Most ""front-end devs"" are just people who've learned a few hot JS frameworks; that's not actually front-end, though. 

Getting the nuance of HTML/CSS takes time and a good eye (experience). Learn vanilla JS, too, because knowing that means you already know most of how each flashy new JS framework functions before you start. 

With vanilla JS, you're also semi-functional in Node.js by default. 

So I'd say HTML/CSS to start — those alone can land you a job. 

Then JS. Solid JS skills make you a full-stack developer. 

PHP is useful, but you can do everything PHP does with JS now. So learn it, but not first. Check job trends for PHP vs Node/JS for a strong argument as to why. 

Databases are worth learning as well, but start on the front end. Back-end devs are many, and the skill level is generally higher (take that with a HUGE grain of salt, because there are a lot of low-quality devs of all shapes and sizes and flavors out there).

Good luck!"
5673,"Can you actually land remote jobs knowing only HTML/CSS/minimal JavaScript? Or are you talking about non-""digital nomad"" jobs? When I look at Elance and related freelance sites, most of the employers are wanting a lot more than HTML/CSS/JavaScript knowledge...unless it's a $10 gig. 

I'm trying to figure out how to translate what I've learned in beginner HTML/CSS/JavaScript books into ways of expanding my minimal knowledge while earning an income, but, again, most require a lot more than minimal knowledge. 

What I'm trying to say is it seems like you have to invest a lot of time in a lot of different skills (other than HTML/CSS/JavaScript) before you're hirable for even freelance gigs. Or am I wrong?"
5675,"Yes, that's the feeling I get. Speaking of programming in Switzerland, considering it's one of the best economies in the world, how much do web developers make there? Are there a lot of positions available for qualified people? My friend had a Swiss girlfriend and said he sometimes had to pay $20+ for a hamburger there, so maybe a lot of USD wouldn't go a long way. :)"
5676,"I'm making really good money right now with just HTML/CSS/very minimal JS /WordPress. I'm almost done my degree in CompSci, but I had never worked on them before a few months ago. 

Zero professional experience in programming before this. There's jobs out there, just have to look hard and write good proposals.

I've found you can pick up a lot of shit on the fly. I'm working in bootstrap right now despite having never learned it. 

I don't know how hard it would be if you've never done any programming before."
5677,Define really good money? A living wage for a 1st world country? Where you finding work? UpWork?
5678,"34/hr CDN. I live in Canada, found it on Elance. More than enough to live on for me.

By really good money I mean really good for someone with no previous programming jobs and like 2 months experience in Wordpress.

Kijiji is good too. The postings are regional, but there's still remote jobs on there. I've gotten a few 17-20/hr(CDN) jobs from there."
5679,40 hours per week? A remote job or freelancing?
5680,"Remote freelancing?

So far it's been 40+/week. I'm sure it will slow down once the major stuff is done.

I think that if you are committed you can make it work. But maybe I just got lucky, I don't know. Being a young, innocent looking white kid probably helps on freelance sites. I think for the good jobs it gives me an advantage."
5681,"Some freelancers work on site eg. contractors or at least live in the same city and meet the client. I want 100% remote with just email and maybe a phone call.

Do you have a portfolio site? How did you market yourself?"
5682,"Yeah I use Skype, that's it.

No portfolio site. Although once I'm done with my current jobs I'll probably set one up. 

I've gotten the jobs that I have by writing honest proposals. If I haven't used a framework before, or if I don't have much experience in something, I let them know. I just try to convey that I'm ambitious and will put in any amount of work that it takes to learn what they need me to know. Be confident that you can learn anything.

A lot of employers aren't looking for the best programmer in the world. They are looking for someone they can communicate with, that will put in the effort and time required to get the job done. Sometimes enthusiasm > experience. Good scores on the elance/odesk tests help as well.

Again, maybe I got lucky and after these jobs I'll be fucked. Who knows, I just started this. But having no money is a great motivator so I'm sure I'll figure it out."
5683,"Were you hired to work for a company, or are you doing freelance type jobs where you bid on work? Would love to hear more about how to land this type of work. I only know basic JS/HMTL/CSS...and all I know about WordPress is how to use the CMS (but nothing technical)...anyways, I love learning about it, but it all seems fairly abstract and like any type of paying job is far out of reach. Haha."
5684,"Just freelance type jobs. I mean technically they are a company, but it's not like I've signed any papers or anything. 

Working with Wordpress is really just editing the theme's HTML/CSS/PHP/JS files, it's pretty basic as long you know those languages. If you know how to program, you can do the work. 

It's easiest to learn when someone actually gives you a job. If you got a wordpress job and someone said ""change x on this site""(which is what it generally is because there's usually a starting theme), I'm sure you could figure it out. It's just a bunch of googling until you start remembering everything. 

Keep working on your own test sites, and applying to jobs. Eventually someone will hire you, even if it's for not that much money. That's how you learn and get good reviews on freelance sites. It's really not too far out of reach. Even with your basic knowledge you know more than a lot of the people looking for employees."
5685,"I think you can get freelance work for sure, but I also think ""digital nomad"" jobs can be full-time. There are a good number of startups who really need good front-end work that have no location requirements. 

I spent a very long time making a lot of money (over six figures USD) doing nothing but highly customized WordPress themes. The work was 90%+ HTML/CSS with light JS (mostly changing container classes to trigger CSS states) with the rest being the PHP to insert WP template tags. (You can hire this out very easily; I did that for the last few years even though I know how to do it myself.)

Don't fall into the trap of believing that there's a magical quantity of knowledge required to get freelance work. There's not. It just requires knowing a little bit more than a client and having the confidence to sell that. 

You'll pick up skills with experience. I recommend picking up as many as you can over time, because it keeps the job exciting. But no matter what you work on, HTML/CSS will come up. And JS will be close behind. 

Good luck!"
5686,"I've got HTML, CSS and am well into learning JS, now I'm thinking of starting some database management so I can get more well rounded in my skills, what is a good database language/system to learn? I guess what's considered most useful or most asked for (easier is good too haha)"
5688,"Cool, thanks!"
5689,"Really depends. After you get through the religious wars of SQL v. NoSQL, then you have a whole shitload of other factors to consider. 

Mongo is a good starting point for NoSQL.

Postgres and MySQL are good for SQL. 

But keep in mind that different DBs solve different problems. 

Good luck!"
5690,how do you find prospects with html/css skills ?
5691,"People need good front-end work. Companies have a lot of back-end developers and no one to prevent the back-end developers from making their apps/sites look like shit. 

Companies have no rhyme or reason to their HTML/CSS style guides. Teams add duplicate pieces, they misappropriate styles, they wreck the semantic integrity of their sites. 

Being able to create usable, semantic, modular markup and style sheets is unbelievably necessary and rare. IBM just hired a friend of mine to try and rescue their bloated, disjointed front-end. He's making upwards of six figures now. 

I made WP themes (basically HTML templates) for years and brought home upwards of six figures. 

There's work if you want it."
5692,"Interesting, ok there is work. But in my country ( italy ), I don't know how to get prospects. Do you cold call companies ? I tryed cold email, cold call and direct mail. But nothing worked."
5693,"Just keep trying. Change what you're offering, change how you describe it. 

Show up where your clients will be (meet-ups, conferences). Ask for intros when you meet people who know potential clients. 

It's hard to get the ball rolling, but easy to keep the momentum once it starts. 

Good luck!"
43279,thanks
5695,Throw in MySql and you're good to go.  Build a solid portfolio before though; you're competing with 10s of thousands of developers who work for $15/hour. Don't let that stop you. If you're good and have a solid portfolio you'll have no trouble finding consistent work.
5696,MySql + ?
5697,"Do you know how to program at all?

If you are completely new to programming, I would go in the opposite direction. Learn Python or Ruby, outside of a web framework entirely, and get your basics down. Learn how to wield the power of all of the libraries available for those languages and do cool things. Once you can look at code from a language you haven't worked in before and understand what it's doing, THEN go learn html/CSS/JavaScript/SQL.

Please don't learn PHP or Javascript as your first language. Those languages are really bad, everyone knows it and puts their fingers in their ears. You will be a better programmer if you learn Python first."
5698,"I have programmed before. I graduated college in December of 2014 in Information Systems where I did two semesters of Java, 1 semester of SQL, 1 semester of COBOL, and one semester of JCL; so I know the basics. As you know, once you stop coding for a year or more you get rusty. Plus Java was object oriented whereas, as I understand web development languages are pretty different. 

I think I'd be alright going the HTML - CSS - JS - MySQL - Wordpress route. I have a really good HTML/CSS book which I follow pretty easily and will be following that up with the corresponding javascript book. 

http://www.amazon.com/Web-Design-HTML-JavaScript-jQuery/dp/1118907442/ref=sr_1_1?ie=UTF8&qid=1435163751&sr=8-1&keywords=html+css+books"
5699,"In that case, go for it. Definitely learn a framework. WordPress is popular, Drupal is what my dev team works with. Open source frameworks mean that you can just grab a module for the thing you wanna do, which makes everything go a lot faster.

You could just learn Ruby and Rails instead of PHP, which will probably be easy if you used to do java. It's not as specifically in demand but there's still a lot of sites running rails.

Django is cool but don't learn django."
5700,"> Django is cool but don't learn django.

why?"
5701,"HTML, CSS, JS, background language of choice (Php / Ruby / Python) sounds like a solid plan.

You can start looking for work after doing HTML/CSS thoroughly and improve your JS on the (front-end) job."
5702,Out of ruby php & python which do you think has the least competition? Should I look into mysql as well? I did some sql in college and know how basic queries operate.
5703,"Learn Ruby. It is a beautifully designed language that will help you form a concept of programming. A popular web framework using Ruby is Ruby on Rails. It is a joy to use, and easy for beginners because it is very strongly opinionated (e.g. dictates you on where to put stuff). You will pick up HTML and CSS along the way.

An alternative is learning JavaScript and use a full-stack JavaScript framework. I recommend Meteor. I think it will become very popular in the coming decade, just as Rails did. One thing I don't like is that JavaScript is not particularly a pretty language and it can be frustrating to use. I felt so when I was just starting out."
5704,Also see http://www.reddit.com/r/digitalnomad/comments/2zhlmt/what_kind_of_webdev_is_better_for_a_nomad/
5705,"Checked that out while at work earlier but only skimmed over it. Read over it more in depth now that I'm at home. 

Do you think Wordpress development and angular JS are worth it and/or potentially more marketable then just HTML + CSS + Javascript + MySQL?"
5706,"HTML CSS JS, definitely learn those first, no doubt about it. I'd hold off on MySQL, you _might_ not end up using it depending on your spin. _After_ learning the 3:

1. Wordpress.  A quick-n-easy path to cash, highly recommended. If you go this route, learn MySQL. You code less in WP (unless you're a themer =  CSS); you build more through it's web interface. So if you're more for getting sites out the door in minimal effort, go this route.
1. Angular. If you enjoy coding, give front-end dev a spin per that post (Angular & React are good choices). For this stack, use NodeJS for your server. It's JS, so you don't need to learn new stuff (compared to learning Ruby on Rails), big learning-curve-saver. Use MongoDB as your database, it's the path of least resistance for this stack. You can actually skip glueing everything together and get the whole shebang [here](http://meanjs.org/). Or if you're feeling more experimental, try this [one instead](https://www.meteor.com/). A big benefit of learning Angular or React is you can transfer that knowledge to building mobile apps as well (see [Ionic](http://ionicframework.com/), [React Native](https://facebook.github.io/react-native/)).

I personally prefer option 2 (obviously), but I love code. I come from a background of option 1 (actually using Drupal, not Wordpress) and it's really solid for dishing out websites hand over fist (read $$$); but it's pretty boring IMO. All personal preference."
5707,How to find the clients?
5708,"I hate to bother you, but do you have any advice on how to get started and find clients? Especially for option 1, while I work on option 2?"
5709,"So here's how you go about it: you need a portfolio, and you'll build it in steps. 

* Step 1) make a few free websites / webapps / mobile-apps. Build a promotional site for one of your friend's / family's businesses (eg, their photography website, etc). If you or a friend have had this ""killer app idea"", crank it out in Ionic. And of course, #3 is your actual portfolio website itself: `{yourname_or_businessname}.com`. Step 1 should take ~1mo.
* Step 2) make a few _cheap_ sites/apps. Now you have something to prove your worth, time to test the water. Do this at [oDesk/upWork](https://www.upwork.com), [Elance](https://www.elance.com/), [Freelancer](https://www.freelancer.com), [Fiverr](https://www.fiverr.com), etc. These are websites for finding global talent. As such, you're competing with devs willing to work for $5/h. It's a career non-option for westerners, but it's a great place to start practicing with clients. These sites' customers kinda _expect_ to get what they pay for - trust me, I've hired from these sites, and have friends who did too. ""The work was sub-par, but hey - can't beat the price!"" In other words, you won't feel your career / reputation on the line quite as much in these ""practice grounds."" I'm sure I'm making legitimate bid-site users cringe, but that's how I've used these sites. Step 2 should take ~1-2mo.
* Step 3) Now you have 4-6 portfolio pieces, you're in! The best way to get a solid gig is in person or through connections. Go to [meetups](http://www.meetup.com/] (search ""javascript"", ""angular"", etc) and present / network. Ask your friends / social networks if anyone's looking for talent. Now, this is a slower process than hunting online, but it yields higher-paying gigs, better clients, and overall more rewarding work - ask anyone. _While_ you're doing this (in the background) start searching online, but remembering that in-person/connection gigs are usually better, if you're presented with one of both ;) Ok, online. My favorite sites are the following:
  * W2: as in careers, part-time/full-time, on-site _jobs_: [indeed](http://www.indeed.com/), [simplyhired](http://www.simplyhired.com/), [linkedin](https://www.linkedin.com/), [hired](https://hired.com), [TopTal](https://www.toptal.com/). **Ignore this section**, since you're looking for freelance.
  * 1099: as in freelancing, remote, one-off gigs. My favorites: [gunio](https://gun.io/dash/), [remoteok](http://remoteok.io/), [peopleperhour](http://www.peopleperhour.com/). RemoteOK aggregates many good gig boards, so I've excluded _those_. Any other boards someone would recommend? Also, google search jobs in your chosen technology, eg ""angular jobs"" or ""react jobs"". Some more I haven't investigated: [awesomeweb](https://www.awesomeweb.com/), [whitetruffle](https://www.whitetruffle.com/), ~~/r/forhire ([nevermind](https://www.reddit.com/r/digitalnomad/comments/3c9sep/does_anyone_find_work_on_rforhire/))~~"
5710,Thank you very much for the detailed answer!
5711,"Don't be afraid to apply to jobs where you don't meet all the requirements. If you are working on something that is already built and you don't need to go from scratch, you can learn as you go.

For example if you know html/css/js, then you can apply for wordpress jobs and just learn as you go. You don't need to know every framework."
5712,"I would add nodejs, Linux, some popular js frameworks, postgres, and some popular nosql dbs, and possibly Java or Erlang for the back end."
5713,Neither of those is a language.
5714,Why and what ?
5715,"Well, they're both frameworks. The languages are JavaScript and Ruby. I'd recommend Ruby btw"
5716,Rails is a framework. Node is a runtime
5717,"But node js is getting more popular day by day, like why not go for js instead of ruby any drawbacks?"
5718,"No, I just like Ruby better. That's just my opinion though"
5719,at least read the faq https://old.reddit.com/r/webdev/wiki/faq
5720,English. Most instructional web development material is in English.
5721,"To start with: basic HTML, CSS and JS.  
For the back end: [It depends](https://github.com/kamranahmedse/developer-roadmap)"
5722,You might be interested in the [web dev roadmap](https://github.com/kamranahmedse/developer-roadmap)
5723,I would learn the language that is popular in the area I want to get employed.
5724,"Those aren't languages, rails is a framework, and node is a runtime. And there is no *best*. Dip your toes in both JavaScript and Ruby, then focus on the one that makes more sense to you."
5725,Sorry to be pedantic but Node is not a framework.
5726,"Thanks, you're correct - node is a runtime. Edited my comment."
5727,laravel
5728,"This should be a good intro into the things you should learn.

* [Web Developer Career Path](http://youtu.be/zXqs6X0lzKI)

If you want to go more design and Front-End, use Sass.

* [Sass: The easiest way to get started](http://youtu.be/CV2fdPMdkn0)"
5729,"I highly recommend Sass. In my experience even though I learnt CSS, JavaScript and HTML, I didn't really have any clue on how companies actually made use of these technologies and how they fit together in the overall picture.

It was only after I did some lessons on [Coursera](https://www.coursera.org/) and [CodeSchool](http://mbsy.co/7Crq3) did I figure out these technologies from a practical point of view. Specifically, check out the [Start up Engineering](https://www.coursera.org/course/startup) course on Coursera and Assembling Sass (part 1 and 2), JavaScript courses on Code School.

If you are comfortable with JavaScript, I'd suggest you to get familiar with frameworks like Jquery, Ember.js, Backbone.js, Node.js, and Coffeescript. Most startups that I have worked with extensively use these. There are plenty of video tutorials on Youtube for these frameworks but I found [Code School's](http://mbsy.co/7Crq3) Learn by Doing approach worked very well for me. Also, it'll help you immensely if you are comfortable with Git, Github and Chrome Developer tools as they are pretty much used everywhere.

Edit: changed Saas (Software As a Service) to Saas (Syntactically Awesome Style Sheet)"
5730,">changed **Saas** (Software As a Service) to **Saas** (Syntactically Awesome Style Sheet)

So close!"
5731,"Saas is not the same thing as Sass, by the way."
5732,Thanks. I made the correction.
5733,jQuery is not a framework
5734,That guy is fucking awesome...incredible insights.
5735,"I was reaching the point in both my frontend and backend learning that I was start to go, ""Well, what now?"" This was absolutely perfect for getting me back on track. Thanks for the link!"
5736,Great! Thanks!
5737,It should be noted that SCSS is the latest version of SASS.
5738,"Sass is a css preprocessing language that has two different filetypes, each used for different syntaxes. Beyond the file extension and the syntax, they are identical and always kept at the same version.

1. **SCSS** (Sassy CSS) - simply renaming a .css file to .scss produced a syntactically valid file. However you can edit it to use variables, mixins, math, nesting etc.
2. **Sass** (Syntactically Awesome Style Sheets) - This is like the shorthand version. There are now curly braces or semi-colons and accurate spacing is mandatory. This creates easier to read code and is faster to type and not prone to errors caused by forgetting a closing brackets or semi-colons at the end of lines. However you can't just copy/paste in regular CSS, it requires reformatting to Sass syntax.

***

###Code examples

SCSS: (spacing irrelevant, curly braces needed)

    #wrapper { display: block;
    p {color: #F00;}}

Sass (spacing mandatory, no semi-colons or curly braces allowed)

    #wrapper
        display: block
        p
            color: #F00"
5739,"Yes, and the latest of the two is SCSS."
5740,"Again,

> Beyond the file extension and the syntax, they are **identical** and always kept at the **same** version.

Neither is ever ""newer"" than the other. They are the same."
5741,"If you're on a mac I highly recommend Koala. Its a much better GUI than Scout. Also besides setting up scout on your machine DON'T LISTEN TO THE GUY, he says about as many wrong things as right."
5742,"Basic sql to query. 

Basic table and view design to store. 

Basic denormalization to store intelligently. 

Mvc pattern for organizing your front end. 

Unit testing if your Web app is a commercial endeavor. You need to prove your stuff works so your  customers don't suffer. 

Javascript up the wazoo for manipulating the interface. 

Edit: I can expand on any of this if you like, I'm on mobile right now and typing industry words is a pain with autocorrect thwarting my every turn. 

Whatever floats your boat in between. 

Proper repository and deployment practices so you are employable by larger firms. They don't employ production cowboys for long."
5743,I would love it if you could translate most of this.
5744,"Sorry this took so long.  This assumes you know how to build a basic website and use javascript.  It helps if you know a bit of some other language.  You will be doing a lot of googling of keywords as you move through this.  Don't be daunted - this wall of text is the sum of 4 years of college and 7 years experience as a developer.  I did not learn all of this at once or even in a year.  Go through it slowly and you will find sections to skip and others that change before you get there.  ""When I was your age"" we didn't have PowerShell or Puppet or Octopus.  We didn't have things like Ruby that forces MVC on us.  We didn't have JSON and we barely had XML.  Shit below may not exist or be relevant when you get to it, so don't worry!

Query:  Get data from a non-code source and load it into your code.  This can be a file via a FileStream or a database via a SQL or JSON via <plethora of ways to generate JSON here>.   Traditionally, you must know a bare minimum of SQL, but JSON is growing much more prominent in classical settings.   SQL:  learn the following key words:  select from table view where group by order by insert update delete.  Once you can use a database and get the data you want out, you can move on to... 

Basic table and view design, normalization/denormalization:  This is how to store your data and link it together.  You could build a giant spreadsheet with duplicate data all over the place but with minor effort you can build much better systems that respond faster and grow easier.  Bob has 5 siblings.  Do you store Bob, Sibling1, Sibling 2, etc on one row?  Do you store Bob, Sibling# 5 times?  Or do you store 6 people and relate them together in a second table?  This is called normalization.  Views are simply shortcuts to groups of tables so your code doesn't have to have dozens of rows of sql.  You can also change views without changing your code or your tables.  This is the most a basic web developer needs to know in order to not be looked at with scorn :P  Once you can build a few tables, populate them with data, and query them, you are ready for....

Loading all of this from code:  Keywords to google (in Java and C#, not sure about other languages):  SQLConnection, SQLCommand, ExecuteScalar, ExecuteQuery, Connection strings, DataTable.  Write a console application that connects to your database, grabs some data, and then loads it into class objects.  Once you have this, you are ready for...

Whatever floats your boat in between:  C#, Java, Python, Ruby.  Doesn't matter.  Pick one you think is interesting and has a lot of references.  Learn how to connect to your database with it.  Learn how to interact with a user with it.  When you have an application that can take user information in a text box and store it in the database, you are ready for...

MVC (or related patterns):  Model View Controller.  Google it, learn it, master it.  View:  HTML/Javascript.  Model: JSON or custom class to hold data.  Controller:  Pure code doing almost all the work.  Think of it this way:  You are the boss of a graphic design firm.  You have a lot of employees who are extremely good at drawing but have no clue how to run a business or talk to customers. You have interns who are just happy to be here holding their pencils, running errands, and other menial tasks so the artists stay working.  This is MVC.  The Views (artists) do nothing but interact with the user by rendering images and content.  When the user clicks on the of the buttons, the Views (artists) just tell the Controller (you aka boss) which button was clicked.  You then ask the Models (interns) what is going on, make a decision, and tell the Views (artists) your decisions.  By doing it this way you can separate your design decisions (image goes here, this is a radio button instead of a checkbox, etc) from your code decisions without either impacting the other severely.  Once you understand this idea, you are ready for:

UNIT TESTING!!11!:  Unit tests are about writing code to prove your code does stuff properly.  MVC's entire point is to allow you to do MORE testing without getting tangled in image manipulation or layout problems.  When you wrote your first Hello World! application, how can you prove it wrote Hello World! instead of HELLO WORLD! or helloworld1?  Unit tests prove that it did exactly what you intended.  When you change your code, your unit test is still there in the background and will still prove your change didn't impact anything that was working before.  When you make a change and tests start bombing, you can ask yourself if the change you made should have been made at all or if you did it wrong or if your code is built properly if such a small change destroyed so many tests.  They are important as soon as you build anything that can go wrong and impact users.  Tests aren't perfect but they prove that at least parts of your application work properly BEFORE the user gets it.  They also let you debug better - build a test that duplicates the scenario that is breaking, then code the test to work, THEN fix your code.  When the test passes, you're done.   Once you understand and have a few tests, you are ready for...

Proper repository practices:  Now you're awesome at web design and you get hired onto a team.  How do you make code changes without impacting what other people are doing?  Repositories.  GIT/SVN/Mercurial are the popular three.  You need to learn how to commit your code, how version control and merges work, as well as other key words such as branch, tag, trunk, pull, checkout, etc.  You ~MUST~ know this in order to work on a team.

Proper deployment practices:  How do you get your code onto a production (public-facing) server?  How do you ensure the code that is ready gets deployed but the code you are still working on doesn't?  What if there's a bug in production but you can't reproduce it locally?  What if after deployment the site doesn't work?  Deployment practices are about ensuring what you do locally works on production.  In a large firm you are not allowed to change production servers.  Ever.  Someone else does it, and they have no idea what you did.  ""Oh I forgot to set this web server config file so the website works""  Too bad, you're fired.  Every worksite is different, but there are tools that automate deployment you can learn to get a head start.  Heroku uses some by default and my workplace uses Octopus.  There is also Puppet and a few others.  None of them are necessarily better than the others but they all teach you how to get things into a production server without manipulating config files or dlls by hand."
5745,"You asked what you NEED, and a lot of these answers aren't addressing that. Here is what you need. There is a ton more, but no matter where you work, as a web developer you will need to know this stuff:

* HTML
* CSS
* JavaScript
* SQL is the basic database language. MySQL, postgresql etc. are all different implementations of the same language. Just learn SQL however you do it. 
* Any of the three major backend languages. People are very opinionated about which one. Ruby, Python and PHP are the most major. There are too many advantages and disadvantages to go over here. But you need to know one of them for starters. 
* MVC frameworks. Understand how to separate the model, view and controller in your programs. 

Good luck!"
5746,Could also use Javascript through the Node.js framework for backend but otherwise this is the best answer here by a long way. Personally I chose Ruby on Rails because it had the best free learning materials online.
5747,"Thanks! Yeah, I thought about including Node.js. I'm glad you mentioned it. I chose RoR too for the same reason."
5748,"#HTML5
#CSS3
#PHP
#Javascript
#Python
#MySQL"
5749,"I'd leave out Python. Not because I don't like it but because you can replace it by any other arbitrary language. Could be Ruby for example but it's not essential language to know. I think for being employable HTML/CSS/JS works good with PHP/MySQL for server side. You can then, of course, dive into Python and Django, Ruby and Rails, or other hot frameworks based on JS like Node and so on."
5750,"The OP claims to already know at least some Python so why start over with PHP, which is brain-damaged and next to useless off the server?"
5751,Better to learn a Python Web development framework than pick up PHP if you already know Python IMO.
5752,"Difference between html and html5, and also CSS and CSS3? Also, if you learn html5 and CSS3, do you have to learn html and CSS?"
5753,"HTML5 and CSS3 are just the newest standards of HTML and CSS. They include new (super cool) features, but the same basics are all still there."
5754,TY!
5755,"You should not learn the older versions of HTML and CSS since it might lead to you using redundant code that is not supported by modern browsers. That said, when you learn new things about HTML5 and CSS3, do keep checking for **browser compatibility** since many of the new HTML5 elements aren't fully supported either and it may lead to your code behaving in a different way than intended. Don't get confused. You will understand what it means when you start the learning. :)"
5756,"HTML5 is a HTML version, it changes some things from HTML4 but it's 99% the same thing.

CSS3 is a CSS Level. Basically CSS comes in levels which should be implemented incrementally, that means CSS1 stuff is more well supported than CSS2 stuff, and so on.

For example, CSS1 has the features to change the background and the text color, CSS3 has text shadow, box shadow and transitions, CSS4 will let you set the text direction(top-down THEN right-left for example) which can be used by non-latin languages, such as Japanese, to render more native-like text."
5757,"You need   
1) HTML / CSS like you already know  
2) Javascript like you said  
3) Some back end language. Python is fine, PHP, c# for asp.net  
4) Basic SQL. You can use it with mysql, mssql, or another database.  

A lot of posts here are focusing too much on what specific language. Part of becoming a good programming is learning how to learn programming. You just need one of each type, then in the future as the need arises you can learn the ones you need to know for the job. It's also good to learn the strengths of each language so you know when to go ahead and learn a new one.  

I personally went the C# for asp.net MVC and use MS SQL for the most part, but i doubt the microsoft stack is popular here, and I wouldn't be against jumping to another stack for a different job."
5758,"People will argue about what backend language to learn, but if you're looking for employment you don't always have the luxury of choosing this.  You can't master every language, but you'd want at least a passing familiarity with any of these, and probably mastery of one:

- PHP
- Python (Django, flask)
- Ruby (Rails)
- Java
- NodeJS

These are the languages in which most websites & web apps are written.

Probably be a good idea to know a bit about Linux (setting up Apache or NginX, in particular), and any programmer should know some SQL."
5759,"If someone decides this route, I would probably advise Java first, then python, then the rest in any order. All of the rest are object oriented, and Java forces you to learn how to use it. Once that's more or less done, you can expand your horizons with a sensible language like Python, and it will be easier to approach everything else."
5760,"I'd say you could also go with first Python, then Java to start out simple. Understanding OOP and then going to learn Python, starting without classes, sounds a bit weird to me. Though I started with Java too so it isn't that big of a difference."
5761,"I'd say learn PHP first, since if you learn anything else first you won't want to learn PHP. ;-)."

idx,text
67077,"Nope. Just do this one at 11 Am then book your next one for sunset.  Or go to Skydive San Diego, get your license, then jump on your own at sunset."
67078,I would go to Skydive Santa Barbara to avoid the traffic
67079,There's also Taft toward Bakersfield.
67080,There's skydive coastal California in Ventura
67081,But I think they only jump from 10000 ft - they are a small cessna dropzone.
67082,I'd go to Perris and jump out of a skyvan if you can.
67083,"+1 - my first tandem was from a Skyvan and it's an experience like nothing else.

But overall, I'd say Oceanside, especially sunset load, would be awesome. Sunset load at Elsinore isn't bad either - Elsinore's my ""second home"" DZ."
67084,"From Malibu, Perris or Elsinore to the east, or Skydive Santa Barbara to the north which is actually in Lompoc. If you're coming from Malibu all your options are going to be at least 2 hours away."
67085,"Ok thanks. If that's the case, I might just stick with the Oceanside one since it gets really good reviews."
67087,"Second Skydance, did my AFF there. Haven't been to Skydive California yet but have heard great things"
67088,Gotta say Skydive California in Tracy
67089,Thanks! Going to check this one out! Seems great.
67090,"I'm there literally right now. They came highly recommended.

3 of us did the ground school yesterday and we're hoping for the weather to clear so we can do the first jump!"
67091,I'll be there Wednesday for ground school! Hoping for PM blue skies.
67092,"Second. I've never been there, but one of the AFF instructors is someone I know and highly respect. He's got a great attitude towards safety and is a kind and patient teacher."
67093,"I recommend skydive california as well! Great and super professional dropzone. I'm there almost every weekend, weather permitting."
67094,"I tried to do an AID course in PA. Only got 3 jumps in the course of a month. I then went to Lodi. I was able to get 20mins of tunnel time coached, my AFF and a working tandom for 1300. They will push you through it fast, and personally I like that. I want to get my jumps in quick so that I don't lose anything from the last jump. I had a uspa certified aff instructor that was awesome. All their gear is brand new, one of the larger landing areas, and it was way too spot the dz. It might not be for everyone, but I continue to go back."
67095,"https://www.reddit.com/r/SkyDiving/comments/5yd0vg/skydiving_near_san_francisco/

https://www.reddit.com/r/SanJose/comments/9hh708/whats_the_best_place_to_go_skydiving_in_the_bay/

https://www.reddit.com/r/bayarea/comments/6rpwir/best_sky_diving_experience_near_bay_area/"
67096,"https://bayareaskydiving.com

https://bayareaskydiving.com/first-jump/

I go here every year for my birthday.  Second link is for pricing."
67097,If you want to have a nice day trip you could also get out of the bay. I've done [Skydive Lake Tahoe](https://www.skydivelaketahoe.com/) and [Skydive Sacramento](https://skydivesac.com/) which were both good. The Tahoe jump had spectacular views.
67098,"Skydive Perris is world class. 
You will not find a better training program."
67099,Second vote for perris
67100,"Tandems and AFF/coaching are nearly always treated separately by dropzones, so there can be a pretty drastic difference between a dropzone's tandem service and their coaching. If you are focused on AFF and student instruction, I wouldn't use a tandem experience to inform your AFF decision. From my perspective, there are three things to think about for choosing a dropzone for your AFF/A-license progression:

1. Proximity - your A-license is going to take a full day of AFF instruction, 7 AFF jumps, 5 coach jumps, a packing class, and at least 10+ solo jumps to complete (25+ jumps total). This will likely take a month (or two) of weekends to complete. This means that the closer and easier it is to get you to the dropzone, the more likely you are to make this happen in a reasonable time frame.
2. Coaching Quality - every DZ has its own coaching culture and quality. Perris is one of the best in the world, but most of the larger dropzones (Perris, Elsinore, Skydive SD) are pretty good and the coaches will make sure that you are safe and educated.
3. Community and culture - as you start jumping and progress through AFF, your A license, and start jumping with other people after getting your license, you will want  additional coaching, friends to jump with, and more experienced jumpers that will help mentor you. Ideally, you want a group of people that feel similar to you so you can make friends and find groups easily, and each DZ will attract a different type of people and have their own style. Since you will start meeting people in all these categories during your AFF and A license progression, its nice to pick a dropzone that you will go to consistently after you get your license.

Given the above and your location (downtown SD), Perris, Elsinore and Skydive SD would all be good choices. The trade-off is probably driving time vs culture vs reputation. Skydive SD is half the distance, Elsinore has a pretty chill vibe, and Perris has a world-class reputation. Hope this helps!"
67101,"I'm on my #24 jump out of Elsinore. I love my dropzone. My decision was solely base on proximity because I live in the South Bay by Long Beach. Based on all the post, I would use this post by (\_searching\_) as a guide to make my decision. He outlined the nuances and differences between the 3 drop zones. It all depends on what you are looking for as  a ""culture"". In regards to reputation and professionalism, I feel that all 3 drop zones are equal based on what I have heard from other skydivers. 

I hope this helps. Do not hesitate to keep asking the question(s). 

Fly Happy and Blue Skies!"
67102,Part of skydiving is sitting around and waiting.
67103,"Yeah, wow. I have learned so much in the past month. I now love and respect the waiting around part."
67104,"I’m 16 jumps into my A at Elsinore and have also spent some time at Perris just hanging out but not jumping. I find that Elsinore is a more fun place to be and that fun jumpers there are friendlier. I also feel that I am getting solid instruction from my coaches. However as someone else mentioned, Perris certainly has the bigger reputation. The only time I’ve had to wait more than 30 minutes to get on a load was one extremely slow Monday where they stopped the plane for about 2 hours."
67105,Check out Perris and Elsinore and see which place you like the feel of best - both are top notch.
67106,I leaned at skydive SD.  I was rarely waiting around.
67107,"Did my AFF / A license at Elsinore and can't recommend them enough. Small enough to feel like you're getting the attention you need but big enough to have planes going up rapidly with little waiting.

Gear rental was included in the price when I did it. Think at most I had to wait maybe an hour for instructors to be done with other students, but that was usually just on the weekends. Usually got \~3 jumps in on a weekend and more on weekdays. After AFF Level 4 I managed to get more and more jumps in during the days since you go down to just one instructor, and solos went even faster.

On weekends and some Fridays they also have Post AFF Coaches that are free to jump with while you're getting your A license. Not sure if it's a common thing at other places too, but it was super helpful for me at least and I did almost all my solo jumps with these coaches."
67108,I was shocked when I found out about the free coaching offered! Amazing.
67109,Perris of course.
67110,"I live in San Diego and learned at Perris.  Perris also has some of the best load organizing especially for newly licensed people.  A lot of san diegans drive up to Perris as well for the better jumping.  A lot of people also makes the 2 hour trip from LA to perris.  It's not uncommon then to find people sleeping in cars or vans at the DZ as a result.  

Some people like SD for the smaller dz feel.  I just feel like they prioritize tandems too much ever since it changed ownership.  This is especially true if they are limited to one plane.  There were a few other things that I didn't like as a new jumper when I went there that ended up driving me away.  Once you are licensed, you can go to SD, Perris, Elsinore and Oceanside(once you have a B license).

Perris has a few other perks for students.  The wind tunnel is right there and is part of the first jump course.  Once you finish AFF and your coach jumps they also offer an LO to jump with you so you aren't stuck hucking solos til 25. Elsinore has a lot of ex-Perris instructors so is a second good option.  The only downsides to learning at Perris is if you wait to start in may or the summer.  It can be really frustrating there as a student when the winds hit 14mph and students go on a wind hold.  If you finish your A license before it really warms up then you might hit the wind holds more occasionally."
67111,"The journey to get my A license took 4 years at 4 dropzones across 2 countries. I haven't  jumped in San Diego yet, but I've been meaning to since my friend lives down there.  I have jumped at skydive West coast in banning, Perris and Elsinore and Skydive Mexico (Paracadisimo Tequesquitengo) My personal experience, and it's just my experience, The place I felt safest  was Elsinore. Thats absolutely nothing against Perris, Perris is a top-notch facility and I will say that Perris treated me a bit more like an adult than anywhere else.  I didn't go to Perris till the very tail end of the process where I was just doing the last couple solos so I'm sure the experience may have been different if I would have been there from the beginning. But at Perris I was given a lot freedom and I was basically coming up with my own dive flow then I would brief the coach/instructor he would approve it and then go jump. At Elsinore however, every time I went I was told exactly what was expected of me, what we were going to do, and the dye flow was dictated to me and we went over it and over it and over it and over it. So it was a lot more regimented but made me feel more secure. Maybe it's just because I was at the military for so long that I need that discipline but that's how the experience was for me. Mexico was a very professional place to jump at they were really good actually the the person i worked with was Canadian So even though I'm fluent in Spanish we did everything in English. rigger who rigged for me and me only, So as soon as I come down I would lay down my rig he would start packing it I'd get something to drink he'd bring it to me and I'd be right back on the plane.  I got to jump with a few different people but I worked with only one coach/instructor. There's another American down there while I was there we ended up hanging out and every morning we had the whole drop zone to ourselves and this is a heavy wind tunnel as well, we ended up doing about 20 minutes each of one-on-one time with their wind tunnel Jedi master, and we would go over everything that we had planned for the day.  I mean we even had our own driver that would take us to the place we were staying at or anywhere else that we wanted to go.  I mean the dropzone started checking on me before I was wheels up at LAX. They coordinated my transportation from Mexico City to the DZ which is about an hour and a half away. and they called me when I got home  to make sure I made it home all right, and their corporate office called me the next day asking me if everything went smooth if I had any complaints and how I liked my experience. I'm now friends with some of those dudes down there on Facebook and can't wait to get back down there.  I mean they really looked out for me. 
As for your other part about being around cool people I can honestly say that at Elsinore it feels more family like. I'm totally new and there's people at Elsinore that from day one have just been extremely cool and I have actually made friends there. Even when I took a two-year break, when i came back they remembered me.  I mean it it feels more friendly .  And I really want to stress that I've never had any bad experience at Perris, though my 1 and only cutaway was there it wasn't bad, I mean I was literally there last week.  But I don't know if it's just because they're such a huge operation but it just feels more business like.  2 weeks ago I was at Elsinore and I was on the same plane with the Navy LeapFrogs, while waiting for my load to go up, I met all kinds of people there in the packing area. And even though I was the noob everyone just wanted to conversate find out more about me I mean it's like they were genuinely interested in who I was and how I like the sport so far. We ended up chopping it up drink some beers on Friday night.  At Perris I think I've spoken to three - four people, and all of those conversations were transactional related. Finally, I make it a point to not say anything bad about any business or any person so all I'm going to say is don't go to skydive West coast for your license, they are extremely tandem focused . That's about as detailed as I can get without breaking my rule."
67112,"I've never jumped there so don't listen to me. In terms of biggest reputation though it's 

1. Perris
2. Elsinore
3. Wait, there are others in the area?"
67113,Im planning on getting my B at SDSD and had my AFF done at Elsinore. SDSD is not a bad place for students/fun jumpers. Tandems are prioritized so you get very little notice to jump on loads. Message me if you still have questions
67114,Thanks everyone! This was super helpful and led me to choose Elsinore. Level 2 in the books!...and I am in love.
67115,"Elsinore 100%. People love Perris because it's a huge drop zone, but that doesn't mean that as a student youll be accepted by other jumpers. Bottom line, from what I've heard there are alot of dicks who only care about jump numbers. Elsinore has a super open family vibe, and not to mention the incredible instructors, coaches, and administration"
67116,I cant comment on Perris as i have not jumped there but cant speak highly enough of my experience at Elsinore. All of the instructors were great and as soon as i got my A license Alan took the time to walk me around and introduce me to other jumpers and the load organizers so i could go straight into jumping with other licensed jumpers. They also have free coaching after aff which was really helpful.
67117,"In my limited experience what you're saying are partially not true. As a student at Perris I had good relationships with most of the instructors and some experienced jumpers. Administration at Perris is also awesome, you know, Dan BC. But I do agree that smaller DZs might be more personal. Perris is a big DZ so sometimes it can be impersonal."
67118,"I know it's not all bad, and Dan BC is absolutely one of the GOATs, but I do have friends who have jumped at Perris who say they'll only jump Elsinore now. I know it's most likely not the instructors and coaches, because they do have a great student program, but it lies mostly with the more experienced fun jumpers. At Elsinore, I have tons of friends with 500+ jumps who love jumping with the 50 jump sky god that is me, but I've never been so I can't really say anything"
67119,No where. Pretty sure you have to be 18. I could be wrong
67120,There’s a 16yr old ripper at Oceanside. Dad is the DZO.
67121,"I think that kid got a waiver because skydiving is in the family.  I don't think 16 is quite normal or allowed in California unless you are connected like that.  Definitely a no if you just want a bucket list tandem.  

The kids in so cal do a lot of tunnel then become ninjas in the sky after they are 18."
67122,wait they don't take tandems under 18?
67123,"There was one place (Tennessee) where you could jump as a 16 year old. The way they did it, tandem rig manufacturer allowed it, and the tandem instructor was the one who owned the rig, not the dropzone. But that TI moved to Australia (I think) with his rig, so that is no more."
67124,"Huh that's really surprising. At my DZ (in the Netherlands) the rules for anyone doing a tandem under 18 are:

- you need to have parental consent
- you need to understand what you're about to do
- you need to fit safely in a tandem harness

I've seen kids as young as 7 or 8 jump"
67125,"Outside of USA, it gets weird. I know a USA dropzone, when they fly out of the country for winter, they allow kids to jump too. But that goes against manufacturer's rules.
  
USPA requires that TIs adhere to tandem system's requirements. Outside of USA, USPA can't require that, i guess? Not sure if TI will get in hot water with tandem manufacturer for busting that rule. I have a feeling if they did, they'd lose quite a bit of business..."
67126,it says you can be 16 in California with permission from a parent
67127,"Notwithstanding that, USPA drop zones won't take anyone under 18."
67128,You are correct. Lodi parachute center is $150 for tandem. If you want photo and video it is $50 more. Just jumped my first and second time last week. My dad jumps there almost daily. Great place and great people.
67129,Some girl busted herself up and ruined it for everyone unfortunately.
67130,"Lodi, CA. I think they accept down to 16. Best to check with them. The 18 year old rule is a USPA BSR. It is not a federal law. There is no law prohibiting someone from under 18 skydiving with parental consent as proven by the fact that there are in fact a few DZs in the USA that will accept someone under 18. They are not common, but they do exist."
67131,Lodi has been 18+ for a few years now.
67132,Pretty sure in the US you have to be 18 as of a few years ago. No way around it
67133,There are a few places in the US that you can skydive under 18.
67134,Because it is a completely compulsory potentially life ending recreational activity and at 16 humans are unable to give adequate informed consent to do such a thing.
67135,Yes check out Lodi! Great place and great people too.
67136,They're 18+
67137,Damn it. Great place to jump regardless.
67138,16 (with parental convent) just checked the site.
67139,"I've seen Bill turn down people under 18 on multiple occasions since the tandem fatality.  The site may not be up to date.  Or he's changed his mind and gone back to 16, although most TI's I know there wouldn't risk their rating so they would turn down the student."
67140,Bill shouldn’t deprive young willing teens. Guess it sucks to not be 18.
67141,"FTFY

>~~Bill~~ *USPA/Gear manufactures/Americas fucked legal system* shouldn’t deprive young willing teens. Guess it sucks to not be 18.

But yeah I fully agree.  I got in a couple years before they changed that.  The best part of it all was showing up to another DZ on my 18th birthday telling them I wanted to do a jump for it and have them start going into the whole tandem thing then pop out a logbook with 86 jumps in it :)"
67142,I hope to have my very own log book for solos soon.
67143,Lodi
67144,Not anymore
67145,Mexico
67146,It’s a bad idea anyway. 18 seems far away but it really isn’t. Patience grasshopper.
67147,Why is it a bad idea?
67148,All of them that are recognized by the USPA. https://uspa.org/DZlocator?DZ=&City=&State=CA&Region=&CountryHidden=&Country=&FindaDZ=Find#results
67150,why is it dangerous for minors to skydive even when there attached to the pro?
67152,"Oh, get off your misinformed high horse. Lodi has a number of problems, and there's a reason it's not my home DZ, but you're not even remotely right."
67154,"Nice weasel phrasing there. The ""most recent"" fatality is also, to the best of my knowledge, the only one. So your claim about this being ""disproportionate"" is patently false, especially if you consider, as you should, that Lodi sends up tens of thousands of tandems a year and has been for twenty years or so. Also, the tandem rating was submitted using Yuri's credentials, but was falsified by Rob, and there are reasons to suspect it was without Yuri's active knowledge or consent. Not to mention Bill was in no way involved in training or certifying anyone, it was an independent operation based on his property. And you know who verified that paperwork and issued the rating? Oh, that's right, USPA did! Who then immediately tried to use the incident to spew bullshit like ""that's why you should always make sure it's a USPA DZ and USPA-rated instructors"" conveniently overlooking the fact that EVERY SINGLE TI IN THE US jumping legally is doing that on a USPA rating, regardless of the DZ. Just like you conveniently forgot it. 

In conclusion, you're wrong and have no actual point, which you're trying to obscure in the hopes people will not know any better. Lodi is far from perfect, but that's no excuse for making bullshit up."
67156,"He was issued credentials BY THE USPA, not Lodi. That instructor could've died anywhere."
67158,"Have you actually jumped in Lodi? Because I have, and we all wore seat belts. I have no idea what you're on, but that's just not true.

Once again, I'm not saying Lodi is perfect. It's got its problems, including what I perceived as failures of safety culture, that made me stop jumping there. But that doesn't make it OK for randos on the Internet to just make shit up about it. Nor does it make it OK for the USPA to be all high and mighty when they're the ones who issued the ratings and they're the ones primarily responsible for the failure of oversight."
67159,I jumped in lodi 3 days ago.  We all wore seatbelts.  I did AFF there 5-6 years ago.  Guess what? I wore a seatbelt.  Nice job being an uninformed keyboard warrior though...
67160,">bakztfutur3

If you want to talk about disproportionate tandem fatality rates, Lodi has had one, Sky Dance has had 2-3 throughout the years and a couple other students on top of that.  And Lodi does more jumps overall per year.

&#x200B;

Any dropzone that has ever had a tandem death (quite a few) and does less jumps per year than Lodi (until 2 years ago, most did less per year) then those all have higher fatality rates.  And any DZ which has had more than one (like Sky Dance an hour away) is way higher.  Learn your facts before you sound like an idiot online."
67161,"It's not any more dangerous than an 18-year-old skydiving.  Drop zones are concerned about liability, though, and in the USA this becomes exponentially more complicated when someone under 18 is involved."
67162,It’s not anymore dangerous. It’s literally because some twat gets hurt then her mom sued and went catabolic.
67163,"Check out *Skydive Perris* near L.A. (about 1 1/2 hour drive from downtown L.A.). They've been around a long time and I've had some great jumps there. Friendly people, fair prices, and lots of options.  It's going to be hot as fuck if you go during a heat wave - so be prepared to sweat while you're on the ground.

Web Site:  http://www.skydiveperris.com/"
67164,Jumped here twice. Always had a good time.
67165,"I did a tandem jump at Skydive Elsinore down in Orange County. It's also about 1.5 hours from LA. Had a really good experience, everyone was friendly, etc.

http://www.skydiveelsinore.com/"
67166,"Also Taft as they run a group discount. Though depending on what you want (time to jump or weird fun people) Perris and Elsinore might be better though they are much a lot less personal. All three places are insured and safe when it comes to tandems. Perris also has indoor skydiving. If you want really cheap then Lodi. No matter what, get video."
67167,Go to Taft. Red Bull team trains there sometimes. A jumper landed in my backyard once when I was a kid. Good times :)
67168,I use and like [node-fetch](https://www.npmjs.com/package/node-fetch).
67169,Same. Using the same interface as the frontend means you can write utilities that work regardless of where you're importing them
67170,yep that's a great part of it. currently working in a monorepo FE/BE structure and that is definitely useful.
67171,Doesn’t support streaming and has a cumbersome API though.
67172,It provides streaming API for Node.js. https://github.com/node-fetch/node-fetch#streams
67173,"I've been using [Axios](https://github.com/axios/axios) for a while and it's great.   
Just remember to, whenever possible, think about how you are going to use it and don't make your business logic depend on external libs :P"
67174,"I wonder why so many people still keep suggesting `axios` as a good http library.

For me `axios` is following `request` path and will soon be deprecated mainly because there are no maintainers ready to maintain it for ""free""

I mean ... you want ESM Support on Axios ? Sure, please pay **6k$** ([https://opencollective.com/axios#category-BUDGET](https://opencollective.com/axios#category-BUDGET)) and then you'll have it.

Besides that we can also point at the **93 PRs** still waiting reviews, so even if you want to help axios progress you wont be able to because of maintainers not even caring about others wanting to help them.

For me, not (or nearly not) maintaining a library just because youre not making money from it is not how opensource work and a  ""pay for feature"" kind of strategy is also not how opensource work for me.

That's why as of now i've switched all my projects from [axios](https://github.com/axios/axios) to [got](https://github.com/sindresorhus/got) because Sindresorhus is exactly the definition of an opensource maintainer and axios's maintainers are not.

Edit : Oh and i forgot but got is the [most complete http library](https://github.com/sindresorhus/got#comparison) for node from a feature pov."
67175,"> Sindresorhus

Guy is a legend"
67176,"I agree with you, he's done so much for the javascript community !"
67177,"I wish I could double upvote you for `got`. Server code absolutely does not need all the features an isomorphic library like `axios` provides, let alone all the rest of bloat it includes for both client and server."
67178,"Yep, the only projects I use axios in these days are legacy projects. And that's just because I don't have time to refactor working code."
67179,"Axios


Edit:
After reading some of the comments here, think it makes more sense to switch to got, it's at least worth a consideration."
67180,"+1 for Axios. Though, I have read good things about got such as it’s http2 support that Axios isn’t planning to add. However, one of my main motivations for choosing Axios is the huge community surrounding it. Try them both out and choose whichever better suits your needs!"
67181,"> I have read good things about got such as

naming a library with simple english words is an antipattern.  it makes things so confusing to talk about."
67182,I just love it’s interceptors
67183,https://github.com/sindresorhus/got
67184,My choice for sure as well. I write everything with promises.
67185,I've been doing Node for about 10 years now and all of sindresorhus's stuff is great.
67186,I've been using [got](https://www.npmjs.com/package/got) for a while now and enjoy it a lot!
67187,It pisses me off we need libraries for stuff as simple as this. I mean you can use the http tools bundled but it's a mess relatively speaking.
67188,"There is no need for these libraries. Someone just can use the fetch api, which is well supported by node. But it’s a bit more complicated to use and the code isn’t that elegant. And sure it has its pitfalls (but look at the issue counter for the suggested libraries ;))

These libraries don’t reinvent http requests, they use the fetch api or similar things anyway."
67189,Since when node has fetch api built in?
67190,"Node does not have a “fetch api”. However you can implement this with http, it’s worth bringing in a library to abstract away that complexity. Once you’ve gone that route, you’ll reach for a library as well. It’s just not the same as browser land."
67191,That's pretty much exactly what I am saying. It's stupid and unnecessary.
67192,Node does not implement the fetch API.
67193,I never said they did.
67194,"Ohh yes, my bad. I misread that. Sorry, it’s late over here…."
67197,Axios or Got are both great. Have used both extensively with no problems. I'd say choose between those two based on whichever implementation looks nicer to you.
67196,got and got-fetch.
67198,I wrote my own once request got deprecated. It’s basically request but with built in promise support instead of callbacks. It is supports streaming to and from the request just like in “request” and it’s a tiny lib. [beggar](https://www.npmjs.com/package/beggar)
67199,Axios is the best.
67200,Axios.
67201,I use [isomorphic-unfetch](https://www.npmjs.com/package/isomorphic-unfetch) or [superagent](https://www.npmjs.com/package/superagent).
67202,"this is my new go to

https://www.npmjs.com/package/needle"
67203,"I believe it's not as much Deprecated as it is ""finished"". You can use it for many years to come. It's just more of a signal that no new features will be added. I think it's nice, you won't be stuck refactoring after some big version update or whatnot."
67204,It doesnt really look finished to me : [https://github.com/sindresorhus/got#comparison](https://github.com/sindresorhus/got#comparison) (and you have to pay for new features (like ESM Support : https://opencollective.com/axios#category-CONTRIBUTE)
67205,"Just use fetch bro, it's the standard, use node-fetch on node cross-fetch if you need RN."
67206,Postman-request is basically a drop-in fit.
67208,"Try PHIN. one of the lightest library in nodejs. I am using in two of my projects, even with Typescript and its going great."
67209,"this isnt strictly react related, but its used by enough React devs (heck even [the current #2 post uses axios](https://reddit.com/r/reactjs/comments/dckm1j/after_wrestling_with_managing_network_request/)) that it bears some awareness and discussion, scare title included (i would change it if i could)

Leaving it up but please be kind to each other and respectful of how open source works - maintenance is unpaid and community alternatives and forks can arise due to disagreements with project governance."
67211,Is cancellation possible?
67213,"Then I’m out of excuses! Will have to play with swapping that out sometime. One of those things that just works for me, but probably worth factoring out and removing unnecessary bloat."
67214,This was my main reason for holding out.
67215,"There are a few nice abstractions in a request library (like Axios) that you may not want to maintain yourself. Retries, timeouts, request/response interceptors, simplified API with shortcuts and streamlined error handling, etc."
67216,Agreed. Axios has nice defaults as well.
67217,What shortcuts?
67219,"You save 1 line, but have to pull in an entire library.

If I was really concerned about the 1 line, I think I'd just write a wrapper function.

I'm kind of a minimalist though."
67221,"Yeah, fetch is both readable and scalable. Built right in!"
67222,"You save a couple of lines of code yourself, but pull in a library of a couple of thousand lines instead. I'm strong on re-usability but that was definitely not the best example."
67223,"> You save 1 line, but have to pull in an entire library.

That feels like the Javascript motto tbh"
67224,"Lol. For some people, yep!"
67225,"Isn't one thing that Axios brings/brought to the table that `fetch` does not is that it throws an error with 4XX and 5XX error codes, while `fetch` does not?

```
fetch(url)
  .then(response => {
    if (response.status >= 200 && response.status < 300) {
      return response.json();
    }

    if (response.status === 401) {
      // Handle specific error codes.
      // ...
    }

    // Explicitly throw an error.
    throw new Error(`Some error message`);
  })
  .then(data => {
    // Work with JSON data.
    // ...
  })
  .catch(error => {
    // Handle errors
    // ...
  });
```

Whereas with Axios you just do this:

```
axios(url)
  .then(response => {
    // Handle 2XX responses.
    // ...
  })
  .catch(error => {
    // Handle 4XX and 5XX responses.
    // ...
  });
```

Axios also parses JSON for you rather than you having to call `response.json()`. Overall, using `fetch` results in a lot more code.

Axios is quite nice. It's a shame if it's true that it's dying.

I've been in backend world for the past few months, so apologies if something above is incorrect."
67226,"Not a big deal imo. You can/should just make your own wrapper for all API calls and have it behave how you want either way. Then you can swap out fetch, axios, or whatever in one place and everything still works the same."
67227,"Yeah could do that, though then I’m writing and maintaining another package...one which many people may want to use, and then we’re potentially back to something like Axios."
67228,"It's not really a package, just a single function to catch whatever status codes you want to throw. That's a few lines tops."
67229,Uh it also has interceptors and a slew of other features. It’s not just a single function.
67230,I was discussing the functionality being discussed above.
67231,And I’m pointing out that that one line quickly becomes a bunch of features and quickly becomes a package.
67232,Yea can still write your own wrapper with interceptors and all in under 100 lines.
67233,"And now you have to maintain it, or rather some dude 3 years from now who picks up your project has to maintain it."
67234,"Where are you getting this idea that a Wrapper/HOC is something that has to be employed to npm for people to maintain? Just write the functionality that you want and use it in your own personal app.  
  
This is pretty straightforward stuff though regardless. Whether you're using fetch, observables, or generator functions with yields in Saga, this stuff shouldn't be as difficult as some people here are making it lmao"
67235,"Some of us work on large systems, not just personal projects. These systems must run for years and likely will be maintained by entirely different people than build them.

It’s not difficult. But a bunch of programmers all going “lul it’s not difficult” and then rolling their own everything becomes difficult to maintain.

Edit: to give you an idea - I have to write documentation to hand off to the client for any app I build.

If I use axios I can properly wrap it so it can be swapped out later and then simply link to the axios docs. If I write my own I must document it.

This would be fine for just fetch, but if you apply this mentality broadly you end up reinventing the wheel a bunch of times and then having to document it every time."
67236,Repeating the same logic for each time you use fetch doesn’t seem like a good alternative though.
67237,"Yep. I'd rather not have a dozen lines of base code just to do a request, and I'd rather not maintain my own package. So that's why I like Axios!

But I see what you're saying about a wrapper providing the benefit of being able to swap it out with anything. I've done something like that in an app I'm working on:

Wrapper:

    import axios from 'axios';
    
    // Use an instance of Axios.
    const client = axios.create({
      baseURL: '/api'
    });
    
    // Set default options for the HTTP client used to interact with this app's API.
    client.defaults.withCredentials = true;
    client.defaults.headers.common['Content-Type'] = 'application/json';
    
    export default client;

Usage:

    import { appRestApiClient } from '../services';
    
    try {
      const response = await appRestApiClient.get('/some/url');
      const { someValue } = response;
    
      return someValue;
    }
    catch (error) {
      // Handle the error.
      // ...
    }"
67238,Maybe one day there will be libraries other than axios that are maintained
67239,Which is why you wrap fetch in your own function with the logic you're repeating.
67240,"Lol, yeah, that’s what I just said."
67241,lol.
67242,"you can just create your own wrapper method around the base fetch request, which you probably end up doing anyways once you've determined what your api looks like"
67243,"Just use response.ok. Which will be true for any 200 range response and false for any other.

The fact that fetch doesnt throw an error with a 404 for example is perfectly valid. 404 is a valid response, not an error. This is where Axios actually gets it wrong imho. The dev should determine when a response should throw an error, not the library."
67244,"All 400 level responses are explicitly errors.

 A 404 is never a valid non error response. It indicates you requested a resource that doesn’t exist. And thus is a user level error."
67245,"No they are not errors in the request. The server is giving a valid response. I as a dev determine if that is an error.

I’ll explain the 404 example a bit better. You could design your REST api in a way that it returns a 404 if a resource is not found. This should not be handled by throwing an error in your app. The dev should write the logic to deal with this.

So every response the server gives is a valid response. Depending on the response code of that response we can determine what to do with it.

An actual error with the request, coming from the network or fetch itself, that should throw an error by default. Not valid responses.

If you want all non-200 responses to automatically throw an error you can make a simple wrapper yourself for that behaviour. It should however not be default in my opinion, and that is why I prefer fetch."
67246,"Getting a 400 means you requested a resource that does not exist - which is an error. Your application shouldn’t be requesting resources that don’t exist. It is appropriate to throw. 

I don’t care if you prefer not to throw when you get an error - but that is your application in error right there.

If you’re saying that 404 is used as a valid response in rest apis for valid requests, it shouldn’t be.

For example if you request all favorites of user 4, and user 4 has no favorites, 404 is not an acceptable response. An empty array (or similar) is because the user exists and the actual response to querying for his favorites is an empty array which is not the same as “resource doesn’t exist”."
67247,"The `fetch` worked correctly though, there was no error on the execution

It issued a request, received a valid response from the server..."
67248,"I understand that and we’re really just pedantically arguing about what constitutes an error.

I would argue that making a call that results in a 404 is an error. You should never make that call, so when it comes back 404 you know that something in your application sent a faulty request. Maybe your state is jacked and your passing bad ids. Maybe you’ve accidentally got a config string wrong. Regardless the error is on your end.

You are arguing that because fetch did not produce a breaking JavaScript error, it shouldn’t throw.

They’re just different philosophies for what “error” means. I am treating 404 as unexpected and thus I want an error. You are treating it as expected and thus want to handle it in normal flow."
67249,"Error handling is expensive though, which means it's more than just pedantry over semantics - errors should be used in exceptional cases

Getting a 404 isn't a faulty request - the request was fine. But it was for something that wasn't possible to give"
67250,"A 404 is explicitly a faulty request.

Here is a quote from a stack post explaining my position


Lets say the request is for /patient/allergies/56, which is a reference to a penicillin allergy. Consider two scenarios (1) There's a mixup in an API change from /patient/allergies/{id} to /patient/allergy/{id} which isn't well communicated, or (2) There's a mixup with a DNS record, and the api request gets routed to a another non-API HTTP server. In both cases conflating application errors (""I don't recognise that id, but I recognised your request"") with lower level protocol errors (""I don't recognise that URL"") into a single response (404) would have a terrible result. – Adrian Baker Aug 9 '17 at 1:05

This is why a 404 is an actual error. The problem is devs have incorrectly used it to just mean “empty response”. It does not mean that."
67252,"Thanks. Is this along the lines of what you do?

```
fetch(url)
  .then(response => {
    if (!response.ok) {
      throw new Error(res.status);
    }

    if (response.status >= 200 && response.status < 300) {
      return response.json();
    }
  })
  .then(data => {
    // Work with JSON data.
    // ...
  })
  .catch(error => {
    // Handle both connection errors and 4XX/5XX statuses.
    // ...
  });
```

I am trying to understand: how would this different from

```
axios(url)
  .then(response => {
    // Handle 2XX responses.
    // ...
  })
  .catch(error => {
    // Handle 4XX and 5XX responses.
    // ...
  });
```

because with

```
if (!res.ok) {
  throw new Error(res.status)
}
```

it seems that any non-ok statuses would trigger the `.catch()` handler. And if so, how would one distinguish between a 4XX/5XX status error and a connection error while in the `.catch()` handler?"
67253,"500 level codes are server errors
400 level codes are user errors.

There is no error with the server accepting your request. You made a faulty request, which is an error."
67254,"Not really. 4xx and 5xx means the server received your request, determined something went wrong in a way that the server could gracefully recover, and it successfully told you about it. Therefore, the call to `fetch` was successful, it is just returning a value which indicates a state that may be an error. It shouldn’t be up to fetch to determine what you consider an error, especially in the 4xx case. 

404 is a good example. Requesting something that doesn’t exist isn’t necessarily an error, it’s just another state."
67255,"See I disagree on the 404 point. If you get a 404 then the request you sent isn’t valid and you need to figure out why you sent an invalid request (thus throwing).

I am treating a 404 as unexpected and as such, an error.

You are treating it as expected, and thus “another state”."
67256,"Sure. Treating it as unexpected is fine, but it might not be unexpected. That’s where I don’t want the library I’m using to make requests to make that assumption for me. I feel pretty strongly that error handling shouldn’t be a means of control flow. It makes it hard to determine where error handling is defensive vs expected plus try/catch blocks are just less readable than if/else in my opinion. Because of that, I don’t want my request library making assumptions of what is and isn’t an error."
67257,"Error handling shouldn't be ""expected"". If you are expecting an error from a request, then you have an issue with your system (or of course could be unfortunately dependent on a faulty system).  


One of the reasons this comes up is because programmers use 404 incorrectly a whole lot to mean ""empty state"" instead of it's actually meaning. For example if I request /users/4/allergies and user 4 has zero allergies, I should get back \[\], and not a 404, because an empty response IS the valid resource that is there. However, many developers have returned a 404 in cases like this.  


The issue is that this pollutes the meaning of 404 and makes it hard to understand. Is this just a resource with an empty response? Or did I actually call a non-existent resource?  


a 404 should always be the latter, which should always be an error. It should not be expected, and thus should throw, and not be handled inside your normal flow control."
67259,Wow. Ok buddy. Your system making a faulty request apparently isn’t an error. Got it.
67261,"You’re splitting hairs, regardless of where the error originated its still an error...
You’re argument makes it sound like if I use my debt card and I have zero funds in the bank, its not a failure. The bank rejected the transaction, so does the store let me walk out with my purchase? Nope, the store doesn’t give a shit, if t was able to talk to the bank or if I’m out of funds. There is no transaction and the purchase ends. Period, their not going to cut hairs and quibble about which side had an issue..."
67262,"I am yet to encounter a situation where a >400 error and call/network error do not both result in rejecting the promise. So it essentially always boils down to the same thing, throw and handle in catch (show a notification, or whatever). Which is why I make fetch throw on 4xx and 5xx.

Edit: maybe I worded it wrong. I meant that no matter the error, you're probably going to want to handle it in the same way, display an error toast or whatever, which means it's reasonable to have fetch throw on >400 as well. You can then put all the error handling code in the catch block and execute the same code no matter if it was an http or networking error."
67264,"Yeah, and?"
67266,"That in an application http errors (which fetch doesn't throw on), call exceptions and network errors (which fetch throws on) are all almost always handled in the same way - through the error handling branch of your code. They are all errors and it does not matter what kind of errors really - you probably want to clean up and display an error message of some sort for all of them. It is handy to handle errors on fetch promise rejection, in the catch block, which means it's reasonable to have it throw on >400 as well. Sure those are valid responses, but errors nonetheless, which your application will most likely be handling just the same as, for example, a timeout or any other networking error."
67267,"Except those aren't really features.

Those HTTP codes have specific meanings and you really shouldn't be handling them the same way, they can also be used quite differently in different systems and with different APIs.

You're going to be writing some filter logic in most cases anyway.

And having the json cast be separate is also good as it allows you to handle connection errors separately from parsing errors, because again, those are two different things.

Axios requires less code if you don't care about handling your errors, but it's actually more code if you do."
67268,These are good points. Handling connection errors separately from specific error codes is something to consider.
67269,"The fetch api was implemented the way that it is for a reason.

I'm not saying it's perfect but it's not done without reason."
67270,"+1 for fetch! You really don't need a library for this stuff unless you're doing something other than just downloading a file.

Edit: the use cases that are difficult or unsupported with fetch are perfectly valid, I didn't mean that they weren't. Just a silly choice of words. My point was only that you don't need a library for simple stuff like just downloading a file."
67271,"or still supporting IE11.

**Edit:** come to think of it, that does count as doing something weird."
67272,Polyfills are your friend :)
67273,Absolutely - whatwg-fetch makes my life a breeze.
67274,Does the whatwg-fetch polyfill support aborting requests?
67275,Exactly! 😀
67276,What if I always want interceptors? I build a wrapper around fetch and start decorating it with interceptors and all the other features it turns out are pretty nice aaaaand.... I’m building a library like axios.
67277,"See my edit, I'm not against libraries. Use one if you need it!"
67278,"Isn't stuff like multipart-forms / file uploads, query string building etc a bit of a hassle with only fetch?"
67279,"Use a library that works for that, then! 😃"
67280,This thread did in fact make me go back and change from axios to wretch (which uses fetch) in a new project I am working on. The API feels very fluid and nice :D
67281,"Nice, I'll have to check it out at some point."
67282,"For query strings, everyone should use https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams. Unfortunately it was introduced late in the life of JS and so it has a million non-native competitors."
67283,"> unless you're doing something weird

Fetch doesn't support download progress feedback. 

That's not ""weird"". That's necessary in many situations."
67284,"I was using ""weird"" as a collective term for most things outside just downloading a file. Didn't think of a better word in the moment.

Fetch is a simple implementation but it covers the vast majority of use cases. But it doesn't mean that the use cases is doesn't cover aren't valid."
67285,How about the Fetch gotchas?
67286,What about them?
67287,How does a Fetch rookie work around these?
67288,"They would read the documentation, as they should with any library they use... [https://developer.mozilla.org/en-US/docs/Web/API/Fetch\_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"
67289,"I’ve recently switched from axios to fetch in a react project due to proxying request issues. 

Fetch is great just took some reading to understand the error handling process, like how to handle server errors, etc."
67290,We had issues with file uploads that caused us to switch at the time.
67291,Just got burned by fetch not being supported by ie.. how did you deal with that?
67293,"If you had Babel did you keep pushing not to support ie, because the amount of bugs? I just got hit with ie not supporting .contains and fetch, I have to support ie though.. what’s the best way to ensure compatibility? I couldn’t find an extension that warns against comparability issues.. or a global polyfil.. lol"
67295,">whatwg-fetch

But there is always more modern JS that the browser doesn't support. I feel like Babel isn't just to get past ES6 but rather to keep using the latest syntax. Also there are a ton of fetch polyfills you could use: whatwg-fetch for instance."
67296,How do you handle interceptors with regular fetch?
67297,Same. But people can't seem to stay away from unnecessary dependencies and bloat for some reason.
67298,Missing interceptors unfortunately.
67299,"I agreed with this mostly.

I've been using fetch for a long time and only found and issue with it in the past week - fetch has no timeout. There are workarounds for this but they generally mean leaving the connection alive and just rejecting a wrapping promise which feels... dirty. 

Hope fully this short coming will be address in the future"
67300,The issues come when you want interceptors or the like. Then you need to wrap fetch in something.
67301,"Same. I see all these blogs with Axios or other libraries and I’m just not sure why. Is practically the exact same amount of code (except yes, you have to parse the JSON), and you avoid adding another dependency."
67302,fetch() is a PITA
67303,Dropped Axios for fetch over a year ago. Never looked back.
67304,"Same, I use `node-fetch` for node things as well."
67305,A package with 5 million weekly downloads and commits as recently as 5 days ago is considered dead?
67306,"Infamous [left-pad](https://www.npmjs.com/package/left-pad) has 4.3 million weekly downloads, despite being marked as deprecated. Just because other packages use some package as dependency doesn't mean that said package is not dead."
67307,"I do agree that weekly downloads don’t really tell the whole story just like open issues, number of commits, etc. don’t either. However, despite criticisms of the management of `axios`, I think it is safe to say that it is still widely used and alive as ever."
67309,"You’re right. I don’t have facts and sources that `axios` is not dead. I’m just trying to point out that it seems to be really widely used even in new projects, taught in boot camps, and I can’t speak on the quality of commits, but they seem to be still coming in even for a pretty mature library. I am just skeptical that `axios` is “mostly dead” just like this sub was claiming `redux` is supposedly dead too."
67310,"Just because something is used doesn't mean it's thriving. 

How are you equating that ""being used"" is the same as being alive? At my last job we used Zend framework 1.x despite the last update being in like 2012. Just because it's functioning doesn't make Zend 1.x alive and well haha. 

Nobody is saying that being dead makes the tool suddenly unusable. It just means ***as a project***, Axios appears to be dead/dying. I have to imagine a lot of people use it because they're like me. They had no idea there were so many concerning issues with the project. I had no idea until I saw this post."
67311,I understand.
67312,"Lol, `redux` unfortunately is dying.  I'm not saying people aren't still using but many people are realizing just how easy hooks are to use and replicate a store.  
A lot of companies now are indeed migrating to hooks for the sole reason that they don't want to reject new talent that might not be familiar with older conventions but can achieve the exact same results faster with newer features."
67313,"Regarding that topic, I can’t agree with this  [comment](https://reddit.com/r/reactjs/comments/crm47z/should_i_use_context_api_instead_of_redux/ex6pli6) more."
67314,Elvis is still selling records.
67316,"This. Last release was 4 months ago and really, what updates does something like this need? There are no critical security issues I'm aware of and it works fine."
67317,"They had a security issue like that but handled it ~~badly~~ not so great. The fix (for a long lived vulnerability) was in master for 3 weeks before publishing to npm, and then they broke third party plugins. From the original post I linked:

> Denial of Service Vulnerability

> On April 25th 2019, snyk.io users started getting a security warning about a DoS vulnerability in Axios. Others followed after snyk published a blog post about it.
> 
> This issue was first reported on Sep 22, 2017. That is almost 2 years ago.
> 
> And the fix? Just a single line of code.
> 
> stream.destroy();"
67318,"Honest question here - what would the vector of attack be, in theory? How would you launch a DoS against the client?"
67319,"Someone with access to the resource you are requesting can exceed the `maxContentLength` limit and (even inadvertently) overload the client. A better explanation is here https://snyk.io/blog/a-denial-of-service-vulnerability-discovered-in-the-axios-javascript-package-affecting-all-versions-of-the-popular-http-client/

Edit: Yikes I just answered the question and got instantly downvoted :/ Sorry if my explanation is wrong. It really boils down to whether you can trust that the 3rd party resource won't be hacked and won't have bad actors."
67320,Oh right! Yeah that is bad!
67321,"Found this Reddit thread after googling ""axios dead"" when I saw this 3 year old bug issue unresolved and closed for no reason 

 [https://github.com/axios/axios/issues/362](https://github.com/axios/axios/issues/362)"
67322,"You realize weekly downloads don't mean shit right?  If you download a repository and somewhere down the chain `axios` is being used but you aren't explicitly using it in your project, it still gets downloaded and the count increases.
Oh shit! Your `node_modules` got fucked some how, you reinstall the project, boom you just increased the count again.
My point is that weekly downloads are skewed as fuck."
67323,I do agree somewhat.
67324,"Agreed with this. Although there is now a native solution, the title is factually speaking an ignorant statement."
67325,I'm sorry I'm still learning (barely finished fullstackopen which uses axios btw). What native solution do you refer to? I don't think I've heard of it. Is it fetch?
67326,"It's probably \`fetch\`, yeah. I use \`fetch\` almost exclusively, although I've also been playing around with [wretch](https://github.com/elbywan/wretch) for some quality of life things like not needing to do \`.then(resp => resp.json())\` and easier handling of HTTP errors."
67327,"Yes, fetch. Although technically it’s native, axios already pretty much a standard AJAX library."
67328,"I think you're ignoring all the points I mentioned. It just got some commits after largerly being ignored. Just take a look at the [commit frequency](https://github.com/axios/axios/graphs/commit-activity), or the bigger thread I linked that details how badly they handled a 2 year old security vulnerability."
67329,Should a library that has a mature API and covers all necessary functionality still be expected to have frequent commits?
67330,"If there are no bugs, no. But there are unfortunately many open legitimate issues. Lodash in contrast has a mature API that hasn't changed in 3+ years but has a much more active repo."
67331,"Welcome to the world of front end frameworks, if it didn’t have a commit in the past 24 hours it’s dead!"
67333,"And [`TypeScript`](https://github.com/microsoft/TypeScript/issues) has over 3,000 open issues..."
67334,"I get your point, but the Axios project is only about 1600 lines of code. Typescript has **files** that are 3 times the size."
67335,We moved to fetch using [wretch](https://github.com/elbywan/wretch) which simplifies the API.
67336,Oh I quite like common error code handling
67338,"As a programmer (I'm assuming), I'd expect you to use better reasoning than that. OP laid out why Axios is ""dead"" way beyond just commit frequency."
67339,"[REAL coders use XMLHttpRequest, BRAH.](https://gomakethings.com/why-i-still-use-xhr-instead-of-the-fetch-api/)  


(i'm just kidding, fuck that noise, I just use Fetch)"
67340,doesn't axios allow requests to be cancelled?
67341,"Yes, but it’s not a unique feature. You can do that with the native “fetch”, too, by passing it an AbortController."
67342,Cool. I didn’t know this was possible with fetch(). Is it a new feature?
67343,"Yes, `AbortController` is rather new and it cannot be polyfilled. [https://caniuse.com/#feat=abortcontroller](https://caniuse.com/#feat=abortcontroller)

Use `XMLHttpRequest` and `XMLHttpRequest.abort()` instead if you need to close connection when `AbortController` is unavailable."
67344,"There are abortcontroller polies. It will not cancel the actual request but that is a pretty useless thing anyway. It’s http, you can’t really cancel it reliably anyway.

Also btw, AC is a more general promise abortion controller, not specific for fetch."
67345,"Thanks for pointing this out, I forgot it's not specific for fetch."
67346,"Curious, when new developments like this come out, how do you keep updated on what's coming out?"
67347,"Follow browser/engine vendors' blog with RSS:

[https://developers.google.com/web/updates](https://developers.google.com/web/updates)

[https://hacks.mozilla.org/](https://hacks.mozilla.org/)

[https://webkit.org/blog/](https://webkit.org/blog/)

[https://v8.dev/](https://v8.dev/)

And [https://2ality.com/](https://2ality.com/) is also a good one."
67348,Newish.
67349,"This is the reason I adopted axios when I found out that fetch didn't have a native timeout solution. I could cancel the promise for it, but requests would stack up in the browser until I reached its limit."
67350,"Axios does not handle https proxying to http easily, while others lib does that fine. Let’s ditch axios."
67351,"Shout out for ky, it's been a joy to use"
67352,"This needs to be guilded, pinned and printed on every bank note."
67353,Axios supports Node and Browser based runtimes out of the gate. You'd need two libraries to do the same thing with `ky` and `got`.
67354,"Exactly.  At this point, and with so many options, my minimum requirement is that it works in both browser and Node.  

I see there is a 'ky universal' package that does that, but it looks to be a new entrant.  

[https://github.com/sindresorhus/ky-universal](https://github.com/sindresorhus/ky-universal)"
67355,"You can use `ky` in the server for SSR ([node-fetch](https://www.npmjs.com/package/node-fetch)), it's just that `got` is more full-featured and tailored for Node."
67356,"Fork, move community over, problem solved. Axios 2 ftw."
67357,"Could someone who's willing to maintain it fork axios and accept PRs there? Otherwise, as people are saying fetch might be a reasonable alternative as well"
67358,"Are you in some kind of crusade against Axios? Anyway, if it works for you, use it, if not, use something else like fetch or ky as you mentioned. Why all the fuss? Why not have a post about why fetch, or ky or whatever package works best for you and why...."
67359,"Sorry if it seemed this way, I'm a big fan of Axios and I'm really hopeful that maintenance will pick up. I just think it's good to carefully select core libraries which is why I brought it up."
67360,"Fair enough, and i agre. It really seemed that way, though."
67361,">Why all the fuss?

If people here push beginner devs into using Axios all the time and nobody is here to tell me why that isn't a great idea then instead of improving I'll develop bad habits and the echo chamber won't correct that.

Most of us are here to become better developers and, imo, using Axios is not generally setting yourself up for long-term sustainable success."
67362,"I think a big part of sustainable success is being able to figure out by yourself what is the right tool for the job you are trying to accomplish. Try new stuff, see how it works, then decide. Didn’t know people used to push Axios. Suggesting it, sure, but also offer alternatives, I’d say. Other than that discussion about it is always good. But the title does stick out like a sore thumb about an open source project."
67363,Axios will live as far as tutorial creators use it in their tutorials.
67364,"Just use `fetch`. Writing your own wrapper is trivial, and, if needed, polyfilling it can be done with [less than 500 bytes](https://github.com/developit/unfetch)."
67365,"Some of the things people say here to justify adding another package to the package hell is not relatable to me.

Retries, timeouts, interceptors are all just 40-50 lines of code on top of fetch with a wrapper function. Yes, reinventing the wheel and all but I would rather keep it simple and add things I need rather than bolt on yet another package.

Or my apps have been not that complex to require packages like these and I can understand use cases like that."
67366,"This is a shame. Axios had some nice built-in features that my team really liked out of the box.

Also this is my own personal opinion but I found axios-mock-adapter to be way easier to test with compared to fetch-mock."
67367,Curious if your affiliated with the recommended library?
67368,"After seeing some benchmarks that shows xhr is faster, never looked back. These days I'm using it with promises to get nice and tidy accessibility like fetch."
67369,[Why Axios is better than Node Fetch](https://link.medium.com/F9x3wZUtu0)
67370,">modern alternatives

Goddamn JS only devs."
67371,"If you have to rely on a 3rd party library to make requests I'm sorry but you need to learn how to use `fetch`.  Way too many enterprise companies write wrappers around `fetch` to adapt it to their needs and if you don't know how to use `fetch`, you won't know how to use their wrapper effectively.In reality even if you do prefer a 3rd party solution, I'd like to remind you that understanding where an abstraction comes from only helps you better understand the abstraction.

`fetch` is native, learn how to use."
67372,"Fetch does not support progress callbacks. 

Maybe instead of pretending that you're superior to everyone you should understand that people use things for a reason."
67373,"Lol, nice.  Why don't you re-read my comment and try again.  The key part is that, understanding where an abstraction comes from and how it works helps you better understand how to implement and use that abstraction more effectively.  I don't think I'm superior because I want to understand how things work under the hood.

>Progress events are a high level feature that won't arrive in fetch for now. You can create your own by looking at the `Content-Length` header and using a pass-through stream to monitor the bytes received.  
>  
>This means you can explicitly handle responses without a `Content-Length` differently. And of course, even if `Content-Length` is there it can be a lie. With streams you can handle these lies however you want.

[source](https://jakearchibald.com/2015/thats-so-fetch/)"
67374,That's a great argument for doing everything with XHR + wrappers
67375,"Lol I mean really though, if you can effectively use XHR I can't think of a reason why you shouldn't.  If it ain't broken don't fix it right?  But then again I only know the basics of XHR requests and I'm not sure if there are any reasons why you would want to not use it.  But then again I'm pretty sure XHR is old enough to drink now."
67376,"A lot of enterprise companies still support IE too and then you need fetch polyfill so go ahead and learn XHR too. Just write a browser, fuck it. Wait the OS is 3rd party too. Crap so is the hardware. Shrug. Let’s make more coffee. 

On a serious note, 3rd party on its own is a stupid reason not to use some tool. If there is a technical reason, a security concern, fine. But just cause 3rd party? Come on."
67377,"Yea but that's not what I'm saying.  I absolutely fucking agree with you.  My entire point is that learning how an abstraction works is only going to help you better use and understand the abstraction itself.  In all honestly I meant to edit my post to mention how understanding how XHHR requests would only help you better understand how fetch works.  It really has nothing to with being a 3rd party library exclusively, its about being able to understand the fundamentals before you understand abstractions.  I mean you didn't learn react before vanilla JS did you?  I know I didn't and even if I did, it would've taken me a 5x as long to understand react as well as I do now."
67378,"Oh no, how will I ever learn to use *fetch*?"
67379,"This is why you don't jump on hype.

I had considered migrating from `node-fetch` but I didn't like the feel of axios code. It felt more verbose and at the same time, not as obvious what actually happened inside of its internals."
67380,"The fact that `response` is sometimes a string and sometimes an object (depending on what the server happens to send back) made me lose interest in axios in my first couple of days using it. Why would anybody think that's a good idea?

Forces you to write wrapper code to check on every single request... If you want your system to be reliable."
67381,??? What are you expecting if the server is sending text or json?
67382,"I simply expect that `response` contains the response.  Not a transformed version of it ***sometimes and not others*** depending on what external 3rd party servers happen to return at any given point in time for any number of possible reasons.

The server is always sending text. **JSON is still just a text string.** As is XML.   `response` should just be the response... consistently.   HTTP servers don't send ""objects"", they send documents as text **strings** (which is what JSON is) and binary files.

If you want it transformed to something else... i.e. an actual object, it should be in another variable or method.  Or at least make it optional.  The fact that the same variable is used for entirely different purposes and data types depending on external factors is just plain stupid to anybody who cares about their systems to work consistently and reliably.

The way it works currently is unreliable by default without adding extra wrapper code to check what data type it is and writing conditional code to handle both cases.

Assuming that all servers are always going to send back what the dev originally expected is ridiculously naive. And causes unexpected exceptions to be thrown in production simply due to what some external server happens to return that day.  If your code expects an object and gets a string, it's gunna fail.  If your code expects a string and get an object, it's gunna fail.

Bizarre to me that I'm getting so many downvotes and that people think this is sensible default behaviour.  I guess these people must really really hate strictly typed languages if they think using the same variable name for totally different things and types is a good idea.. 

It's retarded enough when functioning as intended, but as a bonus causes all sorts of other problems from related bugs due to this idiotic design decision:  https://github.com/axios/axios/issues?utf8=%E2%9C%93&q=response+object+string

Given all these issues... what's the upside of using the same variable for two entirely different purposes and datatypes, as opposed to simply making it a method, or at least optional?"
67383,NPM KY says it was published only 14 hours ago. Why should we trust this as an alternative?
67384,Yes the latest version
67385,still using axios
67386,Axios usually. Sometimes fetch for easy caching in pwas
67387,"I'm using Got : [https://github.com/sindresorhus/got](https://github.com/sindresorhus/got)

While documentation can be a little bit lacking sometimes on some little details, it's pretty neat, efficient, and extensible. I've had trouble downloading large files from my node app because on some connections there was a timeout, but with Got I was able to plug-in another http agent that supports keepalive.

Also, it's got progress support when you're dealing with large requests (downloading/uploading big files)"
67388,"Sindre Sorhus... This guy is everywhere!

Most of his packages I've used are really good, I'm giving this one a try, thank you!"
67389,"Axios but it needs help. Project is dying, there are no really active maintainers."
67390,"I use fetch, have no issues with it now that I understand it and it's native and works so why use anything else?"
67391,it doesn’t support progress and cannot be cancelled yet
67392,Doesn’t reject on 400+ which are handled exactly the same as 500+ in all of my applications.
67393,You don't need to wait for fetch to reject your 400's. Write module that wraps around fetch and reject 400's in the module and you're done.
67394,"I know, but IMO I shouldn’t need to do that. The argument made by developers for why fetch shouldn’t reject on 400+ makes no sense at all to me and because of that annoyance I’m faithful to axios."
67395,\+1 for axios
67396,"Fetch is native in node? Is that something new?

I was under the impression it was only worked natively in client side code."
67397,"Apologies, didn't really register to me what sub this is. It's not native to Node, just to standard client-side JS..."
67398,"Ah, np. I was honestly curious. Didn't know if I missed an update or something"
67399,Good call out. Totally forgot what sub we were in!
